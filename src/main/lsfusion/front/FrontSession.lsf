MODULE FrontSession;

REQUIRE FrontUser, Time, Utils;

NAMESPACE Front;

CLASS FrontSession 'Внешняя сессия';
TABLE frontSession(FrontSession);

token 'Токен' = DATA TEXT (FrontSession);
frontUser = DATA FrontUser(FrontSession);
created 'Создан' = DATA DATETIME (FrontSession);
updated 'Обновлен' = DATA DATETIME (FrontSession);

frontSession = GROUP AGGR FrontSession f BY token(f);

EXTEND FORM customer 
    OBJECTS s = FrontSession
    PROPERTIES READONLY 'Токен' = ISTRING[250] (token(s)), created(s), updated(s)
    FILTERS frontUser(s) == u
;

DESIGN customer {
    users {
        MOVE BOX (s) { caption = 'Внешние сессии'; }
    }
}

generateToken () = FORMULA TEXT 'MD5(random()::text)';

login(FILE f) {
    
    LOCAL login = STRING[20] ();
    LOCAL password = STRING[100] ();
    
    IMPORT JSON FROM f AS FILE TO() login = login, password = password;
    
     calculateBase64Hash('SHA-256', password());
     
    IF NOT (GROUP MAX FrontUser u IF login() == login(u) AND sha256Password(u) == calculatedHash()) THEN {
        EXPORT JSON FROM code = '401', message = 'Неверный логин или пароль';
        RETURN;
    }
    
    NEW s = FrontSession {
        created(s) <- currentDateTime();
        updated(s) <- currentDateTime();
        frontUser(s) <- frontUser(login());
        token(s) <- generateToken();
        APPLY;
        EXPORT JSON FROM token = token(s), code = '0';
    }
}

invalidToken = DATA LOCAL BOOLEAN ();

sessionTimeOut 'Таймаут сессии (минуты)' = DATA LONG () COMPLEX;

EXTEND FORM options PROPERTIES() sessionTimeOut;
DESIGN options { commons { MOVE PROPERTY(sessionTimeOut()); } }

checkToken (TEXT token) {  
    
    invalidToken() <- NULL;
    
    IF NOT frontUser(frontSession(token)) THEN {
        EXPORT JSON FROM code = '401', message = 'Неверный токен';
        invalidToken() <- TRUE;
    }
    ELSE FOR FrontSession s = frontSession(token) DO {
        IF subtractSeconds(currentDateTime(), sessionTimeOut() * 60) > updated(s) THEN {
            EXPORT JSON FROM code = '401', message = 'Устаревшая сессия';
            invalidToken() <- TRUE;
        }
        ELSE NEWSESSION {
            updated(s) <- currentDateTime();
            APPLY;
        }
    }
}
//
//deleteOldSessions() {
//    NEWSESSION {
//        FOR subtractSeconds(currentDateTime(), 7200) > updated(FrontSession s) DO {
//            DELETE s;
//        }
//        APPLY;
//    }
//}

file = DATA FILE (FrontSession, ISTRING[50]);

uploadFile(TEXT extension, TEXT token, FILE f) {
    
    checkToken(token);
    IF invalidToken() THEN RETURN;
    
    logToFile('API', 'uploadFile:\n' + token + ' - ' + extension);
    
    FOR ISTRING[50] id = generateToken() AND FrontSession s = frontSession(token) DO {
        file(s, id) <- file(f, extension);
        APPLY;
        
        EXPORT JSON FROM code = '0', id = id;
    }
}