MODULE EGRUL;

REQUIRE Project, LegalEntity;

dadataEndpoint 'Dadata Endpoint' = DATA STRING ();  // http://suggestions.dadata.ru/suggestions/api/4_1/rs/findById/party
dadataAPIkey 'API-ключ Dadata' = DATA STRING ();   // 005696e4128027d2399c8440e8501438f4245459 - наш ключ (бесплатный, лимит на 10 тысяч обращений в день)
dadataAPIsecret 'Секретный ключ для стандартизации Dadata' = DATA STRING ();   // 065b071fdd53781786d41b66a5882425a16788bd
dadataAuth 'Authorization' = 'Token ' + dadataAPIkey();
dadataHeader (STRING name) = CASE // in Comments Dadata fields
    WHEN name == 'Authorization' THEN dadataAuth() // 
    WHEN name == 'Content-Type' THEN 'application/json';

EXTEND FORM integrationData  //  Выводим значения ключей на форму настройки параметров приложения
    PROPERTIES() dadataEndpoint, dadataAPIkey, dadataAPIsecret
;

DESIGN integrationData {  //  Just Design настройки
    pane {
        NEW egrul {
            caption = 'Интеграция ЕГРЮЛ';
            MOVE PROPERTY(dadataEndpoint());
            MOVE PROPERTY(dadataAPIkey());
            MOVE PROPERTY(dadataAPIsecret());
        }
    }
}

legalName 'Краткое наименование без ОПФ и кавычек' = DATA ISTRING(LegalEntity) IN params;  // Контейнер под краткое фирменное наименование без указания ОПФ и кавычек
legalPure 'Полное наименование без ОПФ и кавычек' = DATA ISTRING(LegalEntity) IN params;  // Контейнер под полное фирменное наименование без указания ОПФ и кавычек
legalLatin 'Наименование на латинице' = DATA ISTRING(LegalEntity) IN params;  // Контейнер под наименование на латинском, по факту API его не отдаёт
legalShort 'Краткое наименование' = DATA ISTRING(LegalEntity) IN params;  // Контейнер под краткое фирменное наименование
legalLong 'Полное наименование' = DATA ISTRING(LegalEntity) IN params;  // Контейнер под полное фирменное наименование
inn 'ИНН' = DATA ISTRING (LegalEntity) IN params; // Контейнер под ИНН
kpp 'КПП' = DATA ISTRING (LegalEntity) IN params; // Контейнер под КПП
ogrn 'ОГРН' = DATA ISTRING (LegalEntity) IN params; // Контейнер под ОГРН
//address 'Адрес' = DATA ISTRING (LegalEntity) IN params; // Контейнер под Адрес
director 'ФИО директора' = DATA ISTRING(LegalEntity) IN params; // Контейнер под ФИО директора
zipcode 'Почтовый индекс' = DATA ISTRING(LegalEntity) IN params; // Контейнер под Почтовый Индекс

EXTEND FORM legalEntity PROPERTIES (o) legalName, legalPure, legalLatin, inn, kpp, ogrn, address, director, zipcode;

DESIGN legalEntity {
    tabPane {
        MOVE GROUP (params, o) { type = CONTAINERV; }
    }
}

legalName = DATA LOCAL ISTRING(INTEGER);  // Контейнер под краткое фирменное наименование без указания ОПФ и кавычек
legalPure = DATA LOCAL ISTRING(INTEGER);  // Контейнер под полное фирменное наименование без указания ОПФ и кавычек
legalLatin = DATA LOCAL ISTRING(INTEGER);  // Контейнер под наименование на латинском, по факту API его не отдаёт
legalShort = DATA LOCAL ISTRING(INTEGER);  // Контейнер под краткое фирменное наименование
legalLong = DATA LOCAL ISTRING(INTEGER);  // Контейнер под полное фирменное наименование
inn = DATA LOCAL ISTRING (INTEGER); // Контейнер под ИНН
kpp = DATA LOCAL ISTRING (INTEGER); // Контейнер под КПП
ogrn_date = DATA LOCAL ISTRING (INTEGER); // Контейнер под ОГРН
ogrn = DATA LOCAL ISTRING (INTEGER); // Контейнер под ОГРН
address = DATA LOCAL ISTRING (INTEGER); // Контейнер под Адрес
director = DATA LOCAL ISTRING(INTEGER); // Контейнер под ФИО директора
zipcode = DATA LOCAL ISTRING(INTEGER); // Контейнер под Почтовый Индекс

GROUP data; // в этих группах выдержка из структура JSON, задокументированного по ссылке:
GROUP management : data;  // https://dadata.ru/api/find-party/
GROUP name : data;  // выведены пути только к тому, чем пользуемся
GROUP address : data;
GROUP adata EXTID 'data' : address;

FORM dadata   // форма для разбора JSON, ее можно использовать в разных вызовах
    OBJECTS suggestions = INTEGER 
    PROPERTIES IN data inn = inn(suggestions), kpp = kpp(suggestions), ogrn_date = ogrn_date(suggestions), ogrn = ogrn(suggestions) 
    PROPERTIES IN management name = director(suggestions)
    PROPERTIES IN name short = legalName(suggestions), full = legalPure(suggestions), latin = legalLatin(suggestions), short_with_opf = legalShort(suggestions), full_with_opf = legalLong(suggestions)
    PROPERTIES IN adata source = address(suggestions), postal_code = zipcode(suggestions)
;

CLASS EgrulLog 'Лог расхождений с ЕГРЮЛ';
TABLE egrulLog (EgrulLog);

legalEntity = DATA LegalEntity(EgrulLog);
nameCustomer 'Юр. лицо' (EgrulLog l) = shortName(legalEntity(l));

property 'Параметр' = DATA ISTRING[250](EgrulLog) CHARWIDTH 30;
value 'Значение на' = DATA ISTRING[250](EgrulLog) CHARWIDTH 20;
prevValue 'Значение с' = DATA ISTRING[250](EgrulLog) CHARWIDTH 20;
dateTime 'Дата/время' = DATA DATETIME (EgrulLog);
date 'Дата' (EgrulLog l) = DATE (dateTime(l));
time 'Время' (EgrulLog l) = TIME (dateTime(l));

user = DATA User(EgrulLog);
nameUser 'Пользователь' (EgrulLog l) = name(user(l));

FORM egrulLog 'Лог расхождений с ЕГРЮЛ'
    OBJECTS o = EgrulLog PANEL
    PROPERTIES(o) nameCustomer, dateTime, nameUser, property, prevValue, value
    
    EDIT EgrulLog OBJECT o
;

FORM egrulLogs 'Лог расхождений с ЕГРЮЛ'
    OBJECTS o = EgrulLog
    PROPERTIES(o) READONLY nameCustomer, date, time, nameUser, property, prevValue, value
    ORDERS date(o), time(o)
    
    LIST EgrulLog OBJECT o
;

egrul 'Импорт из ЕГРЮЛ' = DATA BOOLEAN (EgrulLog);
egrul = DATA LOCAL BOOLEAN ();

EXTEND FORM legalEntity
    OBJECTS l = EgrulLog LAST 
    PROPERTIES(l) READONLY nameCustomer, date, time, nameUser, property, prevValue, value, egrul
    ORDERS date(l), time(l)
    FILTERS legalEntity(l) == o
;

DESIGN legalEntity {
    tabPane {
        NEW params {
            caption = 'Дополнительная информация';
            fill = 1;
            MOVE GROUP (params, o) { alignment = STRETCH; }
            MOVE BOX (l);
        }
    }
}

getEgrulData 'Импорт из ЕГРЮЛ' (LegalEntity a) {
    LOCAL result = FILE();
    EXTERNAL HTTP POST dadataEndpoint() HEADERS dadataHeader PARAMS JSONFILE ('\{"query": "' + (OVERRIDE inn(a), ogrn(a)) + '"\}') TO result;
    IMPORT dadata JSON FROM result();
    egrul() <- TRUE;
    FOR inn(INTEGER suggestions) DO {
         inn(a) <- inn(suggestions);
         kpp(a) <- kpp(suggestions);
         director(a) <- director(suggestions);
         legalName(a) <- legalName(suggestions);
         legalPure(a) <- legalPure(suggestions);
         legalLatin(a) <- legalLatin(suggestions);
         legalLong(a) <- legalLong(suggestions);
         legalShort(a) <- legalShort(suggestions);
         address(a) <- address(suggestions);
         zipcode(a) <- zipcode(suggestions);
    }
}

getEgrulDataUser 'Импорт из ЕГРЮЛ' (LegalEntity c) {
    APPLY;
    IF canceled() THEN RETURN;
    
    IF NOT ogrn(c) THEN {
        MESSAGE 'Не задан ОГРН';
    } ELSE NEWSESSION {
        getEgrulData(c);
        APPLY;
    }
} CONFIRM IN params;

EXTEND FORM legalEntity PROPERTIES getEgrulDataUser(o);

getEgrulData () {
    NEWSESSION {
        FOR inn(LegalEntity c) OR ogrn(c) DO {
            getEgrulData(c);
        }
        APPLY;
    }
}

WHEN SETCHANGED (inn(LegalEntity c)) AND PREV (inn(c)) DO NEW d = EgrulLog {
    legalEntity(d) <- c;
    dateTime(d) <- currentDateTime();
    property(d) <- 'ИНН';
    prevValue(d) <- inn(c);
    value(d) <- PREV (inn(c));
    user(d) <- currentUser();
    egrul(d) <- egrul();
}
WHEN SETCHANGED (kpp(LegalEntity c)) AND PREV (kpp(c)) DO NEW d = EgrulLog {
    legalEntity(d) <- c;
    dateTime(d) <- currentDateTime();
    property(d) <- 'КПП';
    prevValue(d) <- kpp(c);
    value(d) <- PREV (kpp(c));
    user(d) <- currentUser();
    egrul(d) <- egrul();
}
WHEN SETCHANGED (kpp(LegalEntity c)) AND PREV (kpp(c)) DO NEW d = EgrulLog {
    legalEntity(d) <- c;
    dateTime(d) <- currentDateTime();
    property(d) <- 'ФИО директора';
    prevValue(d) <- director(c);
    value(d) <- director(c);
    user(d) <- currentUser();
    egrul(d) <- egrul();
}
WHEN SETCHANGED (kpp(LegalEntity c)) AND PREV (kpp(c)) DO NEW d = EgrulLog {
    legalEntity(d) <- c;
    dateTime(d) <- currentDateTime();
    property(d) <- 'Краткое наименование без ОПФ и кавычек';
    prevValue(d) <- legalName(c);
    value(d) <- legalName(c);
    user(d) <- currentUser();
    egrul(d) <- egrul();
}
WHEN SETCHANGED (legalPure(LegalEntity c)) AND PREV (legalPure(c)) DO NEW d = EgrulLog {
    legalEntity(d) <- c;
    dateTime(d) <- currentDateTime();
    property(d) <- 'Полное наименование без ОПФ и кавычек';
    prevValue(d) <- legalPure(c);
    value(d) <- PREV (legalPure(c));
    user(d) <- currentUser();
    egrul(d) <- egrul();
}
WHEN SETCHANGED (legalLatin(LegalEntity c)) AND PREV (legalLatin(c)) DO NEW d = EgrulLog {
    legalEntity(d) <- c;
    dateTime(d) <- currentDateTime();
    property(d) <- 'Наименование на латинице';
    prevValue(d) <- legalLatin(c);
    value(d) <- PREV (legalLatin(c));
    user(d) <- currentUser();
    egrul(d) <- egrul();
}
WHEN SETCHANGED (legalLong(LegalEntity c)) AND PREV (legalLong(c)) DO NEW d = EgrulLog {
    legalEntity(d) <- c;
    dateTime(d) <- currentDateTime();
    property(d) <- 'Полное наименование';
    prevValue(d) <- legalLong(c);
    value(d) <- PREV (legalLong(c));
    user(d) <- currentUser();
    egrul(d) <- egrul();
}
WHEN SETCHANGED (legalShort(LegalEntity c)) AND PREV (legalShort(c)) DO NEW d = EgrulLog {
    legalEntity(d) <- c;
    dateTime(d) <- currentDateTime();
    property(d) <- 'Краткое наименование';
    prevValue(d) <- legalShort(c);
    value(d) <- PREV (legalShort(c));
    user(d) <- currentUser();
    egrul(d) <- egrul();
}
WHEN SETCHANGED (address(LegalEntity c)) AND PREV (address(c)) DO NEW d = EgrulLog {
    legalEntity(d) <- c;
    dateTime(d) <- currentDateTime();
    property(d) <- 'Адрес';
    prevValue(d) <- address(c);
    value(d) <- PREV (address(c));
    user(d) <- currentUser();
    egrul(d) <- egrul();
}
WHEN SETCHANGED (zipcode(LegalEntity c)) AND PREV (zipcode(c)) DO NEW d = EgrulLog {
    legalEntity(d) <- c;
    dateTime(d) <- currentDateTime();
    property(d) <- 'Почтовый индекс';
    prevValue(d) <- zipcode(c);
    value(d) <- PREV (zipcode(c));
    user(d) <- currentUser();
    egrul(d) <- egrul();
}

toSend (LegalEntity c) = GROUP SUM 1 IF SET (EgrulLog l IS EgrulLog) BY legalEntity(l);

sendEmailEgrul 'Отправлять email об изменении параметров клиента' = DATA BOOLEAN (LegalEntity, Employee);

EXTEND FORM legalEntity 
    OBJECTS ee = Employee
    PROPERTIES sendEmailEgrul(o, ee), name(ee) READONLY
    ORDERS name(ee)
;

DESIGN legalEntity {
    params {
        NEW tabParams {
            type = TABBED;
            fill = 1;
            MOVE BOX (l) { caption = 'Журнал изменений'; fill = 1; height = 250; }
            MOVE BOX (ee) { caption = 'Сотрудники'; fill = 1; height = 250; }
        }
    }
}

EXTEND FORM employee
    OBJECTS c = LegalEntity
    PROPERTIES sendEmailEgrul(c, e), shortName(c) READONLY
    ORDERS shortName(c)
;

DESIGN employee {
    tab {
        MOVE BOX (p) { caption = 'Проекты'; }
        MOVE BOX (c) { caption = 'Юр. лица'; }
    }
}

WHEN SET (toSend(LegalEntity c)) DO {
    FOR email(Employee e) AND sendEmailEgrul(c, e) DO {
    EMAIL 
        SUBJECT shortName(c) + ': Внести в базу изменения ЕГРЮЛ от ' + currentDate()
        TO email(e)
        BODY 'Здравствуйте!<br><br>Для клиента ' + shortName(c) + ' необходимо внести в базу 1С следующие изменения ЕГРЮЛ от ' + toDateDDMMYY(currentDate()) + '<br><br>' +
            (GROUP CONCAT 'Атрибут: ' + property(EgrulLog l) + '<br>Стало: ' + value(l) + '<br>Было: ' + prevValue(l) IF SET (l IS EgrulLog) AND legalEntity(l) == c, '<br><br>' ORDER l) +
            '<br><br>Внесение данных изменений может иметь большое значение при выставлении официальных документов, а так же уберечь нашу компанию от крупных штрафов!<br><br>С уважением,<br><br>Ваша CRM система!';
    }
}

fillOGRN 'Импорт ОГРН' () {
    
    LOCAL name = TEXT (INTEGER);
    LOCAL name2 = TEXT (INTEGER);
    LOCAL inn = ISTRING[100](INTEGER);
    LOCAL kpp = ISTRING[100](INTEGER);
    LOCAL ogrn = ISTRING[100](INTEGER);
    
    INPUT f = EXCELFILE DO {
        IMPORT XLS FROM f TO name, name2, inn = D, kpp, ogrn;
        
        FOR lower(trim(shortName(LegalEntity c))) == lower(trim(name(INTEGER i))) OR lower(trim(shortName(c))) == lower(trim(name2(i))) DO {
            inn(c) <- inn(i);
            kpp(c) <- kpp(i);
            ogrn(c) <- ogrn(i);
        }
    }
}

EXTEND FORM legalEntities 
    PROPERTIES(o) READONLY inn, kpp, ogrn
    PROPERTIES fillOGRN() DRAW o TOOLBAR
;

currentStatus 'Текущий статус' = DATA STRING[250] (LegalEntity) IN params;
website 'Сайт ' = DATA STRING[250] (LegalEntity) IN params;

CLASS TaxMode 'Режим налогообложения' {
    osno 'ОСНО',
    usn 'УСН',
    psn 'ПСН',
    envd 'ЕНВД',
    eshn 'ЕСХН'
}

name 'Режим налогообложения' (TaxMode t) = staticCaption(t);

taxMode 'Режим налогообложения' = DATA TaxMode (LegalEntity) IN params;
nameTaxMode 'Режим налогообложения' (LegalEntity l) = name(taxMode(l)) IN params;

skolkovoMember 'Статус участника проекта Сколково' = DATA BOOLEAN (LegalEntity) IN params;
industry 'Индустрия ' = DATA STRING[250] (LegalEntity) IN params;
numberEmployees 'Штат' = DATA INTEGER (LegalEntity) IN params;
sourceCustomer 'Источник клиента' = DATA Customer (LegalEntity) IN params;
nameSourceCustomer 'Источник клиента' (LegalEntity l) = name(sourceCustomer(l)) IN params;
responsible 'Лицо принимающее решение' = DATA Person (LegalEntity) IN params;
nameResponsible 'Лицо принимающее решение' (LegalEntity l) = STRING[250](fioName(responsible(l))) IN params;

EDO 'ЭДО' = DATA BOOLEAN (LegalEntity);
audit 'Аудит' = DATA BOOLEAN (LegalEntity);
seal 'Наличие печати' = DATA BOOLEAN (LegalEntity);
facsimile 'Наличие факсимиле' = DATA BOOLEAN (LegalEntity);

EXTEND FORM legalEntity
    PROPERTIES(o) currentStatus, website, nameTaxMode, skolkovoMember, industry, numberEmployees, nameSourceCustomer,
        nameResponsible, EDO, audit, seal, facsimile
;

DESIGN legalEntity {
    GROUP (params, o) {
        PROPERTY(numberEmployees(o)) { alignment = START; }
    }   
}

EXTEND FORM legalEntities
    PROPERTIES(o) READONLY currentStatus, website, nameTaxMode, skolkovoMember, industry, numberEmployees, nameSourceCustomer,
        nameResponsible
;

DESIGN legalEntity {
    GROUP (params, o) {
        NEW paramsFirst FIRST {
            type = CONTAINERH;
            MOVE PROPERTY(EDO(o));
            MOVE PROPERTY(audit(o));
            MOVE PROPERTY(seal(o));
            MOVE PROPERTY(facsimile(o));
        }
    }
}

WHEN SETCHANGED(legalShort(LegalEntity l)) DO { shortName(l) <- ISTRING[250](legalShort(l)); }
WHEN SETCHANGED(legalLong(LegalEntity l)) DO { fullName(l) <- ISTRING[250](legalLong(l)); }

DESIGN legalEntity {
    main {
        NEW parameters BEFORE BOX(a) {
            fill = 1;
            MOVE PROPERTY(inn(o));
            MOVE PROPERTY(kpp(o));
            MOVE PROPERTY(ogrn(o));
            MOVE PROPERTY(director(o));
            MOVE PROPERTY(getEgrulDataUser(o));
            MOVE PROPERTY(website(o));
            MOVE PROPERTY(nameTaxMode(o));
            MOVE PROPERTY(skolkovoMember(o));
            MOVE PROPERTY(industry(o));
            MOVE PROPERTY(nameSourceCustomer(o));
            MOVE PROPERTY(nameResponsible(o));
        }
    }
}

CLASS OKVED 'ОКВЭД';

id 'Номер' = DATA STRING[10] (OKVED);
okved (id) = GROUP AGGR OKVED o BY id (o);

name 'Вид деятельности' = DATA STRING[250] (OKVED);

FORM okved 'ОКВЭД'
    OBJECTS o = OKVED PANEL 
    PROPERTIES(o) id, name
    
    EDIT OKVED OBJECT o
;

FORM okveds 'Справочник ОКВЭД'
    OBJECTS o = OKVED
    PROPERTIES(o) READONLY id, name
    ORDERS id(o)
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE 
    
    LIST OKVED OBJECT o
;

NAVIGATOR {
    masterData {
        NEW okveds;
    }
}

importOKVED 'Импорт видов деятельности' () {
    NEWSESSION {
        LOCAL id = STRING[10] (INTEGER);
        LOCAL name = STRING[250] (INTEGER);
        
        INPUT f = EXCELFILE DO {
            IMPORT XLS FROM f TO id, name;
            
            FOR imported(INTEGER i) AND i > 0 AND NOT okved(id(i)) DO {
                NEW o = OKVED {
                    id(o) <- id(i);
                    name(o) <- name(i);
                }
            }  
        }
        APPLY;
    }
}

fillOKVED 'Заполнить виды деятельности' () {
    NEWSESSION {
        FOR okved(LegalEntity l) DO {
            okvedName(l) <- name(okved(okved(l)));
        }
        APPLY;
    }
}

EXTEND FORM integrationData
    PROPERTIES() importOKVED, fillOKVED
;

DESIGN integrationData {  //  Just Design настройки
    egrul {
        NEW okved {
            type = CONTAINERH;
            MOVE PROPERTY(importOKVED());
            MOVE PROPERTY(fillOKVED());
        }
    }  
}

WHEN LOCAL SETCHANGED(okved(LegalEntity l)) DO {
    okvedName(l) <- name(okved(okved(l)));
}

WHEN LOCAL (SETCHANGED(inn(Customer c)) OR SETCHANGED(ogrn(c))) DO {
    LOCAL result = FILE();
    EXTERNAL HTTP POST dadataEndpoint() HEADERS dadataHeader PARAMS JSONFILE ('\{"query": "' + (OVERRIDE inn(c), ogrn(c)) + '"\}') TO result;
    IMPORT dadata JSON FROM result();
    FOR inn(INTEGER suggestions) DO {
        inn(c) <- inn(suggestions);
        ogrn(c) <- ogrn(suggestions);
    }

    IF (GROUP SUM 1 IF inn(c) == inn(Partner p) AND ogrn(c) == ogrn(p)) THEN 
        partner(c) <- GROUP MAX Partner p IF inn(p) == inn(c) AND ogrn(p) == ogrn(c);
}