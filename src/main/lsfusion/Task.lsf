MODULE Task;

REQUIRE Project, Employee, Email, Category;

CLASS Task 'Задача';
TABLE task(Task);

name 'Название' = DATA STRING[200] (Task) CHARWIDTH 20;

description 'Описание' = DATA TEXT (Task);

project 'Проект' = DATA Project (Task) NONULL;
nameProject 'Проект' (Task e) = name(project(e)); 

CONSTRAINT DROPPED (Project p IS Project) AND [GROUP SUM 1 BY PREV (project(Task t))](p) MESSAGE 'Нельзя удалить проект, по которому есть задачи';

customer 'Клиент' (Task e) = customer(project(e));
nameCustomerProject 'Клиент' (Task e) = name(customer(e));

employee 'Сотрудник' = DATA Employee (Task) NONULL;
nameEmployee 'Сотрудник' (Task e) = name(employee(e)) CHARWIDTH 20;

employee(Task t) <- currentEmployee() WHEN SET(t IS Task);  

completed 'Завершена' = DATA BOOLEAN (Task);
notCompleted 'Не завершена' (Task t) = t IS Task AND NOT completed(t);

markDelete 'Помечена на удаление' = DATA BOOLEAN (Task);
markDeleteDateTime = DATA DATETIME (Task);

@defineStaticObject(StatusTask, 'Статус');

EXTEND CLASS StatusTask {
    completed 'Завершена',
    markDelete 'Помечена на удаление'
}

status 'Статус' = ABSTRACT CASE StatusTask (Task);
nameStatus 'Статус' (Task t) = staticCaption(status(t)) CHARWIDTH 12;

status (Task t) += WHEN completed(t) THEN StatusTask.completed;
status (Task t) += WHEN markDelete(t) THEN StatusTask.markDelete;

background (Task t) = ABSTRACT CASE COLOR (Task);
background (Task t) += WHEN completed(t) THEN RGB(255,255,255);
background (Task t) += WHEN markDelete(t) THEN RGB(255,212,212);

CONSTRAINT (CHANGED(employee(Task e)) OR CHANGED(project(e))) AND employee(e) AND project(e) AND NOT assigned(project(e), employee(e))
    CHECKED BY employee, project[Task]
    MESSAGE 'Для трудозатрат задан сотрудник, не назначенный на проект';

// Тип
CLASS TaskType 'Тип задачи';
TABLE taskType (TaskType);

name 'Название' = DATA STRING[50] (TaskType) CHARWIDTH 15;

in 'Вкл.' = DATA BOOLEAN (TaskType, Practice) CHARWIDTH 3;
inPracticGroup (TaskType t, Practice pc) = GROUP MAX level(pc, Practice pp) IF in(t, pp);

practics 'Практики' (TaskType t) = GROUP CONCAT name(Practice p) IF in(t,p), ', ' ORDER p CHARWIDTH 30;
active 'Активный' = DATA BOOLEAN (TaskType);

WHEN LOCAL SET(in(TaskType t, Practice p)) DO {
    FOR level(Practice pp, p) DO in(t, pp) <- TRUE;
}

FORM taskTypes 'Типы задач'
    OBJECTS a = TaskType
    PROPERTIES (a) name, practics READONLY, NEW, DELETE, active
    
    OBJECTS g 'Практики' = Practice 
    PROPERTIES READONLY name(g), nameParent(g), canonicalName(g)
    PROPERTIES in(a, g)
    FILTERS parent(g)
    
    //EVENTS ON CHANGE g { SEEK taskTypes.p = g; }
;

DESIGN taskTypes {
    OBJECTS {
        NEW tabbedPane {
            tabbed = TRUE;
            fill = 1;
            caption = 'Практики';
            MOVE BOX(g);
        }
    }
}

FORM dialogTaskType 'Выбор типа задачи'  
    OBJECTS g = Practice 
    PROPERTIES(g) READONLY name
    FILTERS parent(g)
    
    //EVENTS ON CHANGE g { SEEK dialogTaskType.p = g; }

    OBJECTS a = TaskType
    PROPERTIES(a) READONLY name
    FILTERGROUP inPractice
        FILTER 'В практике' in(a, g) DEFAULT
    
    LIST TaskType OBJECT a;
;

DESIGN dialogTaskType {
    size = (800, 600);
    OBJECTS {
        type = CONTAINERH;
        MOVE BOX (g);
        MOVE BOX (a);
    }
}

FORM dialogTaskTypeMobile 'Выбор типа задачи'  
    OBJECTS g = Practice 
    PROPERTIES(g) READONLY name
    FILTERS parent(g)
    
    OBJECTS a = TaskType
    PROPERTIES(a) READONLY name
    FILTERS in(a, g)
;

DESIGN dialogTaskTypeMobile {
    BOX(g) {
        REMOVE TOOLBARBOX(g);
        GRID(g) {
            fontSize = 20;
        }
    }
    BOX(a) {
        fill = 3;
        REMOVE TOOLBARBOX(a);
        GRID(a) {
            fontSize = 20;
        }
    }
    REMOVE PROPERTY(formRefresh());
    PROPERTY(formOk()) { fontSize = 20; }
    PROPERTY(formClose()) { fontSize = 20; }
}

NAVIGATOR {
    masterData {
        NEW taskTypes;
    }
}

taskType 'Тип задачи' = DATA TaskType (Task);
nameTaskType 'Тип задачи' (Task t) = name(taskType(t));
practice 'Практика' = DATA Practice(Task) NONULL;
namePractice 'Практика' (Task t) = name(practice(t));
nameParent 'Услуги' (Task t) = name(parent(practice(t)));

CONSTRAINT SET(Task t IS Task) AND NOT taskType(t) AND (namePractice(t) == 'Бухгалтерская практика' OR namePractice(t) == 'Отсутствие на работе' OR 
    namePractice(t) == 'Аудиторские услуги') MESSAGE 'Необходимо заполнить тип задачи';

nameTypePactice 'Тип задачи' (Task t) = CONCAT '', nameTaskType(t), ', ' + namePractice(t) CHARWIDTH 55;
nameCustomerAndProject 'Клиент/проект' (Task t) = CONCAT '', nameCustomerProject(t), ', ' + nameProject(t) CHARWIDTH 55;
//CONSTRAINT taskType(Task t) AND practice(t) AND NOT in(taskType(t), practice(t))
//    MESSAGE 'Тип задачи должен соответствовать практике';

changeTaskType (Task t) {
    DIALOG dialogTaskType OBJECTS a = taskType(t) INPUT, g = practice(t) INPUT DO {
        taskType(t) <- a;
        practice(t) <- g;
        APPLY;
    } 
}

changeCustomerProject (Task t) {
    DIALOG dialogProject OBJECTS p = project(t) CHANGE LIST customerName(p) DO {
        APPLY;
    } 
}

// --- Редактирование задачи

FORM task 'Задача'
    OBJECTS t = Task PANEL
    PROPERTIES(t) nameCustomerAndProject ON CHANGE { changeCustomerProject(t); }, nameTypePactice ON CHANGE { changeTaskType(t); },
        name, description
    
    EDIT Task OBJECT t
;

DESIGN task {
    size = (1024, 768);
    OBJECTS {
        NEW projectInfo FIRST {
            caption = 'Проект';
            type = CONTAINERH;
            MOVE PROPERTY(nameCustomerAndProject(t));
            MOVE PROPERTY(nameTypePactice(t));
            MOVE PROPERTY(name(t));
        }
        
        NEW projectDescr {
            fill = 1;
            type = SPLITH;
            MOVE PROPERTY(description(t)) {
                fill = 1;
                panelCaptionVertical = TRUE;
            }
        }
        
    }
}

read 'Обработан' = DATA BOOLEAN (Email);

EXTEND FORM mail PROPERTIES READONLY read(e);

id 'Код' = DATA ISTRING[15](Project);
project = GROUP AGGR Project p BY id(p);

emailTaskType = DATA TaskType();
nameEmailTaskType 'Тип задач, созданных по email' () = name(emailTaskType());

EXTEND FORM options PROPERTIES nameEmailTaskType();
DESIGN options { commons { MOVE PROPERTY (nameEmailTaskType()); } }

category = DATA Category(Task) INDEXED;
nameCategory 'Категория для задачи' (Task t) = name(category(t));

WHEN LOCAL (CHANGED (employee(Task t)) OR CHANGED (project(t)) OR CHANGED(category(employee(t), project(t))) OR CHANGED(category(employee(t)))) 
    AND NOT CHANGED (category(t)) DO {
    category(t) <- OVERRIDE category(employee(t), project(t)), category(employee(t));
}

onStarted() + {
    FOR Task t IS Task AND NOT category(t) DO {
        category(t) <- OVERRIDE category(employee(t), project(t)), category(employee(t));
    }
}