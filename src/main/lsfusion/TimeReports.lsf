MODULE TimeReports;

REQUIRE TimeEntry, Project, Reports, TimeDashboard;

NAMESPACE Time;

hours 'Часов' (DATE d) = GROUP SUM hours(TimeEntry e) BY dateStart(e);

hours 'Часов' (Project p, DATE d) = GROUP SUM hours(TimeEntry e) BY project(e), dateStart(e);
hours 'Часов (всего)' (Project p, DATE dFrom, DATE dTo) = 
    GROUP SUM hours(TimeEntry e) IF dFrom <= dateStart(e) AND dTo >= dateStart(e) BY project(e); 

header (DATE d) = STRING[20] (d AS DATE);

managers 'Руководители' (TimeEntry t) = nameManagers(employee(t));

in 'Вкл' = DATA LOCAL BOOLEAN (Project);
countProjects () = GROUP SUM 1 IF in(Project p);
inProjects (TimeEntry t) = in(project(t)) OR NOT countProjects();

showMarkDelete 'Учитывать помеченные на удаление' = DATA LOCAL BOOLEAN ();

FORM projects 'По проектам'
    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES dFrom 'Дата с' = VALUE(dFrom), dTo 'Дата по' = VALUE(dTo)

    OBJECTS d = DATE 
    FILTERS hours(d), d >= dFrom, d <= dTo

    OBJECTS p = Project
    PROPERTIES in(p)
    PROPERTIES(p) READONLY nameCustomer, name
    PROPERTIES READONLY hours(p, dFrom, dTo)
    FILTERS assigned(p, currentEmployee())
    ORDERS nameCustomer(p)
    FILTERGROUP active FILTER 'Активный' active(customer(p)) 'F5' DEFAULT
    
    PROPERTIES READONLY hours(p, d) COLUMNS (d) HEADER header(d)
    
    OBJECTS t = TimeEntry
    PROPERTIES(t) READONLY dateTimeCreated SHOWIF validUser(), dateTimeStart BACKGROUND dateTimeStartChanged(t) AND validUser(), 
        dateTimeStartChanged SHOWIF validUser() AND dateTimeStartChanged(t), dateTimeFinish BACKGROUND dateTimeFinishChanged(t) AND validUser(), 
        dateTimeFinishChanged SHOWIF validUser() AND dateTimeFinishChanged(t)
    PROPERTIES(t) seriesNumberInvoice ON CHANGE { SHOW invoice OBJECTS i = invoice(t) DOCKED; }
    PROPERTIES(t) READONLY managers, 
        nameEmployee, namePractice, nameCustomerProject, nameProject, nameTaskType, nameTask, nameActivity
    PROPERTIES(t) READONLY descriptionTask, comment
    //PROPERTIES(t) descriptionTask ON CHANGE changeDescriptionTask(t) PANEL
    PROPERTIES(t) hours BACKGROUND userHours(t)//, comment PANEL 
    PROPERTIES showMarkDelete() DRAW t TOOLBAR 
    FILTERS inProjects(t),
            dateStart(t) >= dFrom AND dateStart(t) <= dTo,
            NOT markDelete(task(t)) OR showMarkDelete()
    
    FILTERGROUP practices
        FILTER 'Юридические услуги' GROUP SUM 1 IF in(taskType(task(t)), Practice pp) AND nameParent(pp) == 'Юридические услуги'
        FILTER 'Бухгалтерские услуги' GROUP SUM 1 IF in(taskType(task(t)), Practice pp) AND nameParent(pp) == 'Бухгалтерские услуги'
;

DESIGN projects {
    OBJECTS {
        NEW timeEntry {
            fill = 2;
            type = SPLITH;
            MOVE BOX(t) {
                fill = 3;
                //PROPERTY(managers(t)) { hide = TRUE; }
            }
//            NEW description {
//                MOVE PROPERTY(descriptionTask(t)) {
//                    panelCaptionAbove = TRUE;
//                    fill = 1;
//                }
//                MOVE PROPERTY(comment(t)) {
//                    panelCaptionAbove = TRUE;
//                    fill = 1;
//                }
//            }
        }
    }
}


hours 'Часов' (Employee e, DATE d) = GROUP SUM hours(TimeEntry te) BY employee(te), dateStart(te);
hours 'Часов (всего)' (Employee e, DATE dFrom, DATE dTo) = 
    GROUP SUM hours(TimeEntry te) IF dFrom <= dateStart(te) AND dTo >= dateStart(te) BY employee(te); 

firstNameEmployee 'Имя сотрудника' (TimeEntry t) = firstName(employee(t));
lastNameEmployee 'Фамилия сотрудника' (TimeEntry t) = lastName(employee(t));

in 'Вкл' = DATA LOCAL BOOLEAN (Employee);
countEmployees () = GROUP SUM 1 IF in(Employee p);
inEmployees (TimeEntry t) = in(employee(t)) OR NOT countEmployees();

FORM employees 'По сотрудникам'
    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES dFrom 'Дата с' = VALUE(dFrom), dTo 'Дата по' = VALUE(dTo)

    OBJECTS d = DATE 
    FILTERS hours(d), d >= dFrom, d <= dTo

    OBJECTS e = Employee
    PROPERTIES in(e)
    PROPERTIES(e) READONLY namePractice, firstName, lastName, login
    PROPERTIES READONLY hours(e, dFrom, dTo)
    FILTERS NOT fired(e)
    
    PROPERTIES READONLY hours(e, d) COLUMNS (d) HEADER header(d)
    
    OBJECTS t = TimeEntry
    PROPERTIES(t) READONLY dateTimeCreated SHOWIF validUser(), dateTimeStart BACKGROUND dateTimeStartChanged(t) AND validUser(), 
        dateTimeStartChanged SHOWIF validUser() AND dateTimeStartChanged(t), dateTimeFinish BACKGROUND dateTimeFinishChanged(t) AND validUser(), 
        dateTimeFinishChanged SHOWIF validUser() AND dateTimeFinishChanged(t)
    PROPERTIES(t) seriesNumberInvoice ON CHANGE { SHOW invoice OBJECTS i = invoice(t) DOCKED; }
    PROPERTIES(t) READONLY managers,
        firstNameEmployee, lastNameEmployee, namePractice, nameCustomerProject, nameProject
    PROPERTIES(t) READONLY  nameTaskType, nameTask, nameActivity, descriptionTask, comment
    //PROPERTIES(t) descriptionTask ON CHANGE changeDescriptionTask(t) PANEL
    PROPERTIES(t) hours BACKGROUND userHours(t)
    PROPERTIES showMarkDelete() DRAW t TOOLBAR 
    FILTERS inEmployees(t),
            dateStart(t) >= dFrom AND dateStart(t) <= dTo,
            assigned(project(t), currentEmployee()),
            NOT markDelete(task(t)) OR showMarkDelete()
            
    FILTERGROUP practices
        FILTER 'Юридические услуги' GROUP SUM 1 IF in(taskType(task(t)), Practice pp) AND nameParent(pp) == 'Юридические услуги'
        FILTER 'Бухгалтерские услуги' GROUP SUM 1 IF in(taskType(task(t)), Practice pp) AND nameParent(pp) == 'Бухгалтерские услуги'
;

DESIGN employees {
    OBJECTS {
        NEW timeEntry {
            fill = 2;
            type = SPLITH;
            MOVE BOX(t) {
                fill = 3;
            }
//            NEW description {
//                MOVE PROPERTY(descriptionTask(t)) {
//                    panelCaptionAbove = TRUE;
//                    fill = 1;
//                }
//                MOVE PROPERTY(comment(t)) {
//                    panelCaptionAbove = TRUE;
//                    fill = 1;
//                }
//            }
        }
    }
}

NAVIGATOR {
    reports {
        NEW projects;
        NEW employees; 
    }
}

dataHoursSet 'Кол-во установленных рабочих часов' = DATA NUMERIC[10,2] () CHARWIDTH 5;
sendNotification 'Отправлять уведомление' = DATA BOOLEAN (Employee);

EXTEND FORM options
    PROPERTIES dataHoursSet()
    
    OBJECTS e = Employee
    PROPERTIES(e) READONLY firstName, lastName, login, nameMainRole, email
    PROPERTIES sendNotification(e)
;

DESIGN options {
    pane {
        NEW employeeMailing {
            caption = 'Рассылка для сотрудников';
            MOVE PROPERTY(dataHoursSet()) { flex = 0; align = START; }
            MOVE BOX(e);
        }
    }
}

isDayoff 'Выходной' = DATA BOOLEAN (DATE);

FORM workDays 'Производственный календарь'
    OBJECTS df = DATE PANEL, dt = DATE PANEL
    PROPERTIES dFrom 'Дата с' = VALUE(df), dTo 'по' = VALUE(dt)
    
    OBJECTS d = DATE 
    PROPERTIES date 'Дата' = VALUE(d), extractMonthName(d), extractDOWName(d), isDayoff(d)
    FILTERS iterate(d, df, dt)
;

DESIGN workDays {
    OBJECTS {
        NEW header {
            type = CONTAINERH;
            MOVE PROPERTY(dFrom);
            MOVE PROPERTY(dTo);
        }
        MOVE BOX(d);
    }
}

NAVIGATOR {
    masterData {
        NEW workDays;
    }
}

hoursSet 'Кол-во установленных рабочих часов' () = OVERRIDE dataHoursSet(), 6.0;
prevWorkDate (DATE d) = GROUP LAST DATE dd IF NOT isDayoff(dd) AND iterate(dd, 2020_01_01, sum(d, -1)) ORDER dd;

sendNotifications 'Отправить уведомление' () {
    IF NOT isDayoff(currentDate()) THEN {
        
        FOR sendNotification(Employee e) AND (hours(e, prevWorkDate(currentDate())) < hoursSet() OR NOT hours(e, prevWorkDate(currentDate()))) AND email(e) DO {
            EMAIL
                SUBJECT 'Напоминание о дополнительном внесении времени'
                TO email(e)
                BODY firstName(e) + ', привет!<br /><br />Пожалуйста, проверьте, и, если нужно, откорректируйте количество учтённого времени за ' 
                    + prevWorkDate(currentDate()) + '<br /><br />Я тут заметила, что ' + prevWorkDate(currentDate()) + 
                    ' учтёно времени меньше обычного. Мне очень-очень важно знать распределение вашего времени. Это поможет мне автоматизировать процессы и тем самым убрать скучную рутину из вашей работы.<br />' +
                    'А для этого мне нужно понимать как распределено ваше время. Воможно вы закрутились и забыли учесть часть времени?<br /><br />' +
                    'Поэтому, буду очень благодарна, если вы сможете проверить, и, если нужно, откорректировать количество учтённого времени за ' +
                    prevWorkDate(currentDate()) + '<br /><br />' + 'Катерина,<br /> Ваша CRM система'
            ;
        }
    }
}

EXTEND FORM options
    PROPERTIES sendNotifications() DRAW e TOOLBAR
;

sendNotificationManager 'Уведомления для руководителя' = DATA BOOLEAN (Employee);
dataNotificationPeriod 'Период уведомлений для руководителя, дни' = DATA INTEGER ();
notificationPeriod () = OVERRIDE dataNotificationPeriod(), 7;

isManager (Employee manager) = GROUP SUM 1 IF managers(Employee employee, manager);

EXTEND FORM options
    PROPERTIES sendNotificationManager(e) READONLYIF NOT isManager(e), dataNotificationPeriod()
;

DESIGN options {
    employeeMailing {
        MOVE PROPERTY(dataNotificationPeriod()) AFTER PROPERTY(dataHoursSet()) { flex = 0; align = START; }
    }
}


isTimeShortage (Employee e) = 
    GROUP SUM 1 IF (hours(e, DATE d) < hoursSet() OR NOT hours(e, d)) AND NOT isDayoff(d) AND iterate(d, sum(currentDate(), -1 * notificationPeriod()), sum(currentDate(), -1));
isTimeShortageEmployees (Employee manager) = GROUP SUM 1 IF managers(Employee e, manager) AND isTimeShortage(e);
timeShortageNumeric (Employee e, DATE d) = hoursSet() (-) hours(e, d);
timeShortageString (Employee e, DATE d) = CONCAT '', INTEGER(trunc(timeShortageNumeric(e, d), 0)), ' час(-ов) ', 
    round0(60 * (timeShortageNumeric(e, d) - INTEGER(trunc(timeShortageNumeric(e, d), 0)))), ' минут(а)';
    
messageManager = DATA LOCAL STRING (Employee);

sendNotificationsManager 'Уведомления для руководителей' () {
    IF NOT isDayoff(currentDate()) THEN {
        
        FOR sendNotificationManager(Employee e) AND isManager(e) AND email(e) AND isTimeShortageEmployees(e) DO {
            FOR managers(Employee employee, e) AND isTimeShortage(employee) DO {
                messageManager(employee) <- NULL;
                messageManager(employee) <- CONCAT '', lastName(employee), ' ', firstName(employee), '<br />';
                FOR iterate(DATE d, sum(currentDate(), -1 * notificationPeriod()), sum(currentDate(), -1)) AND NOT isDayoff(d) AND (hours(employee, d) < hoursSet() OR NOT hours(employee, d)) DO {
                    messageManager(employee) <- CONCAT '', messageManager(employee), toDateDDMMYY(d), ', ', timeShortageString(employee, d), '<br />';
                }
                messageManager(employee) <- CONCAT '', messageManager(employee), '<br />';
            }
            
            LOCAL body = STRING ();
            body() <- 'Здравствуйте!<br /><br />Пожалуйста, проверьте со следующими сотрудниками заполняемость трудозатрат.<br /><br />В предыдущий период следующие сотрудники внесли недостаточно трудозатрат:<br /><br />';
            body() <- CONCAT '', body(), (GROUP CONCAT messageManager(Employee employee), '' IF managers(employee, e));
            body() <- CONCAT '', body(), 'Спасибо,<br /> Ваша CRM система';
            
            EMAIL
                SUBJECT 'Еженедельное информирование руководителя'
                TO email(e)
                BODY body()
            ;
        }
    }
}

EXTEND FORM options
    PROPERTIES sendNotificationsManager() DRAW e TOOLBAR
;

filterProject 'Проект' = DATA LOCAL Project ();
nameFilterProject 'Проект' = name(filterProject());

status 'Статус задачи' (TimeEntry e) = status(task(e));
rate 'Ставка руб.' (TimeEntry e) = rate(project(e), category(task(e)));
sum 'Сумма руб.' (TimeEntry e) = round2(hours(e) * rate(e));

nameResponsible 'Ответственный за проект' (TimeEntry e) = nameResponsible(project(e));

dateFrom 'Дата с' = DATA LOCAL DATE ();
dateTo 'Дата по' = DATA LOCAL DATE ();

FORM taskMonitoring 'Мониторинг задач по проекту'

    PROPERTIES ()  dFrom = dateFrom, dTo = dateTo, nameFilterProject PANEL
    
    OBJECTS p = Project
    FILTERS p == filterProject()
    
    EVENTS ON INIT {
        dateFrom() <- sum(currentDate(), -30);
        dateTo() <- currentDate();
    }
    
    OBJECTS t = TimeEntry
    PROPERTIES(t) READONLY dateStart, dateFinish, status, nameTask, 'Описание' = nameTaskType, 'Исполнитель' = nameEmployee, nameResponsible, hours, 
        rate, sum
    FILTERS project(t) == filterProject(),
            dateStart(t) >= dateFrom() AND dateFinish(t) <= dateTo(),
            NOT markDelete(task(t))
            
    FILTERGROUP practices
        FILTER 'Юридические услуги' GROUP SUM 1 IF in(taskType(task(t)), Practice pp) AND nameParent(pp) == 'Юридические услуги'
        FILTER 'Бухгалтерские услуги' GROUP SUM 1 IF in(taskType(task(t)), Practice pp) AND nameParent(pp) == 'Бухгалтерские услуги'
;

DESIGN taskMonitoring {
    OBJECTS {
        NEW header {
            type = CONTAINERH;
            MOVE PROPERTY(dFrom);
            MOVE PROPERTY(dTo);
            MOVE PROPERTY(nameFilterProject());
        }
        MOVE BOX(t);
    }
}

NAVIGATOR {
    reports {
        NEW taskMonitoring;
    }
}

strictNotification 'Жёсткая блокировка' = DATA BOOLEAN (Employee);

notified = DATA BOOLEAN (Employee, DATE);
needNotify (Employee e, DATE d) = NOT notified(e, d) AND
                                             strictNotification(e) AND 
                                             NOT hours(e, prevWorkDate(d)) >= hoursSet() AND
                                             hoursSet();

notifyYes 'Да, я заполнил всё время' () {
    notified(currentUser(), currentDate()) <- TRUE; 
    APPLY;
    formClose();
}

notifyNo 'Нет, я не заполнил всё время.' () {
    DIALOG timeDashboard;
    IF needNotify(currentUser(), currentDate()) THEN {
        beforeCanceled() <- TRUE;
    } ELSE {
        notifyYes();
    }
}

FORM notify 'Уведомления'
    PROPERTIES text = TEXT(firstName(currentUser()) + ', привет!\n\nПожалуйста, проверьте, и, если нужно, откорректируйте количество учтённого времени за ' 
                      + prevWorkDate(currentDate()) + '\n\nЯ тут заметила, что ' + prevWorkDate(currentDate()) + 
                      ' учтёно времени меньше обычного. Мне очень-очень важно знать распределение вашего времени. \nЭто поможет мне автоматизировать процессы и тем самым убрать скучную рутину из вашей работы.\n' +
                      'А для этого мне нужно понимать как распределено ваше время. Воможно вы закрутились и забыли учесть часть времени?\n\n' +
                      'Поэтому, буду очень благодарна, если вы сможете проверить, и, если нужно, откорректировать количество учтённого времени за ' +
                      prevWorkDate(currentDate()) + '\n\n' + 'Катерина,\n Ваша CRM система')
    PROPERTIES notifyYes(), notifyNo()
    EVENTS ON CLOSE { IF NOT notified(currentUser(), currentDate()) THEN notifyNo(); }
;

DESIGN notify {
    OBJECTS {
        MOVE PROPERTY(text) { fill = 1; height = 230; width = 800; }
        NEW actions {
            type = CONTAINERH;
            MOVE PROPERTY(notifyYes());
            MOVE PROPERTY(notifyNo());
        }
    }
    TOOLBARBOX {
        showIf = NULL;
    }
}

EXTEND FORM options
    PROPERTIES strictNotification(e)
;

notify () {
    IF NOT isDayoff(currentDate()) AND needNotify(currentUser(), currentDate()) THEN DIALOG notify;
}

onDesktopClientStarted () + {
    notify();
}

onWebClientStarted () + {
   notify();
}

EXTEND FORM projects
    PROPERTIES(t) READONLY rate, sum
;

EXTEND FORM employees
    PROPERTIES(t) READONLY rate, sum
;