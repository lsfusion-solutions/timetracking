MODULE TimeReports;

REQUIRE TimeEntry, Project, Reports, TimeDashboard, Extend1CImport;

NAMESPACE Time;

hours 'Часов' (DATE d) = GROUP SUM hours(TimeEntry e) BY dateStart(e);

hours 'Часов' (Project p, DATE d) = GROUP SUM hours(TimeEntry e) BY project(e), dateStart(e);
hours 'Часов (всего)' (Project p, DATE dFrom, DATE dTo) = 
    GROUP SUM hours(TimeEntry e) IF dFrom <= dateStart(e) AND dTo >= dateStart(e) BY project(e); 

header (DATE d) = STRING[20] (d AS DATE);

managers 'Руководители' (TimeEntry t) = nameManagers(employee(t));

in 'Вкл' = DATA LOCAL BOOLEAN (Project);
countProjects () = GROUP SUM 1 IF in(Project p);
inProjects (TimeEntry t) = in(project(t)) OR NOT countProjects();

showMarkDelete 'Учитывать помеченные на удаление' = DATA LOCAL BOOLEAN ();

FORM projects 'По проектам'
    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES dFrom 'Дата с' = VALUE(dFrom), dTo 'Дата по' = VALUE(dTo)

    OBJECTS d = DATE 
    FILTERS hours(d), d >= dFrom, d <= dTo

    OBJECTS p = Project
    PROPERTIES in(p)
    PROPERTIES(p) READONLY nameCustomer, name
    PROPERTIES READONLY hours(p, dFrom, dTo)
    FILTERS assigned(p, currentEmployee())
    ORDERS nameCustomer(p)
    FILTERGROUP active FILTER 'Активный' active(customer(p)) 'F5' DEFAULT
    
    PROPERTIES READONLY hours(p, d) COLUMNS (d) HEADER header(d)
    
    OBJECTS t = TimeEntry
    PROPERTIES(t) READONLY dateTimeCreated SHOWIF validUser(), dateTimeStart BACKGROUND dateTimeStartChanged(t) AND validUser(), 
        dateTimeStartChanged SHOWIF validUser() AND dateTimeStartChanged(t), dateTimeFinish BACKGROUND dateTimeFinishChanged(t) AND validUser(), 
        dateTimeFinishChanged SHOWIF validUser() AND dateTimeFinishChanged(t)
    PROPERTIES(t) seriesNumberInvoice ON CHANGE { SHOW invoice OBJECTS i = invoice(t) DOCKED; }
    PROPERTIES(t) READONLY managers, 
        nameEmployee, namePractice, nameParent, nameCustomerProject, nameProject, nameTaskType, nameTask, nameActivity
    PROPERTIES(t) READONLY descriptionTask, comment
    //PROPERTIES(t) descriptionTask ON CHANGE changeDescriptionTask(t) PANEL
    PROPERTIES(t) hours BACKGROUND userHours(t)//, comment PANEL 
    PROPERTIES showMarkDelete() DRAW t TOOLBAR 
    FILTERS inProjects(t),
            dateStart(t) >= dFrom AND dateStart(t) <= dTo,
            NOT markDelete(task(t)) OR showMarkDelete()
    
    FILTERGROUP practices
        FILTER 'Юридические услуги' GROUP SUM 1 IF in(taskType(task(t)), Practice pp) AND nameParent(pp) == 'Юридические услуги'
        FILTER 'Бухгалтерские услуги' GROUP SUM 1 IF in(taskType(task(t)), Practice pp) AND nameParent(pp) == 'Бухгалтерские услуги'
;

DESIGN projects {
    OBJECTS {
        NEW timeEntry {
            fill = 2;
            MOVE BOX(t) {
                fill = 3;
                //PROPERTY(managers(t)) { hide = TRUE; }
            }
//            NEW description {
//                MOVE PROPERTY(descriptionTask(t)) {
//                    panelCaptionVertical = TRUE;
//                    fill = 1;
//                }
//                MOVE PROPERTY(comment(t)) {
//                    panelCaptionVertical = TRUE;
//                    fill = 1;
//                }
//            }
        }
    }
}


hours 'Часов' (Employee e, DATE d) = GROUP SUM hours(TimeEntry te) BY employee(te), dateStart(te);
backgroundHours (Employee e, DATE d) = IF hours(e, d) < 6 OR hours(e, d) > 24 THEN RGB(255, 172, 172);

hours 'Часов (всего)' (Employee e, DATE dFrom, DATE dTo) = 
    GROUP SUM hours(TimeEntry te) IF dFrom <= dateStart(te) AND dTo >= dateStart(te) BY employee(te); 
    
hoursASBwork 'АСБ (всего)' (Employee e, DATE dFrom, DATE dTo) = 
    GROUP SUM hours(TimeEntry te) IF dFrom <= dateStart(te) AND dTo >= dateStart(te) 
    AND nameCustomerProject(te) == 'АСБ Консалтинг Групп,ООО' 
    AND NOT namePractice(te) == 'Отсутствие на работе'
    BY employee(te);
    
hoursASBnoWork 'Отсутствие на работе (всего)' (Employee e, DATE dFrom, DATE dTo) = 
    GROUP SUM hours(TimeEntry te) IF dFrom <= dateStart(te) AND dTo >= dateStart(te) 
    AND nameCustomerProject(te) == 'АСБ Консалтинг Групп,ООО' 
    AND namePractice(te) == 'Отсутствие на работе'
    BY employee(te);
    
hoursOther 'Клиенты (всего)' (Employee e, DATE dFrom, DATE dTo) = hours(e, dFrom, dTo) (-)
    hoursASBwork(e, dFrom, dTo) (-) hoursASBnoWork(e, dFrom, dTo);

firstNameEmployee 'Имя сотрудника' (TimeEntry t) = firstName(employee(t));
lastNameEmployee 'Фамилия сотрудника' (TimeEntry t) = lastName(employee(t));

in 'Вкл' = DATA LOCAL BOOLEAN (Employee);
countEmployees () = GROUP SUM 1 IF in(Employee p);
inEmployees (TimeEntry t) = in(employee(t)) OR NOT countEmployees();

FORM employees 'По сотрудникам'
    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES dFrom 'Дата с' = VALUE(dFrom), dTo 'Дата по' = VALUE(dTo)

    OBJECTS d = DATE 
    FILTERS hours(d), d >= dFrom, d <= dTo

    OBJECTS e = Employee
    PROPERTIES in(e)
    PROPERTIES(e) READONLY namePractice, firstName, lastName, login
    PROPERTIES(e, dFrom, dTo) READONLY hours
    FILTERS NOT fired(e)
    
    PROPERTIES READONLY hours(e, d) COLUMNS (d) HEADER header(d) BACKGROUND backgroundHours(e, d)
    
    OBJECTS t = TimeEntry
    PROPERTIES(t) READONLY dateTimeCreated SHOWIF validUser(), dateTimeStart BACKGROUND dateTimeStartChanged(t) AND validUser(), 
        dateTimeStartChanged SHOWIF validUser() AND dateTimeStartChanged(t), dateTimeFinish BACKGROUND dateTimeFinishChanged(t) AND validUser(), 
        dateTimeFinishChanged SHOWIF validUser() AND dateTimeFinishChanged(t)
    PROPERTIES(t) seriesNumberInvoice ON CHANGE { SHOW invoice OBJECTS i = invoice(t) DOCKED; }
    PROPERTIES(t) READONLY managers,
        firstNameEmployee, lastNameEmployee, namePractice, nameParent, nameCustomerProject, nameProject
    PROPERTIES(t) READONLY  nameTaskType, nameTask, nameActivity, descriptionTask, comment
    //PROPERTIES(t) descriptionTask ON CHANGE changeDescriptionTask(t) PANEL
    PROPERTIES(t) hours BACKGROUND userHours(t)
    PROPERTIES showMarkDelete() DRAW t TOOLBAR 
    FILTERS inEmployees(t),
            dateStart(t) >= dFrom AND dateStart(t) <= dTo,
            assigned(project(t), currentEmployee()),
            NOT markDelete(task(t)) OR showMarkDelete()
            
    FILTERGROUP practices
        FILTER 'Юридические услуги' GROUP SUM 1 IF in(taskType(task(t)), Practice pp) AND nameParent(pp) == 'Юридические услуги'
        FILTER 'Бухгалтерские услуги' GROUP SUM 1 IF in(taskType(task(t)), Practice pp) AND nameParent(pp) == 'Бухгалтерские услуги'
;

DESIGN employees {
    OBJECTS {
        NEW timeEntry {
            fill = 2;
            MOVE BOX(t) {
                fill = 3;
            }
//            NEW description {
//                MOVE PROPERTY(descriptionTask(t)) {
//                    panelCaptionVertical = TRUE;
//                    fill = 1;
//                }
//                MOVE PROPERTY(comment(t)) {
//                    panelCaptionVertical = TRUE;
//                    fill = 1;
//                }
//            }
        }
    }
}

NAVIGATOR {
    reports {
        NEW projects;
        NEW employees; 
    }
}

dataHoursSet 'Кол-во установленных рабочих часов' = DATA NUMERIC[10,2] () CHARWIDTH 5;
sendNotification 'Отправлять уведомление' = DATA BOOLEAN (Employee);

EXTEND FORM options
    PROPERTIES dataHoursSet()
    
    OBJECTS e = Employee
    PROPERTIES(e) READONLY firstName, lastName, login, nameMainRole, email
    PROPERTIES sendNotification(e)
;

DESIGN options {
    pane {
        NEW employeeMailing {
            caption = 'Рассылка для сотрудников';
            MOVE PROPERTY(dataHoursSet()) { flex = 0; align = START; }
            MOVE BOX(e);
        }
    }
}

isDayoff 'Выходной' = DATA BOOLEAN (DATE);

nowork2020 = DATA LOCAL STRING(INTEGER);
holidays = DATA LOCAL STRING(INTEGER);
preholidays = DATA LOCAL STRING(INTEGER);

FORM generated

OBJECTS nowork2020 = INTEGER
PROPERTIES(nowork2020) nowork2020 EXTID 'value'

OBJECTS holidays = INTEGER
PROPERTIES(holidays) holidays EXTID 'value'

OBJECTS preholidays = INTEGER
PROPERTIES(preholidays) preholidays EXTID 'value';

importJson 'Имортировать календарь' () {
    NEWSESSION {  
        LOCAL str = STRING(); 
        EXTERNAL HTTP GET 'https://raw.githubusercontent.com/d10xa/holidays-calendar/master/json/calendar.json' TO str;
        stringToFile(str(), 'UTF-8', 'json');  
        IMPORT generated JSON FROM resultFile();
            
        FOR DATE d == toDateFormat(holidays(INTEGER i),'yyyy-MM-dd') DO {
            isDayoff(d) <- TRUE;
        } 
        FOR DATE d == toDateFormat(nowork2020(INTEGER i),'yyyy-MM-dd') DO {
            isDayoff(d) <- TRUE;
        }
        APPLY;
    }
}

FORM workDays 'Производственный календарь'
    OBJECTS df = DATE PANEL, dt = DATE PANEL
    PROPERTIES dFrom 'Дата с' = VALUE(df), dTo 'по' = VALUE(dt)
    
    OBJECTS d = DATE 
    PROPERTIES date 'Дата' = VALUE(d), extractMonthName(d), extractDOWName(d), isDayoff(d)
    FILTERS iterate(d, df, dt)
    
    PROPERTIES importJson() TOOLBAR 
;

DESIGN workDays {
    OBJECTS {
        NEW header {
            type = CONTAINERH;
            MOVE PROPERTY(dFrom);
            MOVE PROPERTY(dTo);
        }
        MOVE BOX(d);
    }
}

NAVIGATOR {
    masterData {
        NEW workDays;
    }
}

hoursSet 'Кол-во установленных рабочих часов' () = OVERRIDE dataHoursSet(), 6.0;
hoursSetEmployee 'Кол-во установленных рабочих часов' = DATA NUMERIC[15,2] (Employee);
overHoursSet (Employee e) = OVERRIDE hoursSetEmployee(e), hoursSet();
prevWorkDate (DATE d) = GROUP LAST DATE dd IF NOT isDayoff(dd) AND iterate(dd, 2020_01_01, sum(d, -1)) ORDER dd;

EXTEND FORM options
    PROPERTIES(e) hoursSetEmployee AFTER email(e)
;

sendNotifications 'Отправить уведомление' () {
    IF NOT isDayoff(currentDate()) THEN {
        
        FOR sendNotification(Employee e) AND (hours(e, prevWorkDate(currentDate())) < overHoursSet(e) OR NOT hours(e, prevWorkDate(currentDate()))) AND email(e) DO {
            EMAIL
                SUBJECT 'Напоминание о дополнительном внесении времени'
                TO email(e)
                BODY firstName(e) + ', привет!<br /><br />Пожалуйста, проверьте, и, если нужно, откорректируйте количество учтённого времени за ' 
                    + prevWorkDate(currentDate()) + '<br /><br />Я тут заметила, что ' + prevWorkDate(currentDate()) + 
                    ' учтёно времени меньше обычного. Мне очень-очень важно знать распределение вашего времени. Это поможет мне автоматизировать процессы и тем самым убрать скучную рутину из вашей работы.<br />' +
                    'А для этого мне нужно понимать как распределено ваше время. Воможно вы закрутились и забыли учесть часть времени?<br /><br />' +
                    'Поэтому, буду очень благодарна, если вы сможете проверить, и, если нужно, откорректировать количество учтённого времени за ' +
                    prevWorkDate(currentDate()) + '<br /><br />' + 'Катерина,<br /> Ваша CRM система'
            ;
        }
    }
}

EXTEND FORM options
    PROPERTIES sendNotifications() DRAW e TOOLBAR
;

sendNotificationManager 'Уведомления для руководителя' = DATA BOOLEAN (Employee);
dataNotificationPeriod 'Период уведомлений для руководителя, дни' = DATA INTEGER ();
notificationPeriod () = OVERRIDE dataNotificationPeriod(), 7;

isManager (Employee manager) = GROUP SUM 1 IF managers(Employee employee, manager);

level (Employee employee, Employee manager) = RECURSION 1l IF employee IS Employee AND manager == employee
                                                                  STEP 2l IF managers($manager, manager);
EXTEND FORM options
    PROPERTIES sendNotificationManager(e) READONLYIF NOT isManager(e), dataNotificationPeriod()
;

DESIGN options {
    employeeMailing {
        MOVE PROPERTY(dataNotificationPeriod()) AFTER PROPERTY(dataHoursSet()) { flex = 0; align = START; }
    }
}

isTimeShortage (Employee e) = 
    GROUP SUM 1 IF (hours(e, DATE d) < overHoursSet(e) OR NOT hours(e, d) OR hours(e, d) > 24) AND NOT isDayoff(d) AND iterate(d, sum(currentDate(), -1 * notificationPeriod()), sum(currentDate(), -1));
isTimeShortageEmployees (Employee manager) = GROUP SUM 1 IF managers(Employee e, manager) AND isTimeShortage(e);
timeShortageNumeric (Employee e, DATE d) = overHoursSet(e) (-) hours(e, d);
timeShortageString (Employee e, DATE d) = 
    IF hours(e, d) > 24 THEN 'Заполнено более 24 часов: ' + hours(e, d) 
    ELSE CONCAT '', INTEGER(trunc(timeShortageNumeric(e, d), 0)), ' час(-ов) ', 
    round0(60 * (timeShortageNumeric(e, d) - INTEGER(trunc(timeShortageNumeric(e, d), 0)))), ' минут(а)';
    
messageManager = DATA LOCAL STRING (Employee);

sendNotificationsManager 'Уведомления для руководителей' () {
    IF NOT isDayoff(currentDate()) THEN {
        
        FOR sendNotificationManager(Employee e) AND isManager(e) AND email(e) AND isTimeShortageEmployees(e) DO {
            FOR level(Employee employee, e) AND isTimeShortage(employee) AND NOT fired(employee) AND NOT employee == e DO {
                messageManager(employee) <- NULL;
                messageManager(employee) <- CONCAT '', lastName(employee), ' ', firstName(employee), '<br />';
                FOR iterate(DATE d, sum(currentDate(), -1 * notificationPeriod()), sum(currentDate(), -1)) AND NOT isDayoff(d) AND 
                    (hours(employee, d) < overHoursSet(employee) OR NOT hours(employee, d) OR hours(employee, d) > 24) DO {
                    messageManager(employee) <- CONCAT '', messageManager(employee), toDateDDMMYY(d), ', ', timeShortageString(employee, d), '<br />';
                }
                messageManager(employee) <- CONCAT '', messageManager(employee), '<br />';
            }
            
            LOCAL body = STRING ();
            body() <- 'Здравствуйте!<br /><br />Пожалуйста, проверьте со следующими сотрудниками заполняемость трудозатрат.<br /><br />В предыдущий период следующие сотрудники внесли недостаточно трудозатрат:<br /><br />';
            body() <- CONCAT '', body(), (GROUP CONCAT messageManager(Employee employee), '' IF level(employee, e) AND NOT employee == e);
            body() <- CONCAT '', body(), 'Спасибо,<br /> Ваша CRM система';
            
            EMAIL
                SUBJECT 'Еженедельное информирование руководителя'
                TO email(e)
                BODY body()
            ;
        }
    }
}

EXTEND FORM options
    PROPERTIES sendNotificationsManager() DRAW e TOOLBAR
;

filterProject 'Проект' = DATA LOCAL Project ();
nameFilterProject 'Проект' = CONCAT ', ', name(filterProject()), nameCustomer(filterProject()) CHARWIDTH 40;

EXTEND FORM dialogProject
    FILTERS (in(currentUser(), userRoleSID('selfRegister')) AND include(p, currentUser())) OR NOT in(currentUser(), userRoleSID('selfRegister'))
;

changeProject () {
    DIALOG dialogProject OBJECTS p INPUT DO {
        filterProject() <- p;
    }
}

CONSTRAINT filterProject() AND in(currentUser(), userRoleSID('selfRegister')) AND NOT include(filterProject(), currentUser())
    CHECKED BY filterProject
    MESSAGE 'Внешний пользователь должен иметь доступ к проекту';

status 'Статус задачи' (TimeEntry e) = nameStatus(task(e));
rate 'Ставка' (TimeEntry e) = rate(project(e), category(task(e)));
nameCurrency 'Валюта' (TimeEntry e) = name(currency(project(e)));
sum 'Сумма' (TimeEntry e) = round2(hours(e) * rate(e));

nameResponsible 'Ответственный за проект' (TimeEntry e) = nameResponsible(project(e));

dateFrom 'Дата с' = DATA LOCAL DATE ();
dateTo 'Дата по' = DATA LOCAL DATE ();

validSelfRegister(Project p) = IF in(currentUser(), userRoleSID('selfRegister')) THEN include(p, currentUser()) ELSE TRUE;
visibleToSelfRegister (TimeEntry t) = IF in(currentUser(), userRoleSID('selfRegister')) THEN NOT invisible(task(t)) ELSE TRUE;

FORM taskMonitoring 'Мониторинг задач по проекту'

    PROPERTIES ()  dFrom = dateFrom, dTo = dateTo, nameFilterProject PANEL ON CHANGE changeProject()
    
    OBJECTS p = Project
    FILTERS p == filterProject()
    
    EVENTS ON INIT {
        dateFrom() <- sum(currentDate(), -30);
        dateTo() <- currentDate();
    }
    
    OBJECTS t = TimeEntry
    PROPERTIES(t) READONLY dateStart, dateFinish, status, nameTask, 'Описание' = nameTaskType, 
        'Исполнитель' = nameEmployee,  namePractice, nameParent, nameResponsible, hours, 
        rate, nameCurrency, sum
    FILTERS project(t) == filterProject(),
            dateStart(t) >= dateFrom() AND dateFinish(t) <= dateTo(),
            NOT markDelete(task(t)),
            validSelfRegister(project(t)),
            visibleToSelfRegister(t)
            
    FILTERGROUP practices 
        FILTER 'Юридические услуги' GROUP SUM 1 IF in(taskType(task(t)), Practice pp) AND nameParent(pp) == 'Юридические услуги'
        FILTER 'Бухгалтерские услуги' GROUP SUM 1 IF in(taskType(task(t)), Practice pp) AND nameParent(pp) == 'Бухгалтерские услуги'
        
    EVENTS ON INIT {
        IF in(currentUser(), userRoleSID('selfRegister')) THEN filterProject() <- GROUP MAX Project pp IF include(pp, currentUser());
    }
;

//showFilterGroup () = NOT in(currentUser(), userRoleSID('selfRegister'));

DESIGN taskMonitoring {
    OBJECTS {
        NEW header {
            type = CONTAINERH;
            MOVE PROPERTY(dFrom);
            MOVE PROPERTY(dTo);
            MOVE PROPERTY(nameFilterProject());
        }
        MOVE BOX(t);
    }
}

NAVIGATOR {
    reports {
        NEW taskMonitoring;
    }
}

strictNotification 'Жёсткая блокировка' = DATA BOOLEAN (Employee);

notified = DATA BOOLEAN (Employee, DATE);
needNotify (Employee e, DATE d) = NOT notified(e, d) AND
                                             strictNotification(e) AND 
                                             NOT hours(e, prevWorkDate(d)) >= overHoursSet(e) AND
                                             overHoursSet(e);

notifyYes 'Да, я заполнил всё время' () {
    notified(currentUser(), currentDate()) <- TRUE; 
    APPLY;
    formClose();
}

notifyNo 'Нет, я не заполнил всё время.' () {
    DIALOG timeDashboard;
    IF needNotify(currentUser(), currentDate()) THEN {
        beforeCanceled() <- TRUE;
    } ELSE {
        notifyYes();
    }
}

FORM notify 'Уведомления'
    PROPERTIES text = TEXT(firstName(currentUser()) + ', привет!\n\nПожалуйста, проверьте, и, если нужно, откорректируйте количество учтённого времени за ' 
                      + prevWorkDate(currentDate()) + '\n\nЯ тут заметила, что ' + prevWorkDate(currentDate()) + 
                      ' учтёно времени меньше обычного. Мне очень-очень важно знать распределение вашего времени. \nЭто поможет мне автоматизировать процессы и тем самым убрать скучную рутину из вашей работы.\n' +
                      'А для этого мне нужно понимать как распределено ваше время. Воможно вы закрутились и забыли учесть часть времени?\n\n' +
                      'Поэтому, буду очень благодарна, если вы сможете проверить, и, если нужно, откорректировать количество учтённого времени за ' +
                      prevWorkDate(currentDate()) + '\n\n' + 'Катерина,\n Ваша CRM система')
    PROPERTIES notifyYes(), notifyNo()
    EVENTS ON CLOSE { IF NOT notified(currentUser(), currentDate()) THEN notifyNo(); }
;

DESIGN notify {
    OBJECTS {
        MOVE PROPERTY(text) { fill = 1; height = 230; width = 800; }
        NEW actions {
            type = CONTAINERH;
            MOVE PROPERTY(notifyYes());
            MOVE PROPERTY(notifyNo());
        }
    }
    TOOLBARBOX {
        showIf = NULL;
    }
}

EXTEND FORM options
    PROPERTIES strictNotification(e)
;

notify () {
    IF NOT isDayoff(currentDate()) AND needNotify(currentUser(), currentDate()) THEN DIALOG notify;
}

onDesktopClientStarted () + {
    notify();
}

onWebClientStarted () + {
   notify();
}

EXTEND FORM projects
    PROPERTIES(t) READONLY rate, nameCurrency, sum
;

EXTEND FORM employees
    PROPERTIES(t) READONLY rate, nameCurrency, sum
;

FORM timeEntryPeriod 'Период'
    OBJECTS df = DATE PANEL, dt = DATE PANEL
    PROPERTIES dFrom = VALUE(df), dTo = VALUE(dt)
;

DESIGN timeEntryPeriod {
    OBJECTS {
        type = CONTAINERH;
        MOVE PROPERTY(dFrom);
        MOVE PROPERTY(dTo);
    }
}

createTimeEntryPeriod 'Трудозатраты за период' (Task t) {
    NEWSESSION {
        DIALOG timeEntryPeriod OBJECTS df INPUT, dt INPUT DO {
            FOR iterate(DATE d, df, dt) AND NOT isDayoff(d) DO {
                NEW te = TimeEntry {
                    task(te) <- t;
                    dateTimeStart(te) <- DATETIME(d);
                    dateTimeFinish(te) <- sumMinutes(dateTimeStart(te), 480);
                    userHours(te) <- 8;
                }
                IF status(t) == StatusTask.inProcess THEN initPaused(t) <- TRUE;
            }
        }
        APPLY;
    }
}

EXTEND FORM timeDashboard 
    PROPERTIES createTimeEntryPeriod(fe) DRAW pa TOOLBAR SHOWIF nameParent(fe) == 'Административные задачи'
;

DESIGN timeDashboard {
    TOOLBAR(pa) {
        MOVE PROPERTY(createTimeEntryPeriod(fe)) FIRST;
    }
}

documentRef_OtchietKomissionieraOProdazhakh = DATA LOCAL STRING(INTEGER);
documentRef_PrikhodnyiKassovyiOrdier = DATA LOCAL STRING(INTEGER);
documentRef_RaskhodnyiKassovyiOrdier = DATA LOCAL STRING(INTEGER);
documentRef_KorriektirovkaDolgha = DATA LOCAL STRING(INTEGER);
documentRef_AvansovyiOtchiet = DATA LOCAL STRING(INTEGER);
documentRef_PostuplieniieTovarovUslugh = DATA LOCAL STRING(INTEGER);
documentRef_SpisaniieMatierialovIzEkspluatatsii = DATA LOCAL STRING(INTEGER);
documentRef_PostuplieniieNaRaschietnyiSchiet = DATA LOCAL STRING(INTEGER);
documentRef_SpisaniieSRaschietnoghoSchieta = DATA LOCAL STRING(INTEGER);
documentRef_RiealizatsiiaTovarovUslugh = DATA LOCAL STRING(INTEGER);
kontraghient = DATA LOCAL STRING(INTEGER);
documentRef_OpieratsiiaBukh = DATA LOCAL STRING(INTEGER);
otvietstviennyi = DATA LOCAL STRING(INTEGER);
kolichiestvoProvodok = DATA LOCAL INTEGER(INTEGER);
data = DATA LOCAL DATETIME(INTEGER);
nomier = DATA LOCAL STRING(INTEGER);
priedstavlieniie = DATA LOCAL STRING(INTEGER);
nomPP = DATA LOCAL STRING(INTEGER);
IB = DATA LOCAL STRING();
orghanizatsiiaGUID = DATA LOCAL STRING();
orghanizatsiiaINN = DATA LOCAL STRING();
orghanizatsiiaImia = DATA LOCAL STRING();
dataVyghruzki = DATA LOCAL STRING();
konietsPierioda = DATA LOCAL STRING();
nachaloPierioda = DATA LOCAL STRING();

FORM data FORMEXTID 'Данные'
    PROPERTIES() IB EXTID 'ИБ' ATTR, 
                 orghanizatsiiaGUID EXTID 'ОрганизацияGUID' ATTR, 
                 orghanizatsiiaINN EXTID 'ОрганизацияИНН' ATTR, 
                 orghanizatsiiaImia EXTID 'ОрганизацияИмя' ATTR, 
                 dataVyghruzki EXTID 'ДатаВыгрузки' ATTR, 
                 konietsPierioda EXTID 'КонецПериода' ATTR, 
                 nachaloPierioda EXTID 'НачалоПериода' ATTR
    
    OBJECTS dokumient = INTEGER EXTID 'Документ'
    PROPERTIES(dokumient) documentRef_OtchietKomissionieraOProdazhakh EXTID 'DocumentRef.ОтчетКомиссионераОПродажах', 
                 documentRef_PrikhodnyiKassovyiOrdier EXTID 'DocumentRef.ПриходныйКассовыйОрдер', 
                 documentRef_RaskhodnyiKassovyiOrdier EXTID 'DocumentRef.РасходныйКассовыйОрдер', 
                 documentRef_KorriektirovkaDolgha EXTID 'DocumentRef.КорректировкаДолга', 
                 documentRef_AvansovyiOtchiet EXTID 'DocumentRef.АвансовыйОтчет', 
                 documentRef_PostuplieniieTovarovUslugh EXTID 'DocumentRef.ПоступлениеТоваровУслуг', 
                 documentRef_SpisaniieMatierialovIzEkspluatatsii EXTID 'DocumentRef.СписаниеМатериаловИзЭксплуатации', 
                 documentRef_PostuplieniieNaRaschietnyiSchiet EXTID 'DocumentRef.ПоступлениеНаРасчетныйСчет', 
                 documentRef_SpisaniieSRaschietnoghoSchieta EXTID 'DocumentRef.СписаниеСРасчетногоСчета', 
                 documentRef_RiealizatsiiaTovarovUslugh EXTID 'DocumentRef.РеализацияТоваровУслуг', 
                 kontraghient EXTID 'Контрагент', 
                 documentRef_OpieratsiiaBukh EXTID 'DocumentRef.ОперацияБух', 
                 otvietstviennyi EXTID 'Ответственный', 
                 kolichiestvoProvodok EXTID 'КоличествоПроводок', 
                 data EXTID 'Дата' ATTR, 
                 nomier EXTID 'Номер' ATTR, 
                 priedstavlieniie EXTID 'Представление' ATTR, 
                 nomPP EXTID 'НомПП' ATTR
;

//fill 'Заполнить' () {
//    INPUT f = XMLFILE DO {
//        IMPORT data XML FROM f;
//    }
//}

quantityOperation 'Кол-во проводок' (Partner.Partner l, DATE df, DATE dt) = 
    GROUP SUM quantityEntries(EntryDetail i) IF partner(i) == l AND dateTime(i) >= dateTimeToDateTime(df, 00:00) AND 
    dateTime(i) < dateTimeToDateTime(sum(dt, 1), 00:00);

FORM operationsReport 'Отчёт по операциям'
    OBJECTS df = DATE PANEL, dt = DATE PANEL 
    PROPERTIES dFrom 'Дата с' = VALUE(df), dTo 'по' = VALUE(dt)

    OBJECTS p = Partner.Partner
    PROPERTIES namePartner(p), quantityOperation(p, df, dt) 
    FILTERS quantityOperation(p, df, dt)
;

DESIGN operationsReport {
    OBJECTS {
        NEW header {
            type = CONTAINERH;
            MOVE PROPERTY(dFrom);
            MOVE PROPERTY(dTo);
        }
        MOVE BOX(p);
    }
}

NAVIGATOR {
    reports {
        NEW operationsReport;
    }
}

EXTEND FORM employeeHierarchies
    PROPERTIES READONLY nameManagers(e)
;

sendNotificationsAdmin 'Уведомления для администраторов' = DATA BOOLEAN (Employee);
excludeNotificationsAdmin 'Исключить из уведомлений для администраторов' = DATA BOOLEAN (Employee);

isTimeShortageEmployeesAdmin () = 
    GROUP SUM 1 IF Employee e IS Employee AND isTimeShortage(e) AND NOT excludeNotificationsAdmin(e) AND NOT fired(e);

sendNotificationsAdmin 'Уведомления для администраторов' () {
    IF NOT isDayoff(currentDate()) AND isTimeShortageEmployeesAdmin() THEN {
           
        FOR Employee employee IS Employee AND isTimeShortage(employee) AND NOT fired(employee) AND NOT excludeNotificationsAdmin(employee) DO {
            messageManager(employee) <- NULL;
            messageManager(employee) <- CONCAT '', lastName(employee), ' ', firstName(employee), '<br />';
            FOR iterate(DATE d, sum(currentDate(), -1 * notificationPeriod()), sum(currentDate(), -1)) AND NOT isDayoff(d) AND 
                (hours(employee, d) < overHoursSet(employee) OR NOT hours(employee, d) OR hours(employee, d) > 24) DO {
                messageManager(employee) <- CONCAT '', messageManager(employee), toDateDDMMYY(d), ', ', timeShortageString(employee, d), '<br />';
            }
            messageManager(employee) <- CONCAT '', messageManager(employee), '<br />';
        }
            
        FOR sendNotificationsAdmin(Employee e) AND email(e) DO {    
            LOCAL body = STRING ();
            body() <- 'Здравствуйте!<br /><br />Пожалуйста, проверьте со следующими сотрудниками заполняемость трудозатрат.<br /><br />В предыдущий период следующие сотрудники внесли недостаточно трудозатрат:<br /><br />';
            body() <- CONCAT '', body(), (GROUP CONCAT messageManager(Employee employee), '' IF employee IS Employee);
            body() <- CONCAT '', body(), 'Спасибо,<br /> Ваша CRM система';
            
            EMAIL
                SUBJECT 'Еженедельное информирование руководителя'
                TO email(e)
                BODY body()
            ;
        }
    }
}

EXTEND FORM options
    PROPERTIES sendNotificationsAdmin(e), excludeNotificationsAdmin(e), sendNotificationsAdmin() DRAW e TOOLBAR 
;

CLASS HoursType {
    total '1',
    ASB '2',
    other '3',
    noWork '4'
}

name 'Сотрудник' (HoursType t, Employee e) = CASE
    WHEN t == HoursType.total THEN CONCAT ' ', firstName(e), lastName(e)
    WHEN t == HoursType.ASB THEN 'АСБ'
    WHEN t == HoursType.noWork THEN 'Отсутствие на работе'
    WHEN t == HoursType.other THEN 'Клиенты';
    
backgroundName (HoursType t) = IF t == HoursType.total THEN RGB(212,212,212);

hours 'Часов' (HoursType t, Employee e, DATE d) = CASE 
    WHEN t == HoursType.total THEN GROUP SUM hours(TimeEntry te) IF employee(te) == e AND dateStart(te) == d
    WHEN t == HoursType.ASB THEN GROUP SUM hours(TimeEntry te) IF employee(te) == e AND dateStart(te) == d 
        AND nameCustomerProject(te) == 'АСБ Консалтинг Групп,ООО' AND NOT namePractice(te) == 'Отсутствие на работе'
    WHEN t == HoursType.noWork THEN GROUP SUM hours(TimeEntry te) IF employee(te) == e AND dateStart(te) == d 
        AND nameCustomerProject(te) == 'АСБ Консалтинг Групп,ООО' AND namePractice(te) == 'Отсутствие на работе'
    WHEN t == HoursType.other THEN GROUP SUM hours(TimeEntry te) IF employee(te) == e AND dateStart(te) == d
        AND NOT nameCustomerProject(te) == 'АСБ Консалтинг Групп,ООО';
        
hoursTotal 'Часов всего' (HoursType t, Employee e, DATE df, DATE dt) = CASE
    WHEN t == HoursType.total THEN hours(e, df, dt)
    WHEN t == HoursType.ASB THEN hoursASBwork(e, df, dt)
    WHEN t == HoursType.noWork THEN hoursASBnoWork(e, df, dt)
    WHEN t == HoursType.other THEN hoursOther(e, df, dt);

backgroundHours (HoursType t, Employee e, DATE d) = 
    IF t == HoursType.total AND (hours(e, d) < 6 OR hours(e, d) > 24) THEN RGB(255, 172, 172);
    
index (HoursType t, Employee e) = CONCAT '', firstName(e), lastName(e), staticCaption(t);

FORM employeesExtended 'По сотрудникам (расширенный)'
    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES dFrom 'Дата с' = VALUE(dFrom), dTo 'Дата по' = VALUE(dTo)

    OBJECTS d = DATE 
    FILTERS hours(d), d >= dFrom, d <= dTo

    OBJECTS et = (e = Employee, t = HoursType)
    PROPERTIES READONLY name(t, e) BACKGROUND backgroundName(t), index(t, e) SHOWIF NULL
    PROPERTIES(t, e, dFrom, dTo) READONLY hoursTotal
    ORDERS index(t, e)
    FILTERS NOT fired(e),
                hoursTotal(HoursType.total, e, dFrom, dTo)
    
    PROPERTIES(t, e, d) READONLY hours COLUMNS (d) HEADER header(d) BACKGROUND backgroundHours(t, e, d)
;

NAVIGATOR {
    reports {
        NEW employeesExtended; 
    }
}