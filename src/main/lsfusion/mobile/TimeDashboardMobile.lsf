MODULE TimeDashboardMobile;

REQUIRE TimeDashboard;

NAMESPACE Time;

active 'Активные' (Task t) = notCompleted(t) OR dateFinish(t) >= subtract(currentDate(), 1);
overName 'Задача' (Task t) = OVERRIDE name(t), CONCAT ', ', nameCustomerProject(t), nameProject(t), nameTaskType(t);

lastEntry (Task t) = GROUP LAST TimeEntry e ORDER dateTimeStart(e), e WHERE dateTimeStart(e) BY task(e);

dateTimeStartLastEntry 'Начало' (Task t) = dateTimeStart(lastEntry(t));  
currentHoursLastEntry 'Часов' (Task t) = currentHours(lastEntry(t));

changeStatus (Task t) {
    CASE 
        WHEN status(t) = StatusTask.paused THEN {
            NEWSESSION {
                dateTimeFinish(TimeEntry te) <- currentDateTime() WHERE employee(task(te)) == currentEmployee() AND NOT dateTimeFinish(te);
                APPLY;
            }
            restart(t);
        } 
        WHEN status(t) = StatusTask.inProcess THEN 
            pause(t);
} CHANGEMOUSE 'DBLCLK';

FORM timeDashboardMobile 'Мобильная отметка' AUTOREFRESH 360 
    
    OBJECTS t = Task
    PROPERTIES(t) READONLY BACKGROUND background(t) nameCustomerProject, nameProject, nameTaskType
    PROPERTIES(t) PANEL dateTimeStartLastEntry ON CHANGE { INPUT dt = dateTimeStartLastEntry(t) DO dateTimeStart(lastEntry(t)) <- dt; APPLY; }, 
                        currentHoursLastEntry
    PROPERTIES(t) PANEL READONLY pCustomer = nameCustomerProject, pProject = nameProject, name, '' = description
    PROPERTIES(t) changeStatus HEADER IF inProcess(t) THEN 'Стоп' ELSE 'Старт'
    
    FILTERS active(t), employee(t) = currentEmployee()
    
    OBJECTS te = TimeEntry
    PROPERTIES(te) READONLY dateTimeStart, dateTimeFinish
    PROPERTIES(te) NEWSESSION DELETE GRID
    ORDERS dateTimeStart(te) DESC
    FILTERS task(te) = t
;

DESIGN timeDashboardMobile {
    OBJECTS {
        NEW lastEntry {
            type = CONTAINERH;
            alignment = STRETCH;
            MOVE PROPERTY(dateTimeStartLastEntry(t));
            MOVE PROPERTY(currentHoursLastEntry(t));
        }
        MOVE PROPERTY(changeStatus(t)) { alignment = STRETCH; }
        MOVE GRID(t) { 
            headerHeight = 20;
            fill = 10;
        }
        REMOVE BOX(t);
        
        NEW tabbedPane {
            fill = 1;
            type = TABBED;
            
            NEW description {
                caption = 'Параметры';
                MOVE PROPERTY(pCustomer) { alignment = STRETCH; }
                MOVE PROPERTY(pProject) { alignment = STRETCH; }
                MOVE PROPERTY(name(t)) { alignment = STRETCH; }
                MOVE PROPERTY(description(t)) {
                    fill = 1;
                }
            }
            NEW timeEntry {
                caption = 'Трудозатраты';
                MOVE GRID(te);
                REMOVE BOX(te);
            }
        }
    }
    REMOVE TOOLBARBOX;
}   

showMobileForms ABSTRACT LIST ();

showMobileForms() + { 
    IF permit(currentUser(), navigatorElementCanonicalName('Sales.ordersMobile')) THEN
        SHOW timeDashboardMobile NOWAIT; 
}

onWebClientStarted() + {
    IF isMobile() THEN {
        showMobileForms();
        maximizeForm();
    }
}