MODULE TimeDashboardMobile;

REQUIRE TimeDashboard;

NAMESPACE Time;

lastEntry (Task t) = GROUP LAST TimeEntry e ORDER dateTimeStart(e), e WHERE dateTimeStart(e) BY task(e);

dateTimeStartLastEntry 'Начало' (Task t) = dateTimeStart(lastEntry(t));  
currentHoursLastEntry 'Часов' (Task t) = currentHours(lastEntry(t));

changeStatus (Task t) {
    CASE 
        WHEN status(t) = StatusTask.paused THEN {
            NEWSESSION {
                dateTimeFinish(TimeEntry te) <- currentDateTime() WHERE employee(task(te)) == currentEmployee() AND NOT dateTimeFinish(te);
                APPLY;
            }
            restart(t);
        } 
        WHEN status(t) = StatusTask.inProcess THEN 
            pause(t);
}

FORM timeDashboardMobile 'Мобильная отметка'
    
    OBJECTS t = Task
    PROPERTIES(t) READONLY BACKGROUND background(t) nameCustomerProject, nameProject, nameTaskType
    PROPERTIES(t) PANEL dateTimeStartLastEntry ON CHANGE { INPUT dt = dateTimeStartLastEntry(t) DO dateTimeStart(lastEntry(t)) <- dt; APPLY; }, 
                        currentHoursLastEntry
    PROPERTIES(t) PANEL READONLY pCustomer = nameCustomerProject, pProject = nameProject, name, '' = description
    PROPERTIES(t) changeStatus HEADER IF inProcess(t) THEN 'Стоп' ELSE 'Старт'
    
    FILTERS notCompleted(t) OR dateFinish(t) >= subtract(currentDate(), 1), 
            employee(t) = currentEmployee()
    
    OBJECTS te = TimeEntry
    PROPERTIES(te) dateTimeStart, dateTimeFinish
    PROPERTIES(te) NEWSESSION DELETE GRID
    ORDERS dateTimeStart(te) DESC
    FILTERS task(te) = t
;

DESIGN timeDashboardMobile {
    OBJECTS {
        NEW lastEntry {
            type = CONTAINERH;
            alignment = STRETCH;
            MOVE PROPERTY(dateTimeStartLastEntry(t));
            MOVE PROPERTY(currentHoursLastEntry(t));
        }
        MOVE PROPERTY(changeStatus(t)) { alignment = STRETCH; }
        MOVE GRID(t) { 
            headerHeight = 20;
            fill = 3;
        }
        REMOVE BOX(t);
        NEW taskActions {
            type = CONTAINERH;
            alignment = STRETCH;
        }
        NEW tabbedPane {
            fill = 1;
            type = TABBED;
            
            NEW timeEntry {
                caption = 'Трудозатраты';
                MOVE GRID(te);
                REMOVE BOX(te);
            }
            NEW description {
                caption = 'Параметры';
                MOVE PROPERTY(pCustomer) { alignment = STRETCH; }
                MOVE PROPERTY(pProject) { alignment = STRETCH; }
                MOVE PROPERTY(name(t)) { alignment = STRETCH; }
                MOVE PROPERTY(description(t)) {
                    fill = 1;
                }
            }
        }
    }
    REMOVE TOOLBARBOX;
}   

showMobileForms ABSTRACT LIST ();

showMobileForms() + { 
    IF permit(currentUser(), navigatorElementCanonicalName('Sales.ordersMobile')) THEN
        SHOW timeDashboardMobile NOWAIT; 
}

onWebClientStarted() + {
    IF isMobile() THEN {
        showMobileForms();
        maximizeForm();
    }
}

createNewTaskMobile 'Добавить' () { 
    NEWSESSION {       
        NEW t = Task {
            employee(t) <- currentEmployee();
            DIALOG dialogTaskTypeMobile OBJECTS g INPUT, a INPUT DO {
                taskType(t) <- a;
                practice(t) <- g;
            } ELSE
                RETURN;
            DIALOG selectProject OBJECTS p INPUT DO {
                project(t) <- p;
            } ELSE
                RETURN;
            NEW e = TimeEntry {
                task(e) <- t;
                dateTimeStart(e) <- currentDateTime();
            }
            APPLY;
            SEEK timeDashboardMobile.t = t;
        }
    }
}

FORM taskMobile 'Задача'
    OBJECTS t = Task PANEL
    PROPERTIES(t) nameCustomerProject, 
                  nameProject, 
                  nameTaskType ON CHANGE { DIALOG dialogTaskTypeMobile OBJECTS g = practice(t) CHANGE, a = taskType(t) CHANGE; }, 
                  description
;
DESIGN taskMobile {
    OBJECTS {
        NEW pane {
            fill = 1;
            childrenAlignment = STRETCH;
            MOVE PROPERTY(nameCustomerProject(t));
            MOVE PROPERTY(nameProject(t));
            MOVE PROPERTY(nameTaskType(t));
            MOVE PROPERTY(description(t)) { panelCaptionVertical = TRUE; fill = 1; };
        }
    }
    BOX {
        NEW formActions {
            type = CONTAINERH;
            alignment = STRETCH;
            MOVE PROPERTY(formOk()) { fill = 1; }
            MOVE PROPERTY(formClose()) { fill = 1; }
        }
    }
}

editMobile 'Редактировать' (Task t) {
    DIALOG taskMobile OBJECTS t = t NEWSESSION;
}

EXTEND FORM timeDashboardMobile
    PROPERTIES createNewTaskMobile(), editMobile(t), 
               deleteTask(t) SHOWIF NOT markDelete(t), cancelDelete(t) SHOWIF markDelete(t) 
;

DESIGN timeDashboardMobile {
    taskActions {
        MOVE PROPERTY(createNewTaskMobile()) { fill = 1; };
        MOVE PROPERTY(editMobile(t)) { fill = 1;}
        MOVE PROPERTY(deleteTask(t)) { fill = 1;}
        MOVE PROPERTY(cancelDelete(t)) { fill = 1;}
    }
}