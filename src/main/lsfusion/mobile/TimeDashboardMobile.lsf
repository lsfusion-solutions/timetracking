MODULE TimeDashboardMobile;

REQUIRE TimeDashboard, Time;

NAMESPACE Time;

lastEntry (Task t) = GROUP LAST TimeEntry e ORDER dateTimeStart(e), e WHERE dateTimeStart(e) BY task(e);

//dateTimeStartLastEntry 'Начало' (Task t) = dateTimeStart(lastEntry(t));  
//currentHoursLastEntry 'Часов' (Task t) = currentHours(lastEntry(t));

FORM timeDashboardMobile 'Мобильная отметка'
    
    OBJECTS t = Task
    PROPERTIES(t) READONLY BACKGROUND background(t) nameCustomerProject, nameProject, nameTaskType
//    PROPERTIES(t) PANEL dateTimeStartLastEntry ON CHANGE { INPUT dt = dateTimeStartLastEntry(t) DO dateTimeStart(lastEntry(t)) <- dt; APPLY; }, 
//                        currentHoursLastEntry
//    PROPERTIES(t) PANEL READONLY pCustomer = nameCustomerProject, pProject = nameProject, name, '' = description
    
    FILTERS notCompleted(t) OR dateFinish(t) >= subtract(currentDate(), 1), 
            employee(t) = currentEmployee()
    
    OBJECTS te = TimeEntry
    PROPERTIES(te) READONLY dateTimeStart, dateTimeFinish
    PROPERTIES(te) NEWSESSION DELETE GRID
    ORDERS dateTimeStart(te) DESC
    FILTERS task(te) = t
;

DESIGN timeDashboardMobile {
    OBJECTS {
//        NEW lastEntry {
//            type = CONTAINERH;
//            alignment = STRETCH;
//            MOVE PROPERTY(dateTimeStartLastEntry(t));
//            MOVE PROPERTY(currentHoursLastEntry(t));
//        }
        NEW taskActions {
            type = CONTAINERH;
            alignment = STRETCH;
        }
        MOVE GRID(t) { 
            headerHeight = 20;
            fill = 3;
        }
        REMOVE BOX(t);
        NEW timeEntryActions {
            alignment = STRETCH;
            type = CONTAINERH;
        }
        MOVE GRID(te);
        REMOVE BOX(te);
//        NEW tabbedPane {
//            fill = 1;
//            type = TABBED;
//            
//            NEW timeEntry {
//                caption = 'Трудозатраты';
//            }
//            NEW description {
//                caption = 'Параметры';
//                MOVE PROPERTY(pCustomer) { alignment = STRETCH; }
//                MOVE PROPERTY(pProject) { alignment = STRETCH; }
//                MOVE PROPERTY(name(t)) { alignment = STRETCH; }
//                MOVE PROPERTY(description(t)) {
//                    fill = 1;
//                }
//            }
//        }
    }
    REMOVE TOOLBARBOX;
}   

showMobileForms ABSTRACT LIST ();

showMobileForms() + { 
    IF permit(currentUser(), navigatorElementCanonicalName('Sales.ordersMobile')) THEN
        SHOW timeDashboardMobile NOWAIT; 
}

onWebClientStarted() + {
    IF isMobile() THEN {
        showMobileForms();
        maximizeForm();
    }
}

// task create/edit

createNewTaskMobile 'Добавить' () { 
    NEWSESSION {       
        NEW t = Task {
            employee(t) <- currentEmployee();
            DIALOG dialogTaskTypeMobile OBJECTS g INPUT, a INPUT DO {
                taskType(t) <- a;
                practice(t) <- g;
            } ELSE
                RETURN;
            DIALOG selectProject OBJECTS p INPUT DO {
                project(t) <- p;
            } ELSE
                RETURN;
            NEW e = TimeEntry {
                task(e) <- t;
                dateTimeStart(e) <- currentDateTime();
            }
            APPLY;
            SEEK timeDashboardMobile.t = t;
        }
    }
}

FORM taskMobile 'Задача'
    OBJECTS t = Task PANEL
    PROPERTIES(t) nameCustomerProject, 
                  nameProject, 
                  nameTaskType ON CHANGE { DIALOG dialogTaskTypeMobile OBJECTS g = practice(t) CHANGE, a = taskType(t) CHANGE; }, 
                  description
;
DESIGN taskMobile {
    size = (375, 600);
    OBJECTS {
        NEW pane {
            fill = 1;
            MOVE PROPERTY(nameCustomerProject(t)) { alignment = STRETCH; }
            MOVE PROPERTY(nameProject(t)) { alignment = STRETCH; }
            MOVE PROPERTY(nameTaskType(t)) { alignment = STRETCH; }
            MOVE PROPERTY(description(t)) { alignment = STRETCH; panelCaptionVertical = TRUE; fill = 1; }
        }
    }
    REMOVE PROPERTY(formApply());
    REMOVE PROPERTY(formCancel());
    REMOVE PROPERTY(formRefresh());
    PROPERTY(formOk()) { fill = 1; }
    PROPERTY(formClose()) { fill = 1; }
//    BOX {
//        NEW formActions {
//            type = CONTAINERH;
//            alignment = STRETCH;
//            MOVE PROPERTY(formOk()) { fill = 1; }
//            MOVE PROPERTY(formClose()) { fill = 1; }
//        }
//    }
}

editMobile 'Редактировать' (Task t) {
    SHOW taskMobile OBJECTS t = t NEWSESSION;
} CHANGEMOUSE 'DBLCLK';

EXTEND FORM timeDashboardMobile
    PROPERTIES createNewTaskMobile(), editMobile(t), 
               deleteTask(t) SHOWIF NOT markDelete(t), cancelDelete(t) SHOWIF markDelete(t) 
;

DESIGN timeDashboardMobile {
    taskActions {
        MOVE PROPERTY(createNewTaskMobile()) { fill = 1; };
        MOVE PROPERTY(editMobile(t)) { fill = 1;}
        MOVE PROPERTY(deleteTask(t)) { fill = 1;}
        MOVE PROPERTY(cancelDelete(t)) { fill = 1;}
    }
}

// start / stop
changeStatus (Task t) {
    CASE 
        WHEN status(t) = StatusTask.paused THEN {
            NEWSESSION {
                dateTimeFinish(TimeEntry te) <- currentDateTime() WHERE employee(task(te)) == currentEmployee() AND NOT dateTimeFinish(te);
                APPLY;
            }
            restart(t);
        } 
        WHEN status(t) = StatusTask.inProcess THEN 
            pause(t);
    SEEK timeDashboardMobile.te = lastEntry(t);
}

EXTEND FORM timeDashboardMobile
    PROPERTIES(t) changeStatus HEADER IF inProcess(t) THEN 'Стоп' ELSE 'Старт'
;

DESIGN timeDashboardMobile {
    timeEntryActions {
        MOVE PROPERTY(changeStatus(t)) { fill = 1; }
    }
}

// timeEntry add /edit
FORM timeEntryMobile 'Отметка времени'
    OBJECTS te = TimeEntry PANEL

//    PROPERTIES(te) dateTimeStart CUSTOM RENDER 'customInputDateTime', 
//                   dateTimeFinish CUSTOM RENDER 'customInputDateTime'

    PROPERTIES(te) dateStart CUSTOM RENDER 'customInputDate' 
        ON CHANGE { INPUT d = DATE DO { dateTimeStart(te) <- dateTimeToDateTime(d, timeStart(te)); }}, 
                   timeStart CUSTOM RENDER 'customInputTime'
        ON CHANGE { INPUT t = TIME DO { dateTimeStart(te) <- dateTimeToDateTime(dateStart(te), t); }}
    PROPERTIES(te) dateFinish CUSTOM RENDER 'customInputDate' 
        ON CHANGE { INPUT d = DATE DO { dateTimeFinish(te) <- dateTimeToDateTime(d, timeFinish(te)); }}, 
                   timeFinish CUSTOM RENDER 'customInputTime'
        ON CHANGE { INPUT t = TIME DO { dateTimeFinish(te) <- dateTimeToDateTime(dateFinish(te), t); }}
                   
    PROPERTIES(te) currentHours ON CHANGE { INPUT h = currentHours(te) DO { dateTimeFinish(te) <- sumMinutes(dateTimeStart(te), h * 60); }}
    
    PROPERTIES(te) comment
;

DESIGN timeEntryMobile {
    OBJECTS {
        NEW time {
            fill = 1;
            NEW interval {
                alignment = STRETCH;
                type = CONTAINERH;
//                NEW timeInterval {
//                    fill = 1;
//                    MOVE PROPERTY(dateTimeStart(te)) { fontSize = 24; fill = 1; panelCaptionVertical = TRUE; }
//                    MOVE PROPERTY(dateTimeFinish(te)) { fontSize = 24; fill = 1; panelCaptionVertical = TRUE; }
//                }

                NEW timeStart {
                    alignment = STRETCH;
                    MOVE PROPERTY(dateStart(te)) { fontSize = 24; fill = 1; panelCaptionVertical = TRUE; }
                    MOVE PROPERTY(timeStart(te)) { fontSize = 24; fill = 1; panelCaptionVertical = TRUE; }
                }
                NEW timeFinish {
                    alignment = STRETCH;
                    MOVE PROPERTY(dateFinish(te)) { fontSize = 24; fill = 1; panelCaptionVertical = TRUE; }
                    MOVE PROPERTY(timeFinish(te)) { fontSize = 24; fill = 1; panelCaptionVertical = TRUE; }
                }
                MOVE PROPERTY(currentHours(te)) { fontSize = 24; alignment = STRETCH; panelCaptionVertical = TRUE; }
            }
            MOVE PROPERTY(comment(te)) { fill = 1;  panelCaptionVertical = TRUE; }
        }
    }
    REMOVE PROPERTY(formApply());
    REMOVE PROPERTY(formCancel());
    REMOVE PROPERTY(formRefresh());
    PROPERTY(formOk()) { fill = 1; }
    PROPERTY(formClose()) { fill = 1; }
} 

WHEN LOCAL FORMS timeEntryMobile SETCHANGED(dateStart(TimeEntry te)) DO
    dateTimeFinish(te) <- dateTimeToDateTime(dateTimeStart(te), timeFinish(te));

addTimeEntry 'Отметить' (Task t) {
    NEWSESSION {
        NEW te = TimeEntry {
            task(te) <- t;
            dateTimeStart(te) <- currentDateTime();
            dateTimeFinish(te) <- currentDateTime();
            SHOW timeEntryMobile OBJECTS te = te;
        }
    }
}

editTimeEntry 'Редактировать' (TimeEntry te) {
    SHOW timeEntryMobile OBJECTS te = te NEWSESSION;
} CHANGEMOUSE 'DBLCLK'; 

EXTEND FORM timeDashboardMobile
    PROPERTIES(t) addTimeEntry PANEL
    
    PROPERTIES(te) editTimeEntry GRID;
;

DESIGN timeDashboardMobile {
    timeEntryActions {
        MOVE PROPERTY(addTimeEntry(t)) { fill = 1; };
    }
}