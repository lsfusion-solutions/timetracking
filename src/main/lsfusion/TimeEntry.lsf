MODULE TimeEntry;

REQUIRE Project, Employee, Time, Task, Utils;

NAMESPACE Time;

CLASS TimeEntry 'Трудозатраты';
TABLE timeEntry(TimeEntry);

task 'Задача' = DATA Task (TimeEntry) NONULL DELETE INDEXED;

project 'Проект' (TimeEntry e) = project(task(e));
nameProject 'Проект' (TimeEntry e) = nameProject(task(e));

employee 'Сотрудник' (TimeEntry e) = employee(task(e));
nameEmployee 'Сотрудник' (TimeEntry e) = name(employee(e)) CHARWIDTH 20;

namePractice 'Практика' (TimeEntry e) = namePractice(employee(e));

nameCustomerProject 'Клиент' (TimeEntry e) = nameCustomerProject(task(e));
nameTaskType 'Тип задачи' (TimeEntry e) = nameTaskType(task(e));
nameTask 'Задача' (TimeEntry e) = name(task(e));

descriptionTask 'Описание задачи' (TimeEntry e) = description(task(e));
changeDescriptionTask (TimeEntry e)  { INPUT t = TEXT DO description(Task tt) <- t WHERE task(e) == tt; }

dateTimeStart 'Время начала' = DATA DATETIME (TimeEntry);
dateTimeFinish 'Время окончания' = DATA DATETIME (TimeEntry);

dateStart 'Дата начала' (TimeEntry e) = DATE(dateTimeStart(e));
dateFinish 'Дата окончания' (TimeEntry e) = DATE(dateTimeFinish(e));

CONSTRAINT dateTimeFinish(TimeEntry e) < dateTimeFinish(e)
    MESSAGE 'Время окончания трудозатрат не может быть меньше времени начала';
dateTimeStart 'Дата начала' (Task t) = GROUP LAST dateTimeStart(TimeEntry e) ORDER DESC dateTimeStart(e), e WHERE dateTimeStart(e) BY task(e); 
dateTimeFinish 'Дата завершения' (Task t) = GROUP LAST dateTimeFinish(TimeEntry e) ORDER dateTimeStart(e), e WHERE dateTimeStart(e) BY task(e);
dateFinish 'Дата завершения' (Task t) = DATE(dateTimeFinish(t));

secondsDiffDateTime (DATETIME dateFrom, DATETIME dateTo) = [ FORMULA INTEGER PG 'SELECT EXTRACT (epoch FROM (($1) - ($2)))'](dateFrom AS DATETIME, dateTo AS DATETIME);
hoursDiffDateTime (DATETIME dateFrom, DATETIME dateTo) = NUMERIC[5,1](secondsDiffDateTime(dateFrom, dateTo) / 3600.0); 

calcHours (TimeEntry e) = hoursDiffDateTime(dateTimeFinish(e), dateTimeStart(e));
currentHours 'Часов' (TimeEntry e) = OVERRIDE calcHours(e), hoursDiffDateTime(currentDateTime(), dateTimeStart(e)); 

userHours 'Часов' = DATA NUMERIC[5,1] (TimeEntry);
hours 'Часов' (TimeEntry e) = OVERRIDE userHours(e), calcHours(e);

CONSTRAINT SETCHANGED(hours(TimeEntry e)) AND hours(e) < 0.0
    MESSAGE 'Количество часов в отметке не может быть отрицательным';

initPaused 'Запускать на паузе' = DATA BOOLEAN (Task);

inProcess 'В работе' (TimeEntry e) = dateTimeStart(e) AND NOT dateTimeFinish(e) AND NOT userHours(e);
inProcess 'В работе' (Task t) = t IS Task AND NOT completed(t) AND NOT dateTimeFinish(t) AND NOT (initPaused(t) AND NOT dateTimeStart(t));

paused 'На паузе' (Task t) = dateTimeFinish(t) OR (initPaused(t) AND NOT dateTimeStart(t));  

EXTEND CLASS StatusTask {
    paused 'На паузе',
    inProcess 'В работе'
}

status (Task t) += WHEN paused(t) THEN StatusTask.paused;
status (Task t) += WHEN inProcess(t) THEN StatusTask.inProcess;

background (Task t) += WHEN dateTimeFinish(t) OR (initPaused(t) AND NOT dateTimeStart(t)) THEN RGB(212,212,255);
background (Task t) += WHEN inProcess(t) THEN RGB(212,255,212);

createEmailTasks () {
    NEWSESSION {
        receiveEmailAction();
         
        FOR isSubstring(subject(Email e), id(Project p)) AND 
            (Employee et = GROUP MAX Employee ee IF email(ee) == fromAddress(e))
            AND NOT read(e) DO NEW t = Task {
            project(t) <- p;
            name(t) <- trim(replace(subject(e), id(p), ''));
            TRY {
                richTextToString(message(e));
            } CATCH {
                resultString() <- 'Не удалось прочитать описание';
            }
            description(t) <- resultString();
            taskType(t) <- emailTaskType();
            employee(t) <- et;
            read(e) <- TRUE;
            IF PREV([GROUP SUM 1 IF status(Task tt) = StatusTask.inProcess BY employee(tt)](et)) THEN {
                initPaused(t) <- TRUE;
            }
        }
        FOR Email e IS Email AND (Employee et = GROUP MAX Employee ee IF email(ee) == fromAddress(e)) AND NOT read(e) DO NEW t = Task {
            name(t) <- trim(subject(e));
            TRY {
                richTextToString(message(e));
            } CATCH {
                resultString() <- 'Не удалось прочитать описание';
            }
            description(t) <- resultString();
            taskType(t) <- emailTaskType();
            employee(t) <- et;
            read(e) <- TRUE;
            IF PREV([GROUP SUM 1 IF status(Task tt) = StatusTask.inProcess BY employee(tt)](et)) THEN {
                initPaused(t) <- TRUE;
            }
        }
        APPLY;
    }
}

// Деятельность
CLASS Activity 'Деятельность';
TABLE activity (Activity);

name 'Название' = DATA STRING[50] (Activity);

FORM activities 'Деятельность'
    OBJECTS a = Activity
    PROPERTIES(a) name, NEW, DELETE
;

FORM dialogActivity 'Выбор деятельности'
    OBJECTS a = Activity
    PROPERTIES(a) READONLY name
    
    LIST Activity OBJECT a;
;

NAVIGATOR {
    masterData {
        NEW activities;
    }
}

activity 'Деятельность' = DATA Activity (TimeEntry);
nameActivity 'Деятельность' (TimeEntry e) = name(activity(e));

comment 'Комментарий' (TimeEntry e) = DATA TEXT (TimeEntry); 

hours 'Часов затрачено' (Task t) = GROUP SUM hours(TimeEntry e) BY task(e);
currentHours 'Часов' (Task t) = GROUP SUM currentHours(TimeEntry e) BY task(e);

hours 'Часов затрачено' (Project p) = GROUP SUM hours(Task t) BY project(t);

FORM timeEntry 'Трудозатраты'
    OBJECTS e = TimeEntry PANEL
    PROPERTIES(e) nameCustomerProject, nameProject, nameTask, dateTimeStart, dateTimeFinish, hours, nameActivity, comment PANEL
    
    EDIT TimeEntry OBJECT e
;

DESIGN timeEntry {
    NEW projectInfo FIRST {
        caption = 'Проект';
        type = CONTAINERH;
        MOVE PROPERTY(nameCustomerProject(e));
        MOVE PROPERTY(nameProject(e));
        MOVE PROPERTY(nameTask(e));
    }
    
    NEW timeInfo AFTER projectInfo {
        caption = 'Время';
        type = CONTAINERH;
        MOVE PROPERTY(dateTimeStart(e));
        MOVE PROPERTY(dateTimeFinish(e));
        MOVE PROPERTY(hours(e));
    }
    
    NEW description AFTER timeInfo {
        fill = 1;
        MOVE PROPERTY(nameActivity(e));
        MOVE PROPERTY(comment(e)) {
            fill = 1;
            panelCaptionAbove = TRUE;
            height = 200;
        }
    }
    
}

EXTEND FORM task
    PROPERTIES(t) READONLY dateTimeStart, dateTimeFinish, hours

    OBJECTS e = TimeEntry
    PROPERTIES(e) dateTimeStart, dateTimeFinish, hours BACKGROUND userHours(e), nameActivity, comment PANEL, NEW, DELETE 
    FILTERS task(e) == t
;

DESIGN task {
    OBJECTS {
        projectDescr {
            NEW timeInfo {
                fill = 1;
                NEW taskTimeInfo {
                    caption = 'Время';
                    type = CONTAINERH;
                    MOVE PROPERTY(dateTimeStart(t));
                    MOVE PROPERTY(dateTimeFinish(t));
                    MOVE PROPERTY(hours(t));
                }
                MOVE BOX(e) {
                    MOVE PROPERTY(comment(e)) {
                        panelCaptionAbove = TRUE;
                        fill = 1;
                    }
                }
            }
        }
    }
}

// --- old -- todel

CLASS TimeEntryPause 'Паузы';
TABLE timeEntryPause(TimeEntryPause);

dateTimePause 'Время приостановки' = DATA DATETIME (TimeEntryPause);
dateTimeRestart 'Время перезапуска' = DATA DATETIME (TimeEntryPause);

timeEntry 'Time Entry' = DATA TimeEntry(TimeEntryPause);

//project 'Проект' = DATA Project (TimeEntry);
//customer 'Клиент' (TimeEntry e) = customer(project(e));

//employee 'Сотрудник' = DATA Employee (TimeEntry);
//nameEmployee 'Сотрудник' (TimeEntry e) = name(employee(e));

//employee(TimeEntry t) <- currentEmployee() WHEN SET(t IS TimeEntry);  

//CONSTRAINT employee(TimeEntry e) AND project(e) AND NOT assigned(project(e), employee(e))
//    CHECKED BY employee, project
//    MESSAGE 'Для трудозатрат задан сотрудник, не назначенный на проект';


isPause 'Пауза включена' (TimeEntryPause p) = dateTimePause(p) AND NOT dateTimeRestart(p); 
onPause 'На паузе' (e) = GROUP LAST isPause (TimeEntryPause p) IF timeEntry(p) == e;

calcPause 'Пауза, ч' (TimeEntryPause p) = hoursDiffDateTime(dateTimeRestart(p), dateTimePause(p));
totalPause (e) = GROUP SUM calcPause(TimeEntryPause p) IF timeEntry(p) == e;

prevCalcHours (TimeEntry e) = hoursDiffDateTime(dateTimeFinish(e), dateTimeStart(e)) - OVERRIDE totalPause(e),0;

//migratedEntry = DATA BOOLEAN ();
//onStarted() + { 
//    IF NOT migratedEntry() THEN {
//        FOR Activity a IS Activity DO NEW tt = TaskType {
//            name(tt) <- name(a);
//        }
//        FOR TimeEntry e IS TimeEntry AND NOT task(e) NEW t = Task DO {
//            userHours(e) <- prevCalcHours(e) WHERE NOT userHours(e);
//            project(t) <- project(e);
//            employee(t) <- employee(e);
//            taskType(t) <- [ GROUP BY name(TaskType tt) MAX tt](nameActivity(e));
//            completed(t) <- TRUE IF dateTimeFinish(e);
//            
//            task(e) <- t;
//        }
//
//        DELETE Activity a WHERE a IS Activity;
//        migratedEntry() <- TRUE;
//        APPLY;
//    }
//
//}