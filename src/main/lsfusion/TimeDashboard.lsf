MODULE TimeDashboard;

REQUIRE Time, Invoice, Person, ProjectDocument, Dashboard;

NAMESPACE Time;

FORM selectProject 'Выбор проекта'
    OBJECTS p = Project
    PROPERTIES(p) READONLY nameCustomer, name 
    FILTERS assigned(p, currentEmployee())
    ORDERS nameCustomer(p)
    FILTERGROUP activep FILTER 'Активный' active(customer(p)) 'F5' DEFAULT
;

FORM selectProjectMobile 'Выбор проекта'
    OBJECTS p = Project
    PROPERTIES(p) READONLY nameCustomer, name 
    FILTERS assigned(p, currentEmployee())
    ORDERS nameCustomer(p)
    FILTERGROUP activep FILTER 'Активный' active(customer(p)) 'F5' DEFAULT
;

DESIGN selectProjectMobile {
    GRID(p) {
        fontSize = 20;    
    }
    REMOVE TOOLBARLEFT(p);
    REMOVE PROPERTY(formRefresh());
    PROPERTY(formOk()) { fontSize = 20; }
    PROPERTY(formClose()) { fontSize = 20; }
}

visible 'Видимая' = DATA BOOLEAN (Task); // на всякий случай оставил, но потом надо удалить

invisible 'Невидимая' = DATA BOOLEAN (Task);

multipleBilling (Task t) = overMultipleBilling(practice(employee(t)));
hasTimeEntry (Employee e, Task t) = 
    GROUP SUM 1 IF employee(TimeEntry te) == e AND task(te) == t AND NOT employee(task(te)) == e;

isReadonlyTask (Task t) = t IS Task AND NOT employee(t) == currentEmployee();
showTask (Task t) = (t IS Task AND NOT invisible(t) AND NOT currentUser() IS Employee) OR
    ((employee(t) == currentEmployee() OR hasTimeEntry(currentEmployee(), t)) OR
    ((GROUP SUM 1 IF currentEmployee() == employee(Task task) AND project(task) == project(t) AND
    (status(t) == StatusTask.paused OR status(t) == StatusTask.inProcess)) AND
    (practice(t) == practice(currentUser()) OR NOT multipleBilling(practice(currentUser())))));

    
FORM contactsDocuments 'Контактные лица/документы'
    OBJECTS p = Project PANEL
    
    OBJECTS r = Person
    PROPERTIES(r) READONLY firstName, lastName, phone, email
    FILTERS customer(r) == customer(p)
    
    OBJECTS d = Document
    PROPERTIES(d) READONLY name, dateTimeLastVersion, nameAuthorLastVersion
    PROPERTIES(d) openLastVersion TOOLBAR SHOWIF lastVersion(d), loadLastVersionAndApply TOOLBAR
    PROPERTIES(p) newDocument TOOLBAR DRAW d
    PROPERTIES(d) NEWSESSION EDIT, DELETE
    FILTERS customer(d) == customer(p)
;

DESIGN contactsDocuments {
    OBJECTS {
        fill = 1;
        height = 200;
        width = 400;
        type = TABBED;
        MOVE BOX(r) {
            caption = 'Контактные лица';
        }
        MOVE BOX(d) {
            caption = 'Документы';
        }
    }
}

deleteTask 'Удалить' (Task t) {
    ASK 'Вы действительно хотите удалить задачу?' DO {
        NEWSESSION {
            markDelete(t) <- TRUE;
            IF status(t) == StatusTask.inProcess THEN {
                dateTimeFinish(TimeEntry e) <- currentDateTime() WHERE task(e) == t AND NOT dateTimeFinish(e);
            }
            completed(t) <- NULL;
            initPaused(t) <- NULL;
            markDeleteDateTime(t) <- currentDateTime();
            APPLY;
        }
    }
} IMAGE 'delete.png';

cancelDelete 'Восстановить' (Task t) {
    NEWSESSION {
        markDelete(t) <- NULL;
        markDeleteDateTime(t) <- NULL;
//        completed(t) <- TRUE;
        APPLY;
    }
}

validUser () = sid(mainRole(currentUser())) == 'admin' OR sid(mainRole(currentUser())) == 'partner';

order (Task t) = CASE 
    WHEN status(t) == StatusTask.paused THEN 1 
    WHEN status(t) == StatusTask.inProcess THEN 2 
    WHEN status(t) == StatusTask.completed THEN 3
    WHEN status(t) == StatusTask.markDelete THEN 4;

skipDeleteEdit (TimeEntry e) = e IS TimeEntry AND NOT (employee(e) == currentUser() OR employee(task(e)) == currentUser());
skipDeleteEdit (Task t) = t IS Task AND NOT employee(t) == currentUser();

deleteTimeEntry 'Удалить' (TimeEntry e) {
    IF e IS TimeEntry AND NOT employee(e) == currentUser() THEN {
        ASK 'Вы действительно хотите удалить выделенные трудозатраты?' DO {
            DELETE e;
        }
    } ELSE DELETE e;
} IMAGE 'delete.png';

FORM timeDashboard 'Отметка времени' AUTOREFRESH 60
    PROPERTIES currentDateTime()

//    OBJECTS p = Project
//    PROPERTIES(p) READONLY nameCustomer, name 
//    FILTERS assigned(p, currentEmployee())
//    ORDERS nameCustomer(p)
//    FILTERGROUP activep FILTER 'Активный' active(customer(p)) 'F5' DEFAULT
    
//    OBJECTS r = Person
//    PROPERTIES(r) READONLY firstName, lastName, phone, email
//    FILTERS customer(r) == customer(p)
//    
//    OBJECTS d = Document
//    PROPERTIES(d) READONLY name, dateTimeLastVersion, nameAuthorLastVersion
//    PROPERTIES(d) openLastVersion TOOLBAR SHOWIF lastVersion(d), loadLastVersionAndApply TOOLBAR
//    PROPERTIES(p) newDocument TOOLBAR DRAW d
//    PROPERTIES(d) NEWSESSION EDIT, DELETE
//    FILTERS customer(d) == customer(p)
    
    OBJECTS dates = (df = DATE, dt = DATE) PANEL
    PROPERTIES dFrom 'Дата с' = VALUE(df), dTo 'Дата по' = VALUE(dt)
    
    OBJECTS fe = Task
    PROPERTIES(fe) READONLY nameEmployee, nameStatus BACKGROUND background(fe), order SHOWIF NULL
    PROPERTIES(fe) nameCustomerProject ON CHANGE { DIALOG contactsDocuments OBJECTS p = project(fe); }
    PROPERTIES(fe) READONLY nameProject, nameTaskType, namePractice, nameParent, name, dateTimeStart, dateTimeFinish
    //FILTERS employee(fe) == currentEmployee()// AND (NOT inProcess(fe) OR onPause(fe))
    PROPERTIES(fe) invisible SHOWIF currentEmployee()//, markDelete READONLY 
    PROPERTIES(fe) SHOWIF currentEmployee() NEWSESSION NEW, ed = EDIT READONLYIF skipDeleteEdit(fe), deleteTask READONLYIF isReadonlyTask(fe) OR skipDeleteEdit(fe) SHOWIF NOT markDelete(fe),
        cancelDelete  READONLYIF isReadonlyTask(fe) SHOWIF markDelete(fe)
    FILTERS showTask(fe),
            markDeleteDateTime(fe) >= dateTimeToDateTime(sum(currentDate(), -1), currentTime()) OR NOT markDelete(fe),
            (DATE(dateTimeStart(fe)) >= df AND DATE(dateTimeStart(fe)) <= dt) OR (status(fe) == StatusTask.paused OR status(fe) == StatusTask.inProcess)
    ORDERS order(fe), nameCustomerProject(fe)
    FILTERGROUP  myTasks
        FILTER 'Мои задачи' employee(fe) == currentEmployee() OR hasTimeEntry(currentEmployee(), fe) DEFAULT
//    FILTERGROUP project
//        FILTER 'По проекту' project(fe) == p 'F9'
    FILTERGROUP active
        FILTER 'Активные' notCompleted(fe) OR dateFinish(fe) >= subtract(currentDate(), 1) DEFAULT 
        FILTER 'Активные (7 дней)' notCompleted(fe) OR dateFinish(fe) >= subtract(currentDate(), 7)
    
    OBJECTS ce = Task PANEL
    PROPERTIES(ce) READONLYIF isReadonlyTask(ce) nameCustomerAndProject ON CHANGE { changeCustomerProject(ce); }
    PROPERTIES(ce) READONLYIF isReadonlyTask(ce) nameTypePactice ON CHANGE { changeTaskType(ce); }, 
        name, dateTimeStart, currentHours, description PANEL
    FILTERS ce == fe AND NOT markDelete(fe)
                
    OBJECTS pa = TimeEntry
    PROPERTIES(pa) dateTimeCreated SHOWIF validUser() READONLY, nameEmployee READONLY, 
        dateTimeStart BACKGROUND dateTimeStartChanged(pa) AND validUser() READONLYIF NOT currentEmployee() == employee(pa),
        dateTimeStartChanged SHOWIF validUser() READONLY, 
        dateTimeFinish BACKGROUND dateTimeFinishChanged(pa) AND validUser() READONLYIF NOT currentEmployee() == employee(pa), 
        dateTimeFinishChanged SHOWIF validUser() READONLY, nameActivity READONLYIF NOT currentEmployee() == employee(pa), 
        hours BACKGROUND userHours(pa) READONLYIF NOT currentEmployee() == employee(pa), 
        comment PANEL READONLYIF NOT currentEmployee() == employee(pa)
    PROPERTIES(pa) SHOWIF currentEmployee() NEW, deleteTimeEntry READONLYIF skipDeleteEdit(pa)
    FILTERS task(pa) == fe
;

DESIGN timeDashboard {
    PROPERTY(comment(pa)) { caption = 'Описание проекта'; }
    TOOLBAR(pa) { MOVE PROPERTY(deleteTimeEntry(pa)); }
}

startTimeEntry 'Начать новую задачу' () { 
    IF currentEmployee() THEN {
        NEWSESSION {       
            NEW t = Task {
                employee(t) <- currentEmployee();
                DIALOG dialogTaskType OBJECTS g INPUT, a INPUT DO {
                    taskType(t) <- a;
                    practice(t) <- g;
                } ELSE
                    RETURN;
                DIALOG selectProject OBJECTS p INPUT DO {
                    project(t) <- p;
                } ELSE
                    RETURN;
                NEW e = TimeEntry {
                    task(e) <- t;
                    dateTimeStart(e) <- currentDateTime();
                }
                APPLY;
                SEEK timeDashboard.fe = t;
            }
        }
    } ELSE
        MESSAGE 'Вы должны быть залогинены под сотрудником, чтобы начать работу';
}

saveTimeDashboard 'Сохранить' () {
    APPLY;
} IMAGE 'save.png';

EXTEND FORM timeDashboard
    PROPERTIES startTimeEntry(), saveTimeDashboard()
;

DESIGN timeDashboard {
    NEW pane FIRST {
        fill = 1;
//        NEW projectPane {
//            fill = 1;
//            type = SPLITH; 
//            MOVE BOX(p);
////            NEW projectInfo {
////                fill = 2;
////                type = TABBED;
////                MOVE BOX(r) {
////                    caption = 'Контактные лица';
////                }
////                MOVE BOX(d) {
////                    caption = 'Документы';
////                }
////            }
//        }
        NEW tasks {
            fill = 2;
            caption = 'Трудозатраты';
            type = SPLITH;
            NEW current {
                caption = 'Текущее время';
                //MOVE PROPERTY(name(t)) { caption = 'Тип задачи'; alignment = STRETCH; }
                MOVE PROPERTY(startTimeEntry()) { fill = 1; }

                MOVE PROPERTY(nameCustomerAndProject(ce)) { alignment = STRETCH; }
                MOVE PROPERTY(nameTypePactice(ce)) { alignment = STRETCH; }
                MOVE PROPERTY(name(ce)) { alignment = STRETCH; }
                MOVE PROPERTY(dateTimeStart(ce)) { alignment = STRETCH; }
                MOVE PROPERTY(currentHours(ce)) { alignment = STRETCH; }
                MOVE PROPERTY(description(ce)) { panelCaptionVertical = TRUE; fill = 1; }
                NEW save {
                    alignment = STRETCH;
                    type = CONTAINERH;
                    MOVE PROPERTY(formApply()) { fill = 1; }
                    MOVE PROPERTY(formCancel()) { fill = 1; }
                }
            }
            NEW finished {
                fill = 2;
                type = SPLITV;
                MOVE BOX(fe) {
                    MOVE BOX(dates) FIRST;
                    fill = 2;
                    caption = 'Задачи';
                    TOOLBARRIGHT(fe) {
                        MOVE PROPERTY(deleteTask(fe));
                        MOVE PROPERTY(cancelDelete(fe));
                    }
                }
                NEW timeEntry {
                    fill = 1;
                    type = CONTAINERH;
                    MOVE BOX (pa) {
                        fill = 3;
                    }
                    MOVE PROPERTY(comment(pa)) {
                        panelCaptionVertical = TRUE;
                        fill = 1;
                    } 
                    TOOLBARRIGHT(pa) {
                        MOVE PROPERTY(saveTimeDashboard());
                    }
                }
            }
        }
    }
    
    TOOLBARLEFT {
        MOVE PROPERTY(currentDateTime()) {
            alignment = STRETCH;
            caption = 'Текущее время';
        }
    }
}

finish 'Завершить' (Task t)  { 
    APPLY;
    
    NEWSESSION { 
        dateTimeFinish(TimeEntry e) <- currentDateTime() WHERE task(e) == t AND NOT dateTimeFinish(e);
        completed(t) <- TRUE;
        initPaused(t) <- NULL;
        DIALOG task OBJECTS t = t DO {
            SEEK timeDashboard.fe = t;
        }
    }
}

finishNoDialog 'Завершить' (Task t) {
    NEWSESSION { 
        dateTimeFinish(TimeEntry e) <- currentDateTime() WHERE task(e) == t AND NOT dateTimeFinish(e);
        completed(t) <- TRUE;
        initPaused(t) <- NULL;
        APPLY;
    }
} CONFIRM;

pause 'Приостановить' (Task t)  { 
    IF employee(t) == currentEmployee()  THEN {
        NEWSESSION {
            dateTimeFinish(TimeEntry e) <- currentDateTime() WHERE task(e) == t AND NOT dateTimeFinish(e);
            initPaused(t) <- TRUE;
            APPLY;
        }
    }  ELSE IF hasTimeEntry(currentEmployee(), t) THEN {
        dateTimeFinish(TimeEntry e) <- currentDateTime() WHERE task(e) == t AND NOT dateTimeFinish(e) AND employee(e) == currentUser();
        initPaused(t) <- TRUE;
        APPLY;
    } ELSE
        MESSAGE 'Вы должны быть залогинены под сотрудником, чтобы начать работу';
}

restart 'Возобновить выбранную' (Task t)  { 
    IF employee(t) == currentEmployee()  THEN {
        IF completed(t) THEN {
            ASK 'Вы действительно хотите возобновить уже завершенную задачу ?' DO {
                NEWSESSION {
                    NEW e = TimeEntry {
                        task(e) <- t;
                        dateTimeStart(e) <- currentDateTime();
                    }
                    completed(t) <- NULL;
                    APPLY;
                }
            }
        } ELSE 
            NEWSESSION {
                NEW e = TimeEntry {
                    task(e) <- t;
                    dateTimeStart(e) <- currentDateTime();
                    initPaused(t) <- NULL;
                }
                APPLY;
            }
    } ELSE IF hasTimeEntry(currentEmployee(), t) THEN {
        IF completed(t) THEN {
            ASK 'Вы действительно хотите возобновить уже завершенную задачу ?' DO {
                NEWSESSION {
                    NEW e = TimeEntry {
                        task(e) <- t;
                        dateTimeStart(e) <- currentDateTime();
                    }
                    completed(t) <- NULL;
                    APPLY;
                }
            }
        } ELSE 
            NEWSESSION {
                NEW e = TimeEntry {
                    task(e) <- t;
                    dateTimeStart(e) <- currentDateTime();
                    initPaused(t) <- NULL;
                }
                APPLY;
            }
    } ELSE
        MESSAGE 'Вы должны быть залогинены под сотрудником, чтобы начать работу';
}

isReadonlyTaskMultiple (Task t) = t IS Task AND NOT (employee(t) == currentEmployee() OR hasTimeEntry(currentEmployee(), t));

EXTEND FORM timeDashboard
    PROPERTIES(ce) READONLYIF isReadonlyTaskMultiple(ce) restart SHOWIF NOT inProcess(ce), 
        pause SHOWIF inProcess(ce)
    PROPERTIES(ce) READONLYIF isReadonlyTask(ce) finish SHOWIF NOT completed(ce)
//    PROPERTIES(fe) READONLYIF isReadonlyTask(ce) restart SHOWIF currentEmployee()
//    PROPERTIES(fe) READONLYIF isReadonlyTask(ce) finish SHOWIF currentEmployee()
;

DESIGN timeDashboard {
    current {
        MOVE PROPERTY(finish(ce)) { alignment = STRETCH; fontStyle = 'bold'; }
        //MOVE PROPERTY(finish(fe)) { alignment = STRETCH; fontStyle = 'bold'; }
        MOVE PROPERTY(pause(ce)) { alignment = STRETCH; }
        MOVE PROPERTY(restart(ce)) { alignment = STRETCH; fontStyle = 'bold'; }
        MOVE PROPERTY(startTimeEntry()) { fontStyle = 'bold'; }
    }
}

NAVIGATOR {
    dashboard {
        NEW timeDashboard;
    }
}

filterEmployee = DATA LOCAL Employee();
nameFilterEmployee 'Сотрудник' () = name(filterEmployee()) CHARWIDTH 30;

editTask 'Редактировать задачу' (TimeEntry te) {
    NEWSESSION SHOW task OBJECTS t = task(te) DOCKED;
} IMAGE 'edit.png';

seriesNumberInvoice 'Cчет' (TimeEntry te) = seriesNumber(invoice(te));

changeFilterEmployee() {
    IF NOT (nameCategory(currentUser()) == 'Партнер' OR nameCategory(currentUser()) == 'Тестовая' OR nameCategory(currentUser()) == 'Аналитик') THEN RETURN;
    ELSE DIALOG dialogEmployee OBJECTS e INPUT DO {
        filterEmployee() <- e;
    }
}

FORM timeEntriesEmployee 'Просмотр трудозатрат'
    OBJECTS dates = (df = DATE, dt = DATE) PANEL 
    PROPERTIES 'Дата с' = VALUE (df), 'Дата по' = VALUE (dt), nameFilterEmployee() DRAW dates ON CHANGE { changeFilterEmployee(); }
    
    OBJECTS t = TimeEntry
    PROPERTIES (t) READONLY dateTimeCreated SHOWIF validUser(), nameEmployee SHOWIF NOT filterEmployee(), nameCustomerProject, 
        nameProject, dateStart BACKGROUND dateTimeStartChanged(t) AND validUser(), dateTimeStartChanged SHOWIF validUser() AND dateTimeStartChanged(t), 
        dateFinish BACKGROUND dateTimeFinishChanged(t) AND validUser(), dateTimeFinishChanged SHOWIF validUser() AND dateTimeFinishChanged(t),
        nameTaskType, nameTask, nameActivity, descriptionTask, comment, hours
    PROPERTIES seriesNumberInvoice(t) ON CHANGE { SHOW invoice OBJECTS i = invoice(t) DOCKED; }
    PROPERTIES editTask(t) TOOLBAR            
    FILTERS employee(t) == filterEmployee() OR NOT filterEmployee(),
            dateFinish(t) >= df AND dateStart(t) <= dt,
            NOT markDelete(task(t))
    
    EVENTS ON INIT {
        filterEmployee() <- currentUser();
        SEEK timeEntriesEmployee.dates OBJECTS df = subtract(currentDate(), INTEGER (numberM(extractDOW(currentDate()))));
    }
;

NAVIGATOR {
    dashboard {
        NEW timeEntriesEmployee;
    }
}