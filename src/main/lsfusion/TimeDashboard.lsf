MODULE TimeDashboard;

REQUIRE Time, Invoice, Person, ProjectDocument, Dashboard;

NAMESPACE Time;

FORM selectProject 'Выбор проекта'
    OBJECTS p = Project
    PROPERTIES(p) READONLY nameCustomer, name 
    FILTERS assigned(p, currentEmployee())
    ORDERS nameCustomer(p)
    FILTERGROUP activep FILTER 'Активный' active(customer(p)) 'F5' DEFAULT
;

visible 'Видимая' = DATA BOOLEAN (Task);

isReadonlyTask (Task t) = t IS Task AND NOT employee(t) == currentEmployee();
showTask (Task t) = (GROUP SUM 1 IF currentEmployee() == employee(Task task) AND project(task) == project(t) AND
    (status(t) ==  StatusTask.paused OR status(t) == StatusTask.inProcess)) OR currentEmployee() == employee(t);
    
FORM contactsDocuments 'Контактные лица/документы'
    OBJECTS p = Project PANEL
    
    OBJECTS r = Person
    PROPERTIES(r) READONLY firstName, lastName, phone, email
    FILTERS customer(r) == customer(p)
    
    OBJECTS d = Document
    PROPERTIES(d) READONLY name, dateTimeLastVersion, nameAuthorLastVersion
    PROPERTIES(d) openLastVersion TOOLBAR SHOWIF lastVersion(d), loadLastVersionAndApply TOOLBAR
    PROPERTIES(p) newDocument TOOLBAR DRAW d
    PROPERTIES(d) NEWSESSION EDIT, DELETE
    FILTERS customer(d) == customer(p)
;

DESIGN contactsDocuments {
    OBJECTS {
        fill = 1;
        height = 200;
        width = 400;
        type = TABBED;
        MOVE BOX(r) {
            caption = 'Контактные лица';
        }
        MOVE BOX(d) {
            caption = 'Документы';
        }
    }
}

deleteTask 'Удалить' (Task t) {
    ASK 'Вы действительно хотите удалить задачу?' DO {
        NEWSESSION {
            markDelete(t) <- TRUE;
            IF status(t) == StatusTask.inProcess THEN {
                dateTimeFinish(TimeEntry e) <- currentDateTime() WHERE task(e) == t AND NOT dateTimeFinish(e);
            }
            completed(t) <- NULL;
            initPaused(t) <- NULL;
            markDeleteDateTime(t) <- currentDateTime();
            APPLY;
        }
    }
} IMAGE 'delete.png';

cancelDelete 'Отменить удаление' (Task t) {
    NEWSESSION {
        markDelete(t) <- NULL;
        markDeleteDateTime(t) <- NULL;
        completed(t) <- TRUE;
        APPLY;
    }
}

validUser () = sid(mainRole(currentUser())) == 'admin' OR sid(mainRole(currentUser())) == 'partner';

FORM timeDashboard 'Отметка времени' AUTOREFRESH 60
    PROPERTIES currentDateTime()

//    OBJECTS p = Project
//    PROPERTIES(p) READONLY nameCustomer, name 
//    FILTERS assigned(p, currentEmployee())
//    ORDERS nameCustomer(p)
//    FILTERGROUP activep FILTER 'Активный' active(customer(p)) 'F5' DEFAULT
    
//    OBJECTS r = Person
//    PROPERTIES(r) READONLY firstName, lastName, phone, email
//    FILTERS customer(r) == customer(p)
//    
//    OBJECTS d = Document
//    PROPERTIES(d) READONLY name, dateTimeLastVersion, nameAuthorLastVersion
//    PROPERTIES(d) openLastVersion TOOLBAR SHOWIF lastVersion(d), loadLastVersionAndApply TOOLBAR
//    PROPERTIES(p) newDocument TOOLBAR DRAW d
//    PROPERTIES(d) NEWSESSION EDIT, DELETE
//    FILTERS customer(d) == customer(p)
    
    OBJECTS fe = Task
    PROPERTIES(fe) READONLY nameEmployee, nameStatus BACKGROUND background(fe)
    PROPERTIES(fe) nameCustomerProject ON CHANGE { DIALOG contactsDocuments OBJECTS p = project(fe); }
    PROPERTIES(fe) READONLY nameProject, nameTaskType, namePractice, nameParent, name, dateTimeStart, dateTimeFinish
    //FILTERS employee(fe) == currentEmployee()// AND (NOT inProcess(fe) OR onPause(fe))
    PROPERTIES(fe) visible SHOWIF currentEmployee()//, markDelete READONLY 
    PROPERTIES(fe) SHOWIF currentEmployee() NEWSESSION NEW, ed = EDIT, deleteTask READONLYIF isReadonlyTask(fe) SHOWIF NOT markDelete(fe),
        cancelDelete  READONLYIF isReadonlyTask(fe) SHOWIF markDelete(fe)
    FILTERS showTask(fe) OR (NOT(currentUser() IS Employee) AND visible(fe)),
            markDeleteDateTime(fe) >= dateTimeToDateTime(sum(currentDate(), -1), currentTime()) OR NOT markDelete(fe)
    ORDERS nameCustomerProject(fe)
    FILTERGROUP  myTasks
        FILTER 'Мои задачи' employee(fe) == currentEmployee() DEFAULT
//    FILTERGROUP project
//        FILTER 'По проекту' project(fe) == p 'F9'
    FILTERGROUP active
        FILTER 'Активные' notCompleted(fe) OR dateFinish(fe) >= subtract(currentDate(), 1) DEFAULT 
    
    OBJECTS ce = Task PANEL
    PROPERTIES(ce) nameCustomerProject READONLY
    PROPERTIES(ce) READONLYIF isReadonlyTask(ce) nameProject, nameTaskType  ON CHANGE { changeTaskType(ce); }, namePractice READONLY, 
        name, dateTimeStart, currentHours, description PANEL
    FILTERS ce == fe AND NOT markDelete(fe), active(taskType(ce))
    ORDERS nameCustomerProject(ce)
    
    OBJECTS t = TaskType PANEL
    PROPERTIES(t) SELECTOR name SHOWIF NOT ce
    //PROPERTIES startTimeEntry(t)
                
    OBJECTS pa = TimeEntry
    PROPERTIES (pa) READONLY dateTimeCreated SHOWIF validUser(), nameEmployee, dateTimeStart BACKGROUND dateTimeStartChanged(pa) AND validUser(),
        dateTimeStartChanged SHOWIF validUser() AND dateTimeStartChanged(pa), dateTimeFinish BACKGROUND dateTimeFinishChanged(pa) AND validUser(), 
        dateTimeFinishChanged SHOWIF validUser() AND dateTimeFinishChanged(pa), nameActivity, hours BACKGROUND userHours(pa), comment PANEL
    FILTERS task(pa) == fe
;

startTimeEntry 'Начать новую задачу' (TaskType tt) { 
    IF currentEmployee() THEN {
        NEWSESSION {
            DIALOG selectProject OBJECTS p INPUT DO {
                NEW t = Task {
                    employee(t) <- currentEmployee();
                    project(t) <- p;
                    taskType(t) <- tt;
                    practice(t) <- GROUP MAX Practice pp IF in(tt, pp);
                    NEW e = TimeEntry {
                        task(e) <- t;
                        dateTimeStart(e) <- currentDateTime();
                    }
                    APPLY;
                    SEEK timeDashboard.fe = t;
                }
            }
            //APPLY;
        }
    } ELSE
        MESSAGE 'Вы должны быть залогинены под сотрудником, чтобы начать работу';
}

EXTEND FORM timeDashboard
    PROPERTIES startTimeEntry(t)
;

DESIGN timeDashboard {
    NEW pane FIRST {
        type = SPLITV;
        fill = 1;
//        NEW projectPane {
//            fill = 1;
//            type = SPLITH; 
//            MOVE BOX(p);
////            NEW projectInfo {
////                fill = 2;
////                type = TABBED;
////                MOVE BOX(r) {
////                    caption = 'Контактные лица';
////                }
////                MOVE BOX(d) {
////                    caption = 'Документы';
////                }
////            }
//        }
        NEW tasks {
            fill = 2;
            caption = 'Трудозатраты';
            type = SPLITH;
            NEW current {
                caption = 'Текущее время';
                MOVE PROPERTY(name(t)) { caption = 'Тип задачи'; alignment = STRETCH; }
                MOVE PROPERTY(startTimeEntry(t)) { fill = 1; }

                MOVE PROPERTY(nameCustomerProject(ce)) { alignment = STRETCH; }
                MOVE PROPERTY(nameProject(ce)) { alignment = STRETCH; }
                MOVE PROPERTY(nameTaskType(ce)) { alignment = STRETCH; }
                MOVE PROPERTY(namePractice(ce)) { alignment = STRETCH; }
                MOVE PROPERTY(name(ce)) { alignment = STRETCH; }
                MOVE PROPERTY(dateTimeStart(ce)) { alignment = STRETCH; }
                MOVE PROPERTY(currentHours(ce)) { alignment = STRETCH; }
                MOVE PROPERTY(description(ce)) { panelCaptionAbove = TRUE; fill = 1; }
                NEW save {
                    alignment = STRETCH;
                    type = CONTAINERH;
                    MOVE PROPERTY(formApply()) { fill = 1; }
                    MOVE PROPERTY(formCancel()) { fill = 1; }
                }
            }
            NEW finished {
                fill = 2;
                type = SPLITV;
                MOVE BOX(fe) {
                    fill = 2;
                    caption = 'Задачи';
                    TOOLBARRIGHT(fe) {
                        MOVE PROPERTY(deleteTask(fe));
                        MOVE PROPERTY(cancelDelete(fe));
                    }
                }
                NEW timeEntry {
                    fill = 1;
                    type = CONTAINERH;
                    MOVE BOX (pa) {
                        fill = 3;
                    }
                    MOVE PROPERTY(comment(pa)) {
                        panelCaptionAbove = TRUE;
                        fill = 1;
                    } 
                }
            }
        }
    }
    
    TOOLBARLEFT {
        MOVE PROPERTY(currentDateTime()) {
            alignment = STRETCH;
            caption = 'Текущее время';
        }
    }
}

finish 'Завершить' (Task t)  { 
    APPLY;
    
    NEWSESSION { 
        dateTimeFinish(TimeEntry e) <- currentDateTime() WHERE task(e) == t AND NOT dateTimeFinish(e);
        completed(t) <- TRUE;
        initPaused(t) <- NULL;
        DIALOG task OBJECTS t = t DO {
            SEEK timeDashboard.fe = t;
        }
    }
}

pause 'Приостановить' (Task t)  { 
    IF employee(t) == currentEmployee()  THEN {
        NEWSESSION {
            dateTimeFinish(TimeEntry e) <- currentDateTime() WHERE task(e) == t AND NOT dateTimeFinish(e);
            initPaused(t) <- TRUE;
            APPLY;
        }
    } ELSE
        MESSAGE 'Вы должны быть залогинены под сотрудником, чтобы начать работу';
}

restart 'Возобновить выбранную' (Task t)  { 
    IF employee(t) == currentEmployee()  THEN {
        IF completed(t) THEN {
            ASK 'Вы действительно хотите возобновить уже завершенную задачу ?' DO {
                NEWSESSION {
                    NEW e = TimeEntry {
                        task(e) <- t;
                        dateTimeStart(e) <- currentDateTime();
                    }
                    completed(t) <- NULL;
                    APPLY;
                }
            }
        } ELSE 
            NEWSESSION {
                NEW e = TimeEntry {
                    task(e) <- t;
                    dateTimeStart(e) <- currentDateTime();
                    initPaused(t) <- NULL;
                }
                APPLY;
            }
    } ELSE
        MESSAGE 'Вы должны быть залогинены под сотрудником, чтобы начать работу';
}

EXTEND FORM timeDashboard
    PROPERTIES(ce) READONLYIF isReadonlyTask(ce) finish SHOWIF NOT completed(ce), pause SHOWIF inProcess(ce), restart SHOWIF NOT inProcess(ce)
//    PROPERTIES(fe) READONLYIF isReadonlyTask(ce) restart SHOWIF currentEmployee()
//    PROPERTIES(fe) READONLYIF isReadonlyTask(ce) finish SHOWIF currentEmployee()
;

DESIGN timeDashboard {
    current {
        MOVE PROPERTY(finish(ce)) { alignment = STRETCH; fontStyle = 'bold'; }
        //MOVE PROPERTY(finish(fe)) { alignment = STRETCH; fontStyle = 'bold'; }
        MOVE PROPERTY(pause(ce)) { alignment = STRETCH; }
        MOVE PROPERTY(restart(ce)) { alignment = STRETCH; fontStyle = 'bold'; }
        MOVE PROPERTY(startTimeEntry(t)) { fontStyle = 'bold'; }
    }
}

NAVIGATOR {
    dashboard {
        NEW timeDashboard;
    }
}

filterEmployee = DATA LOCAL Employee();
nameFilterEmployee 'Сотрудник' () = name(filterEmployee()) CHARWIDTH 30;

editTask 'Редактировать задачу' (TimeEntry te) {
    NEWSESSION SHOW task OBJECTS t = task(te) DOCKED;
} IMAGE 'edit.png';

seriesNumberInvoice 'Cчет' (TimeEntry te) = seriesNumber(invoice(te));

FORM timeEntriesEmployee 'Просмотр трудозатрат'
    OBJECTS dates = (df = DATE, dt = DATE) PANEL 
    PROPERTIES 'Дата с' = VALUE (df), 'Дата по' = VALUE (dt), nameFilterEmployee() DRAW dates
    
    OBJECTS t = TimeEntry
    PROPERTIES (t) READONLY dateTimeCreated SHOWIF validUser(), nameEmployee SHOWIF NOT filterEmployee(), nameCustomerProject, 
        nameProject, dateStart BACKGROUND dateTimeStartChanged(t) AND validUser(), dateTimeStartChanged SHOWIF validUser() AND dateTimeStartChanged(t), 
        dateFinish BACKGROUND dateTimeFinishChanged(t) AND validUser(), dateTimeFinishChanged SHOWIF validUser() AND dateTimeFinishChanged(t),
        nameTaskType, nameTask, nameActivity, descriptionTask, comment, hours
    PROPERTIES seriesNumberInvoice(t) ON CHANGE { SHOW invoice OBJECTS i = invoice(t) DOCKED; }
    PROPERTIES editTask(t) TOOLBAR            
    FILTERS employee(t) == filterEmployee() OR NOT filterEmployee(),
            dateFinish(t) >= df AND dateStart(t) <= dt
    
    EVENTS ON INIT {
        filterEmployee() <- currentUser();
        SEEK timeEntriesEmployee.dates OBJECTS df = subtract(currentDate(), INTEGER (numberM(extractDOW(currentDate()))));
    }
;

NAVIGATOR {
    dashboard {
        NEW timeEntriesEmployee;
    }
}