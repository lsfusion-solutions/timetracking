MODULE TimeDashboard;

REQUIRE Time, Invoice, Person, ProjectDocument, Dashboard;

NAMESPACE Time;

startTimeEntry 'Начать новую задачу' (Project p, TaskType tt)  { 
    IF currentEmployee() THEN {
        NEWSESSION {
            NEW t = Task {
                employee(t) <- currentEmployee();
                project(t) <- p;
                taskType(t) <- tt;
                NEW e = TimeEntry {
                    task(e) <- t;
                    dateTimeStart(e) <- currentDateTime();
                }
            }
            APPLY;
        }
    } ELSE
        MESSAGE 'Вы должны быть залогинены под сотрудником, чтобы начать работу';
}

visible 'Видимая' = DATA BOOLEAN (Task);

isReadonlyTask (Task t) = t IS Task AND NOT employee(t) == currentEmployee();
showTask (Task t) = (GROUP SUM 1 IF currentEmployee() == employee(Task task) AND project(task) == project(t) AND
    (status(t) ==  StatusTask.paused OR status(t) == StatusTask.inProcess)) OR currentEmployee() == employee(t);

FORM timeDashboard 'Отметка времени' AUTOREFRESH 60
    PROPERTIES currentDateTime()

    OBJECTS p = Project
    PROPERTIES(p) READONLY nameCustomer, name
    FILTERS assigned(p, currentEmployee())
    ORDERS nameCustomer(p)
    FILTERGROUP activep FILTER 'Активный' active(customer(p)) 'F5' DEFAULT
    
    OBJECTS r = Person
    PROPERTIES(r) READONLY firstName, lastName, phone, email
    FILTERS customer(r) == customer(p)
    
    OBJECTS d = Document
    PROPERTIES(d) READONLY name, dateTimeLastVersion, nameAuthorLastVersion
    PROPERTIES(d) openLastVersion TOOLBAR SHOWIF lastVersion(d), loadLastVersionAndApply TOOLBAR
    PROPERTIES(p) newDocument TOOLBAR DRAW d
    PROPERTIES(d) NEWSESSION EDIT, DELETE
    FILTERS customer(d) == customer(p)
    
    OBJECTS fe = Task
    PROPERTIES(fe) READONLY nameStatus BACKGROUND background(fe), nameCustomerProject, nameProject, nameTaskType, name, dateTimeStart, dateTimeFinish
    //FILTERS employee(fe) == currentEmployee()// AND (NOT inProcess(fe) OR onPause(fe))
    PROPERTIES(fe) visible SHOWIF currentEmployee()
    PROPERTIES(fe) SHOWIF currentEmployee() NEWSESSION NEW, EDIT, DELETE READONLYIF isReadonlyTask(fe)
    FILTERS showTask(fe) OR (NOT(currentUser() IS Employee) AND visible(fe))
    ORDERS nameCustomerProject(fe)
    FILTERGROUP  myTasks
        FILTER 'Мои задачи' employee(fe) == currentEmployee() DEFAULT
    FILTERGROUP project
        FILTER 'По проекту' project(fe) == p 'F9'
    FILTERGROUP active
        FILTER 'Активные' notCompleted(fe) OR dateFinish(fe) >= subtract(currentDate(), 1) DEFAULT 
    
    OBJECTS ce = Task PANEL
    PROPERTIES(ce) nameCustomerProject READONLY
    PROPERTIES(ce) READONLYIF isReadonlyTask(ce) nameProject, nameTaskType, name, dateTimeStart, currentHours, description PANEL
    FILTERS ce == fe//employee(ce) == currentEmployee() AND inProcess(ce)
    ORDERS nameCustomerProject(ce)
    
    OBJECTS t = TaskType PANEL
    PROPERTIES(t) SELECTOR name SHOWIF NOT ce
    PROPERTIES startTimeEntry(p, t) SHOWIF NOT ce
                
    OBJECTS pa = TimeEntry
    PROPERTIES (pa) READONLY dateTimeStart, dateTimeFinish, nameActivity, hours BACKGROUND userHours(pa), comment PANEL
    FILTERS task(pa) == fe
;

DESIGN timeDashboard {
    NEW pane FIRST {
        type = SPLITV;
        fill = 1;
        NEW projectPane {
            fill = 1;
            type = SPLITH; 
            MOVE BOX(p);
            NEW projectInfo {
                fill = 2;
                type = TABBED;
                MOVE BOX(r) {
                    caption = 'Контактные лица';
                }
                MOVE BOX(d) {
                    caption = 'Документы';
                }
            }
        }
        NEW tasks {
            fill = 2;
            caption = 'Трудозатраты';
            type = SPLITH;
            NEW current {
                caption = 'Текущее время';
                MOVE PROPERTY(name(t)) { caption = 'Тип задачи'; alignment = STRETCH; }
                MOVE PROPERTY(startTimeEntry(p, t)) { fill = 1; }

                MOVE PROPERTY(nameCustomerProject(ce)) { alignment = STRETCH; }
                MOVE PROPERTY(nameProject(ce)) { alignment = STRETCH; }
                MOVE PROPERTY(nameTaskType(ce)) { alignment = STRETCH; }
                MOVE PROPERTY(name(ce)) { alignment = STRETCH; }
                MOVE PROPERTY(dateTimeStart(ce)) { alignment = STRETCH; }
                MOVE PROPERTY(currentHours(ce)) { alignment = STRETCH; }
                MOVE PROPERTY(description(ce)) { panelCaptionAbove = TRUE; fill = 1; }
                NEW save {
                    alignment = STRETCH;
                    type = CONTAINERH;
                    MOVE PROPERTY(formApply()) { fill = 1; }
                    MOVE PROPERTY(formCancel()) { fill = 1; }
                }
            }
            NEW finished {
                fill = 2;
                type = SPLITV;
                MOVE BOX(fe) {
                    fill = 2;
                    caption = 'Задачи';
                }
                NEW timeEntry {
                    fill = 1;
                    type = CONTAINERH;
                    MOVE BOX (pa) {
                        fill = 3;
                    }
                    MOVE PROPERTY(comment(pa)) {
                        panelCaptionAbove = TRUE;
                        fill = 1;
                    } 
                }
            }
        }
    }
    
    TOOLBARLEFT {
        MOVE PROPERTY(currentDateTime()) {
            alignment = STRETCH;
            caption = 'Текущее время';
        }
    }
}

finish 'Завершить' (Task t)  { 
    APPLY;
    
    NEWSESSION { 
        dateTimeFinish(TimeEntry e) <- currentDateTime() WHERE task(e) == t AND NOT dateTimeFinish(e);
        completed(t) <- TRUE;
        initPaused(t) <- NULL;
        DIALOG task OBJECTS t = t DO {
            SEEK timeDashboard.fe = t;
        }
    }
}

pause 'Приостановить' (Task t)  { 
    IF employee(t) == currentEmployee()  THEN {
        NEWSESSION {
            dateTimeFinish(TimeEntry e) <- currentDateTime() WHERE task(e) == t AND NOT dateTimeFinish(e);
            initPaused(t) <- TRUE;
            APPLY;
        }
    } ELSE
        MESSAGE 'Вы должны быть залогинены под сотрудником, чтобы начать работу';
}

restart 'Возобновить выбранную' (Task t)  { 
    IF employee(t) == currentEmployee()  THEN {
        IF completed(t) THEN {
            ASK 'Вы действительно хотите возобновить уже завершенную задачу ?' DO {
                NEWSESSION {
                    NEW e = TimeEntry {
                        task(e) <- t;
                        dateTimeStart(e) <- currentDateTime();
                    }
                    completed(t) <- NULL;
                    APPLY;
                }
            }
        } ELSE 
            NEWSESSION {
                NEW e = TimeEntry {
                    task(e) <- t;
                    dateTimeStart(e) <- currentDateTime();
                    initPaused(t) <- NULL;
                }
                APPLY;
            }
    } ELSE
        MESSAGE 'Вы должны быть залогинены под сотрудником, чтобы начать работу';
}

EXTEND FORM timeDashboard
    PROPERTIES(ce) READONLYIF isReadonlyTask(ce) finish, pause SHOWIF inProcess(ce), restart SHOWIF NOT inProcess(ce)
//    PROPERTIES(fe) READONLYIF isReadonlyTask(ce) restart SHOWIF currentEmployee()
//    PROPERTIES(fe) READONLYIF isReadonlyTask(ce) finish SHOWIF currentEmployee()
;

DESIGN timeDashboard {
    current {
        MOVE PROPERTY(finish(ce)) { alignment = STRETCH; fontStyle = 'bold'; }
        //MOVE PROPERTY(finish(fe)) { alignment = STRETCH; fontStyle = 'bold'; }
        MOVE PROPERTY(pause(ce)) { alignment = STRETCH; }
        MOVE PROPERTY(restart(ce)) { alignment = STRETCH; fontStyle = 'bold'; }
    }
}

NAVIGATOR {
    dashboard {
        NEW timeDashboard;
    }
}

filterEmployee = DATA LOCAL Employee();
nameFilterEmployee 'Сотрудник' () = name(filterEmployee()) CHARWIDTH 30;

editTask 'Редактировать задачу' (TimeEntry te) {
    NEWSESSION SHOW task OBJECTS t = task(te) DOCKED;
} IMAGE 'edit.png';

seriesNumberInvoice 'Cчет' (TimeEntry te) = seriesNumber(invoice(te));

FORM timeEntriesEmployee 'Просмотр трудозатрат'
    OBJECTS dates = (df = DATE, dt = DATE) PANEL 
    PROPERTIES 'Дата с' = VALUE (df), 'Дата по' = VALUE (dt), nameFilterEmployee() DRAW dates
    
    OBJECTS t = TimeEntry
    PROPERTIES (t) READONLY nameEmployee SHOWIF NOT filterEmployee(), nameCustomerProject, nameProject, dateStart, dateFinish, 
                            nameTaskType, nameTask, nameActivity, comment, hours
    PROPERTIES READONLY seriesNumberInvoice(t)
    PROPERTIES editTask(t) TOOLBAR            
    FILTERS employee(t) == filterEmployee() OR NOT filterEmployee(),
            dateFinish(t) >= df AND dateStart(t) <= dt
    
    EVENTS ON INIT {
        filterEmployee() <- currentUser();
        SEEK timeEntriesEmployee.dates OBJECTS df = subtract(currentDate(), INTEGER (numberM(extractDOW(currentDate()))));
    }
;

NAVIGATOR {
    dashboard {
        NEW timeEntriesEmployee;
    }
}