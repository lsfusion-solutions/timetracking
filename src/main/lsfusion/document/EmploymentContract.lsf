MODULE EmploymentContract;

REQUIRE Doc, OpenCV, EGRUL, Person;

PRIORITY LegalEntity;

NAMESPACE EmploymentContract;

defaultEmplomentContractTemplate 'Шаблон трудового договора по умолчанию' = DATA Template();
nameDefaultEmplomentContractTemplate 'Шаблон трудового договора по умолчанию' () = name(defaultEmplomentContractTemplate());

defaultEmplomentContractTemplateCEO 'Шаблон трудового договора (ген. дир.)' = DATA Template();
nameDefaultEmplomentContractTemplateCEO 'Шаблон трудового договора (ген. дир.)' () = name(defaultEmplomentContractTemplateCEO());

generateEmployeeAgreement 'Создать шаблон для трудового договора' ()  { 
    NEWSESSION {
        NEW t = Template {
            NEW e = TemplateEntry {
                template(e) <- t;
                key(e) <- 'TABLE';
                type(e) <- Word.Type.table;
                dataColumnSeparator(e) <- 'lsFusionCSep';
                dataRowSeparator(e) <- 'lsFusionRSep';
            }

            NEW te = TemplateEntry { key(te) <- '\{ДОГОВОР.НОМЕР\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{ДОГОВОР.ГОРОД\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{ДОГОВОР.ДАТА\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{АСБ_КЛИЕНТ.ФОРМА_ХОЗЯЙСТВА_ПОЛНАЯ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{АСБ_КЛИЕНТ.НАЗВАНИЕ_ОРГАНИЗАЦИИ_ПОЛНОЕ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{АСБ_КЛИЕНТ.ФОРМА_ХОЗЯЙСТВА_КРАТКАЯ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{АСБ_КЛИЕНТ.НАЗВАНИЕ_ОРГАНИЗАЦИИ_КРАТКОЕ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{АСБ_КЛИЕНТ.ЮР_АДРЕС\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{АСБ_КЛИЕНТ.ПРЕДСТАВИТЕЛЬ_ДОЛЖНОСТЬ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{АСБ_КЛИЕНТ.ПРЕДСТАВИТЕЛЬ_ДОЛЖНОСТЬ2\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{АСБ_КЛИЕНТ.ПРЕДСТАВИТЕЛЬ_ФИО_ПОЛНОЕ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{АСБ_КЛИЕНТ.ПРЕДСТАВИТЕЛЬ_ФИО_ПОЛНОЕ_РОДИТЕЛЬНЫЙ_ПАДЕЖ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{АСБ_КЛИЕНТ.ПРЕДСТАВИТЕЛЬ_ФИО_КРАТКОЕ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{АСБ_КЛИЕНТ.ПРЕДСТАВИТЕЛЬ_ОСНОВАНИЕ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{АСБ_КЛИЕНТ.ИНН\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{АСБ_КЛИЕНТ.КПП\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{АСБ_КЛИЕНТ.БАНК_НАЗВАНИЕ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{АСБ_КЛИЕНТ.БАНК_БИК\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{АСБ_КЛИЕНТ.БАНК_СЧЁТ_КОР\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{АСБ_КЛИЕНТ.БАНК_СЧЁТ_РАС\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{СОТРУДНИК.ДОЛЖНОСТЬ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{СОТРУДНИК.ФИО_ПОЛНОЕ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{СОТРУДНИК.ФИО_ПОЛНОЕ_РОДИТЕЛЬНЫЙ_ПАДЕЖ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{СОТРУДНИК.ФИО_КРАТКОЕ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{ДОГОВОР.МЕСТО_РАБОТЫ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{ДОГОВОР.ДАТА_НАЧАЛА_ИСПОЛНЕНИЯ_ТРУДОВЫХ_ОБЯЗАННОСТЕЙ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{ДОГОВОР.ПРОДОЛЖИТЕЛЬНОСТЬ_ИСПЫТАТЕЛЬНОГО_СРОКА\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{ДОГОВОР.РАЗМЕР_ОКЛАДА\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{СОТРУДНИК.ДАТА_РОЖДЕНИЯ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{СОТРУДНИК.ПАСПОРТ_СЕРИЯ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{СОТРУДНИК.ПАСПОРТ_НОМЕР\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{СОТРУДНИК.ПАСПОРТ_ОРГАН_ВЫДАВШИЙ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{СОТРУДНИК.ПАСПОРТ_ДАТА_ВЫДАЧИ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{СОТРУДНИК.ПАСПОРТ_КОД_ПОДРАЗДЕЛЕНИЯ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{СОТРУДНИК.ПАСПОРТ_АДРЕС_ПРОЖИВАНИЯ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{СОТРУДНИК.НОМЕР_ТЕЛЕФОНА\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{СОТРУДНИК.ИНН\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{СОТРУДНИК.БАНК_НАЗВАНИЕ\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{СОТРУДНИК.БАНК_БИК\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{СОТРУДНИК.БАНК_СЧЁТ_КОР\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{СОТРУДНИК.БАНК_СЧЁТ_РАС\}'; template(te) <- t; }
            NEW te = TemplateEntry { key(te) <- '\{СОТРУДНИК.СНИЛС\}'; template(te) <- t; }
            DIALOG template OBJECTS t = t DO {
                SEEK templates.t = t;
            }
        }
    }
}

defaultEmplomentContractSecret 'Приложение трудового договора (комерческая тайна)' = DATA WORDFILE();
loadDefaultEmplomentContractSecret 'Загрузить приложение о комерческой тайне'()  { INPUT = defaultEmplomentContractSecret() CHANGE; }
openDefaultEmplomentContractSecret 'Открыть приложение о комерческой тайне'()  { open(defaultEmplomentContractSecret()); }

defaultEmplomentContractStatement 'Приложение трудового договора (служебные произведения)' = DATA WORDFILE();
loadDefaultEmplomentContractStatement 'Загрузить приложение о служебных произведениях'()  { INPUT = defaultEmplomentContractStatement() CHANGE; }
openDefaultEmplomentContractStatement 'Открыть приложение о служебных произведениях'()  { open(defaultEmplomentContractStatement()); }

defaultEmplomentContractData 'Приложение трудового договора (персональные данные)' = DATA WORDFILE();
loadDefaultEmplomentContractData 'Загрузить приложение о персональных данных'()  { INPUT = defaultEmplomentContractData() CHANGE; }
openDefaultEmplomentContractData 'Открыть приложение о персональных данных'()  { open(defaultEmplomentContractData()); }

EXTEND FORM options PROPERTIES() nameDefaultEmplomentContractTemplate, nameDefaultEmplomentContractTemplateCEO, generateEmployeeAgreement,
    loadDefaultEmplomentContractSecret, openDefaultEmplomentContractSecret,
    loadDefaultEmplomentContractStatement, openDefaultEmplomentContractStatement,
    loadDefaultEmplomentContractData, openDefaultEmplomentContractData
;

DESIGN options {
    commons {
        MOVE PROPERTY (nameDefaultEmplomentContractTemplate());
        MOVE PROPERTY (nameDefaultEmplomentContractTemplateCEO());
        MOVE PROPERTY (generateEmployeeAgreement());
        NEW secret {
            type = CONTAINERH;
            MOVE PROPERTY (loadDefaultEmplomentContractSecret());
            MOVE PROPERTY (openDefaultEmplomentContractSecret());
        }
        NEW statement {
            type = CONTAINERH;
            MOVE PROPERTY (loadDefaultEmplomentContractStatement());
            MOVE PROPERTY (openDefaultEmplomentContractStatement());
        }
        NEW data {
            type = CONTAINERH;
            MOVE PROPERTY (loadDefaultEmplomentContractData());
            MOVE PROPERTY (openDefaultEmplomentContractData());
        }
    }
}

CLASS EmploymentContract 'Трудовой договор';
TABLE employmentContract(EmploymentContract);

legalEntity = DATA LegalEntity(EmploymentContract);
person = DATA Person(EmploymentContract);

CONSTRAINT EmploymentContract c IS EmploymentContract AND NOT legalEntity(c) MESSAGE 'У договoра не задан работодатель';
CONSTRAINT EmploymentContract c IS EmploymentContract AND NOT person(c) MESSAGE 'У договроа не задан работник';

form (EmploymentContract c) = form(legalEntity(c));
nameForm 'Форма хозяйства' (EmploymentContract c) = name(form(c));
shortNameForm 'Форма хозяйства (кратко)' (EmploymentContract c) = shortName(form(c));

idDocument 'Номер договора' = DATA ISTRING[256](EmploymentContract) CHARWIDTH 10;
city 'Город' = DATA ISTRING[256](EmploymentContract) CHARWIDTH 15;
date 'Дата заключения договора' = DATA DATE (EmploymentContract);
addressWork 'Адрес места работы' = DATA ISTRING[1024](EmploymentContract) CHARWIDTH 20;
positionEmployee 'Должность работника' = DATA ISTRING[1024](EmploymentContract) CHARWIDTH 20;
dateFrom 'Дата начала трудовых обязанностей' = DATA DATE (EmploymentContract);
duration 'Продолжительность испытательного срока в месяцах' = DATA INTEGER (EmploymentContract) CHARWIDTH 3;
salary 'Размер оклада' = DATA NUMERIC[15,2](EmploymentContract);

WHEN LOCAL CHANGED (legalEntity(EmploymentContract c)) DO {
    addressWork(c) <- address(legalEntity(c));
}

nameLegalEntity 'Название' (EmploymentContract c) = fullName(legalEntity(c));
shortNameLegalEntity 'Краткое название' (EmploymentContract c) = shortName(legalEntity(c));
firstNameEmployer 'Имя работодателя' (EmploymentContract c) = firstName(representative(legalEntity(c)));
lastNameEmployer 'Фамилия работодателя' (EmploymentContract c) = lastName(representative(legalEntity(c)));
middleNameEmployer 'Отчество работодателя' (EmploymentContract c) = middleName(representative(legalEntity(c)));
firstNameEmployerRp 'Имя работодателя (Р.п.)' (EmploymentContract c) = firstNameRp(representative(legalEntity(c)));
lastNameEmployerRp 'Фамилия работодателя (Р.п.)' (EmploymentContract c) = lastNameRp(representative(legalEntity(c)));
middleNameEmployerRp 'Отчество работодателя (Р.п.)' (EmploymentContract c) = middleNameRp(representative(legalEntity(c)));
baseEmployer 'Основание' (EmploymentContract c) = baseRepresentative(legalEntity(c));
positionEmployer 'Должность работодателя' (EmploymentContract c) = positionRepresentative(legalEntity(c));
positionEmployerRp 'Должность работодателя (Р.п.)' = DATA STRING (EmploymentContract);
addressEmployer 'Юридический адрес работодателя' (EmploymentContract c) = address(legalEntity(c));
innEmployer 'ИНН работодателя' (EmploymentContract c) =  inn(legalEntity(c));
kppEmployer 'КПП работодателя' (EmploymentContract c) =  kpp(legalEntity(c));
nameBankEmployer 'Название банка работодателя' (EmploymentContract c) =  nameBank(legalEntity(c));
bicBankEmployer 'БИК банка работодателя' (EmploymentContract c) =  bicBank(account(legalEntity(c)));
accountEmployer 'Расчётный счёт работодателя' (EmploymentContract c) =  number(account(legalEntity(c)));
accountBankBankEmployer 'Корреспондентский счёт банка работодателя' (EmploymentContract c) =  numberAccount(bank(account(legalEntity(c))));

firstNameEmployee 'Имя работника' (EmploymentContract c) = firstName(person(c));
lastNameEmployee 'Фамилия работника' (EmploymentContract c) = lastName(person(c));
middleNameEmployee 'Отчество работника' (EmploymentContract c) = middleName(person(c));
birthdayEmployee 'Дата рождения работника' (EmploymentContract c) = birthday(person(c));
addressEmployee 'Адрес прописки' (EmploymentContract c) = address(person(c));

firstNameEmployeeRp 'Имя работника (Р.п.)' (EmploymentContract c) = firstNameRp(person(c));
lastNameEmployeeRp 'Фамилия работника (Р.п.)' (EmploymentContract c) = lastNameRp(person(c));
middleNameEmployeeRp 'Отчество работника (Р.п.)' (EmploymentContract c) = middleNameRp(person(c));

seriesPassport 'Серия паспорта работника' (EmploymentContract c) =  seriesPassport(person(c));
numberPassport 'Номер паспорта работника' (EmploymentContract c) =  numberPassport(person(c));
authorityPassport 'Орган, выдавший паспорт' (EmploymentContract c) =  authorityPassport(person(c));
dateIssuePassport 'Дата выдачи паспорта' (EmploymentContract c) =  dateIssuePassport(person(c));
codeUnitPassport 'Код подразделения паспорта' (EmploymentContract c) = codeUnitPassport(person(c));
phoneEmployee 'Телефон работника' (EmploymentContract c) =   phone(person(c));
innEmployee 'ИНН работника' (EmploymentContract c) =  inn(person(c));
snilsEmployee 'СНИЛС работника' (EmploymentContract c) = snils(person(c));
nameBankEmployee 'Название банка работника' (EmploymentContract c) =  nameBank(person(c));
bicBankEmployee 'БИК банка работника' (EmploymentContract c) =  bic(bank(person(c)));
accountEmployee 'Расчётный счёт работника' (EmploymentContract c) =  numberAccount(person(c));
accountBankBankEmployee 'Корреспондентский счёт банка работника' (EmploymentContract c) =  numberAccount(bank(person(c)));

city (EmploymentContract c) <- 'Москва' WHEN SET (c IS EmploymentContract);
date (EmploymentContract c) <- currentDate() WHEN SET (c IS EmploymentContract);
duration (EmploymentContract c) <- 3 WHEN SET (c IS EmploymentContract);

createTemplateEntries (EmploymentContract c, Template t) {
    NEW te = TemplateEntry { value(te) <- idDocument(c); key(te) <- '\{ДОГОВОР.НОМЕР\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- city(c); key(te) <- '\{ДОГОВОР.ГОРОД\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- toDateRus(date(c)); key(te) <- '\{ДОГОВОР.ДАТА\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- nameForm(c); key(te) <- '\{АСБ_КЛИЕНТ.ФОРМА_ХОЗЯЙСТВА_ПОЛНАЯ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- nameLegalEntity(c); key(te) <- '\{АСБ_КЛИЕНТ.НАЗВАНИЕ_ОРГАНИЗАЦИИ_ПОЛНОЕ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- shortNameForm(c); key(te) <- '\{АСБ_КЛИЕНТ.ФОРМА_ХОЗЯЙСТВА_КРАТКАЯ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- shortNameForm(c); key(te) <- '\{АСБ_КЛИЕНТ.ФОРМА_ХОЗЯЙСТВА_КРАТКАЯ2\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- OVERRIDE shortNameLegalEntity(c), nameLegalEntity(c); key(te) <- '\{АСБ_КЛИЕНТ.НАЗВАНИЕ_ОРГАНИЗАЦИИ_КРАТКОЕ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- OVERRIDE shortNameLegalEntity(c), nameLegalEntity(c); key(te) <- '\{АСБ_КЛИЕНТ.НАЗВАНИЕ_ОРГАНИЗАЦИИ_КРАТКОЕ2\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- addressEmployer(c); key(te) <- '\{АСБ_КЛИЕНТ.ЮР_АДРЕС\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- addressEmployer(c); key(te) <- '\{АСБ_КЛИЕНТ.ЮР_АДРЕС2\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- positionEmployer(c); key(te) <- '\{АСБ_КЛИЕНТ.ПРЕДСТАВИТЕЛЬ_ДОЛЖНОСТЬ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- positionEmployerRp(c); key(te) <- '\{АСБ_КЛИЕНТ.ПРЕДСТАВИТЕЛЬ_ДОЛЖНОСТЬ2\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- CONCAT ' ', lastNameEmployer(c), firstNameEmployer(c), middleNameEmployer(c); key(te) <- '\{АСБ_КЛИЕНТ.ПРЕДСТАВИТЕЛЬ_ФИО_ПОЛНОЕ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- CONCAT ' ', lastNameEmployerRp(c), firstNameEmployerRp(c), middleNameEmployerRp(c); key(te) <- '\{АСБ_КЛИЕНТ.ПРЕДСТАВИТЕЛЬ_ФИО_ПОЛНОЕ_РОДИТЕЛЬНЫЙ_ПАДЕЖ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- CONCAT '', left(firstNameEmployer(c), 1) + '.', left(middleNameEmployer(c), 1) + '.', ' ' + lastNameEmployer(c); key(te) <- '\{АСБ_КЛИЕНТ.ПРЕДСТАВИТЕЛЬ_ФИО_КРАТКОЕ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- baseEmployer(c); key(te) <- '\{АСБ_КЛИЕНТ.ПРЕДСТАВИТЕЛЬ_ОСНОВАНИЕ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- innEmployer(c); key(te) <- '\{АСБ_КЛИЕНТ.ИНН\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- kppEmployer(c); key(te) <- '\{АСБ_КЛИЕНТ.КПП\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- nameBankEmployer(c); key(te) <- '\{АСБ_КЛИЕНТ.БАНК_НАЗВАНИЕ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- bicBankEmployer(c); key(te) <- '\{АСБ_КЛИЕНТ.БАНК_БИК\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- accountBankBankEmployer(c); key(te) <- '\{АСБ_КЛИЕНТ.БАНК_СЧЁТ_КОР\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- accountEmployer(c); key(te) <- '\{АСБ_КЛИЕНТ.БАНК_СЧЁТ_РАС\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- positionEmployee(c); key(te) <- '\{СОТРУДНИК.ДОЛЖНОСТЬ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- CONCAT ' ', lastNameEmployee(c), firstNameEmployee(c), middleNameEmployee(c); key(te) <- '\{СОТРУДНИК.ФИО_ПОЛНОЕ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- CONCAT ' ', lastNameEmployeeRp(c), firstNameEmployeeRp(c), middleNameEmployeeRp(c); key(te) <- '\{СОТРУДНИК.ФИО_ПОЛНОЕ_РОДИТЕЛЬНЫЙ_ПАДЕЖ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- CONCAT '', left(firstNameEmployee(c), 1) + '.', left(middleNameEmployee(c), 1) + '.', ' ' + lastNameEmployee(c); key(te) <- '\{СОТРУДНИК.ФИО_КРАТКОЕ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- addressWork(c); key(te) <- '\{ДОГОВОР.МЕСТО_РАБОТЫ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- toDateRus(dateFrom(c)); key(te) <- '\{ДОГОВОР.ДАТА_НАЧАЛА_ИСПОЛНЕНИЯ_ТРУДОВЫХ_ОБЯЗАННОСТЕЙ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- TEXT (duration(c)); key(te) <- '\{ДОГОВОР.ПРОДОЛЖИТЕЛЬНОСТЬ_ИСПЫТАТЕЛЬНОГО_СРОКА\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- TEXT (salary(c)); key(te) <- '\{ДОГОВОР.РАЗМЕР_ОКЛАДА\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- toDateDDMMYYYY(birthdayEmployee(c)); key(te) <- '\{СОТРУДНИК.ДАТА_РОЖДЕНИЯ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- TEXT (seriesPassport(c)); key(te) <- '\{СОТРУДНИК.ПАСПОРТ_СЕРИЯ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- TEXT (numberPassport(c)); key(te) <- '\{СОТРУДНИК.ПАСПОРТ_НОМЕР\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- authorityPassport(c); key(te) <- '\{СОТРУДНИК.ПАСПОРТ_ОРГАН_ВЫДАВШИЙ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- toDateDDMMYYYY(dateIssuePassport(c)); key(te) <- '\{СОТРУДНИК.ПАСПОРТ_ДАТА_ВЫДАЧИ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- codeUnitPassport(c); key(te) <- '\{СОТРУДНИК.ПАСПОРТ_КОД_ПОДРАЗДЕЛЕНИЯ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- addressEmployee(c); key(te) <- '\{СОТРУДНИК.ПАСПОРТ_АДРЕС_ПРОЖИВАНИЯ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- phoneEmployee(c); key(te) <- '\{СОТРУДНИК.НОМЕР_ТЕЛЕФОНА\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- innEmployee(c); key(te) <- '\{СОТРУДНИК.ИНН\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- nameBankEmployee(c); key(te) <- '\{СОТРУДНИК.БАНК_НАЗВАНИЕ\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- bicBankEmployee(c); key(te) <- '\{СОТРУДНИК.БАНК_БИК\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- accountBankBankEmployee(c); key(te) <- '\{СОТРУДНИК.БАНК_СЧЁТ_КОР\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- accountEmployee(c); key(te) <- '\{СОТРУДНИК.БАНК_СЧЁТ_РАС\}'; template(te) <- t; }
    NEW te = TemplateEntry { value(te) <- snilsEmployee(c); key(te) <- '\{СОТРУДНИК.СНИЛС\}'; template(te) <- t; }
}

createTemplate 'Сформировать по шаблону' (EmploymentContract c) {
    NEWSESSION {
        IF positionEmployee(c) == 'Генеральный директор' THEN {
            createTemplateEntries(c, defaultEmplomentContractTemplateCEO());
            process(defaultEmplomentContractTemplateCEO());
            open(resultTemplate(), CONCAT '_', shortNameLegalEntity(c), idDocument(c), toDateDDMMYYYY(date(c)));
        } ELSE {
            createTemplateEntries(c, defaultEmplomentContractTemplate());
            process(defaultEmplomentContractTemplate());
            open(resultTemplate(), CONCAT '_', shortNameLegalEntity(c), idDocument(c), toDateDDMMYYYY(date(c)));
        }
        open(defaultEmplomentContractSecret(), 'Положение о коммерческой тайне и конфиденциальной информации');
        open(defaultEmplomentContractStatement(), 'Положение о служебных произведениях');
        open(defaultEmplomentContractData(), 'Положение об обработке персональных данных');
    }
}

FORM employmentContract 'Трудовой договор'
    OBJECTS e = EmploymentContract PANEL 
    PROPERTIES (e) idDocument, city, date, nameLegalEntity, shortNameLegalEntity, positionEmployer, lastNameEmployer, firstNameEmployer, middleNameEmployer, positionEmployerRp,
                   baseEmployer, firstNameEmployee, lastNameEmployee, middleNameEmployee, positionEmployee, addressWork, dateFrom, duration, salary, shortNameForm, 
                   birthdayEmployee,
                   seriesPassport, numberPassport, authorityPassport, dateIssuePassport, codeUnitPassport, addressEmployee,
                   snilsEmployee,
                   phoneEmployee, innEmployee
    
    EDIT EmploymentContract OBJECT e
;

DESIGN employmentContract {
    OBJECTS {
        type = COLUMNS;
        columns = 3;
        NEW employer {
            fill = 1;
            caption = 'Данные Работодателя';
            MOVE PROPERTY (shortNameForm(e)) { caption = 'Форма хозяйства'; }
            MOVE PROPERTY (nameLegalEntity(e));
            MOVE PROPERTY (shortNameLegalEntity(e));
            NEW employerRepresentative {
                caption = 'Представитель';
                fill = 1;
                MOVE PROPERTY (lastNameEmployer(e)) { caption = 'Фамилия'; }
                MOVE PROPERTY (firstNameEmployer(e)) { caption = 'Имя'; }
                MOVE PROPERTY (middleNameEmployer(e)) { caption = 'Отчество'; }
                MOVE PROPERTY (positionEmployer(e)) { caption = 'Должность'; }
                MOVE PROPERTY (baseEmployer(e));
                MOVE PROPERTY (positionEmployerRp(e));
            }
        }
        NEW employee {
            fill = 1;
            caption = 'Данные Работника';
            MOVE PROPERTY (lastNameEmployee(e)) { caption = 'Фамилия'; }
            MOVE PROPERTY (firstNameEmployee(e)) { caption = 'Имя'; }
            MOVE PROPERTY (middleNameEmployee(e)) { caption = 'Отчество'; }
            MOVE PROPERTY (birthdayEmployee(e)) { caption = 'Дата рождения'; }
            MOVE PROPERTY (phoneEmployee(e)) { caption = 'Номер телефона'; }
            MOVE PROPERTY (innEmployee(e)) { caption = 'ИНН'; }
            NEW employeePassport {
                caption = 'Паспортные данные';
                NEW seriesNumber {
                    type = CONTAINERH;
                    fill = 1;
                    MOVE PROPERTY (seriesPassport(e)) { caption = 'Серия'; }
                    MOVE PROPERTY (numberPassport(e)) { caption = 'Номер'; }
                }
                MOVE PROPERTY (dateIssuePassport(e)) { caption = 'Дата выдачи'; }
                MOVE PROPERTY (authorityPassport(e));
                MOVE PROPERTY (codeUnitPassport(e)) { caption = 'Код подразделения'; }
                MOVE PROPERTY (addressEmployee(e));
                MOVE PROPERTY(snilsEmployee(e));  
            }
        }
        NEW contract {
            fill = 1;
            caption = 'Данные Договора';
            MOVE PROPERTY (idDocument(e));
            MOVE PROPERTY (city(e)) { caption = 'Место заключения договора'; }
            MOVE PROPERTY (date(e));
            MOVE PROPERTY (addressWork(e));
            MOVE PROPERTY (dateFrom(e));
            MOVE PROPERTY (duration(e));
            MOVE PROPERTY (positionEmployee(e)) { caption = 'Должность'; }
            MOVE PROPERTY (salary(e)) { caption = 'Оклад'; }
        }
    }
}

FORM employmentContracts 'Трудовые договоры'
    OBJECTS e = EmploymentContract
    PROPERTIES (e) READONLY idDocument, city, date, nameLegalEntity, shortNameLegalEntity, positionEmployer, lastNameEmployer, firstNameEmployer, middleNameEmployer,
                   baseEmployer, firstNameEmployee, lastNameEmployee, middleNameEmployee, positionEmployee, addressWork, dateFrom, duration, salary, shortNameForm, 
                   birthdayEmployee, seriesPassport, numberPassport, authorityPassport, dateIssuePassport, codeUnitPassport, addressEmployee, phoneEmployee, innEmployee
    PROPERTIES createTemplate(e) TOOLBAR
    PROPERTIES (e) NEWSESSION NEW, EDIT, DELETE
;

NAVIGATOR {
    documents {
        NEW employmentContracts;
    }
}
