MODULE TaskMonitoringWord;

REQUIRE TimeReports, Word, Time;

NAMESPACE Time;

taskMonitoringTemplateWord = DATA Template();
nameTaskMonitoringTemplateWord 'Шаблон для мониторинга задач' () = name(taskMonitoringTemplateWord());

generateTaskMonitoringTemplate 'Создать шаблон для мониторинга задач по проекту' ()  { 
    NEWSESSION {
        NEW t = Template {
            NEW e = TemplateEntry {
                template(e) <- t;
                key(e) <- 'TABLE';
                type(e) <- Word.Type.table;
                dataColumnSeparator(e) <- 'lsFusionCSep';
                dataRowSeparator(e) <- 'lsFusionRSep';
            }
            
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'PROJECT_NAME'; description(e) <- 'Проект'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'CLIENT_NAME'; description(e) <- 'Клиент'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'FROM_DATE'; description(e) <- 'Дата с'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'TO_DATE'; description(e) <- 'Дата по'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'INVOICE_DATE'; description(e) <- 'Дата'; }

            DIALOG template OBJECTS t = t DO { 
                taskMonitoringTemplateWord() <- t;
                APPLY;
            } ELSE {
                CANCEL; 
            }
        }
    }
}

rowText (TimeEntry e) = CONCAT 'lsFusionCSep', [FORMULA TEXT 'to_char(($1),\'DD.MM.YY\')'](dateStart(e)),
                        [FORMULA TEXT 'to_char(($1),\'DD.MM.YY\')'](dateFinish(e)),
                        (OVERRIDE status(e), ''),
                        (OVERRIDE nameTask(e), ''),
                        (OVERRIDE nameTaskType(e), ''),
                        (OVERRIDE nameEmployee(e), ''),
                        (OVERRIDE nameResponsible(e), ''),
                        (OVERRIDE TEXT(hours(e)), ''),
                        (OVERRIDE TEXT(rate(e)), ''),
                        (OVERRIDE TEXT(sum(e)), '');

tableText (DATE df, DATE dt) = GROUP CONCAT rowText(TimeEntry t), 'lsFusionRSep' IF project(t) == filterProject() AND
    dateStart(t) >= df AND dateFinish(t) <= dt AND NOT markDelete(task(t)) AND
                                                       validSelfRegister(project(t)) AND
                                                       visibleToSelfRegister(t) ORDER t;

EXTEND FORM options PROPERTIES nameTaskMonitoringTemplateWord(), generateTaskMonitoringTemplate();
DESIGN options {
    commons {
        MOVE PROPERTY (nameTaskMonitoringTemplateWord());
        MOVE PROPERTY (generateTaskMonitoringTemplate());
    }
}

toDateTimeDDMMYY = FORMULA STRING[15] 'to_char(($1),\'DD.MM.YY, HH:mi\')';

generateWordTaskMonitoring 'Сформировать (WORD)' (DATE df, DATE dt, Project p) {
    IF taskMonitoringTemplateWord() THEN {
        value(TemplateEntry detail) <- NULL;
        FOR template (TemplateEntry detail) == taskMonitoringTemplateWord() DO {
            value(detail) <- tableText(df, dt) WHERE key(detail) == 'TABLE';
            value(detail) <- TEXT(name(p)) WHERE key(detail) == 'PROJECT_NAME';
            value(detail) <- TEXT(nameCustomer(p)) WHERE key(detail) == 'CLIENT_NAME';
            value(detail) <- TEXT(toDateDDMMYY(df)) WHERE key(detail) == 'FROM_DATE';
            value(detail) <- TEXT(toDateDDMMYY(dt)) WHERE key(detail) == 'TO_DATE';
            value(detail) <- TEXT(toDateTimeDDMMYY(currentDateTime())) WHERE key(detail) == 'INVOICE_DATE';
        }
        process(taskMonitoringTemplateWord());
        open(resultTemplate(), replace(replace((CONCAT '_',nameCustomer(p), name(p), toDateDDMMYYYY(df) + '-' + toDateDDMMYYYY(dt)), ',' ,''), '\\', ''));
    } ELSE
          MESSAGE 'Не выбран шаблон для мониторинга задач';
}

generateWordTaskMonitoring 'Сформировать (WORD)' (Project p) {
    generateWordTaskMonitoring(dateFrom(), dateTo(), p);
}

EXTEND FORM taskMonitoring
    PROPERTIES generateWordTaskMonitoring(p) 
;

DESIGN taskMonitoring {
    header {
        MOVE PROPERTY(generateWordTaskMonitoring(p));
    }
}