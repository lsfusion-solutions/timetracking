MODULE TimeEntryWord;

REQUIRE TimeEntry, Word, InvoiceWord;

NAMESPACE TimeEntry;

// Генерация шаблона
generateTimeEntriesTemplate 'Создать шаблон для счета (Юридический)' () {
    NEWSESSION {
        NEW t = Template {
            name(t) <- 'Трудозатраты';
            NEW e = TemplateEntry {
                template(e) <- t;
                key(e) <- 'TABLE_TIME_ENTRY';
                type(e) <- Word.Type.table;
                dataColumnSeparator(e) <- 'lsFusionCSep';
                dataRowSeparator(e) <- 'lsFusionRSep';
                description(e) <- 'Таблица трудозатрат';
            }

            NEW e = TemplateEntry {
                template(e) <- t;
                key(e) <- 'TABLE_CATEGORY_MONTHLY';
                type(e) <- Word.Type.table;
                dataColumnSeparator(e) <- 'lsFusionCSep';
                dataRowSeparator(e) <- 'lsFusionRSep';
                description(e) <- 'Таблица часов в абонентской плате';
            }
            
            NEW e = TemplateEntry {
                template(e) <- t;
                key(e) <- 'TABLE_CATEGORY_PAY';
                type(e) <- Word.Type.table;
                dataColumnSeparator(e) <- 'lsFusionCSep';
                dataRowSeparator(e) <- 'lsFusionRSep';
                description(e) <- 'Таблица часов вне абонентской платы';
            }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'CATEGORY_LIST'; description(e) <- 'Трудозатраты по категориям'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'INVOICE_DATE'; description(e) <- 'Дата счета'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'SERIES'; description(e) <- 'Серия счета'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'NUMBER'; description(e) <- 'Номер счета'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'CUSTOMER_NAME'; description(e) <- 'Наименование клиента'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'PROJECT_NAME'; description(e) <- 'Наименование проекта'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'FROM_DATE'; description(e) <- 'Дата с'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'TO_DATE'; description(e) <- 'Дата по'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'SUM_INIT'; description(e) <- 'Сумма в рублях'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'SUM_MONTHLY'; description(e) <- 'Сумма абонентской платы'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'SUM_HOURS'; description(e) <- 'Сумма к оплате'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'SUM_MAX'; description(e) <- 'Максимальная стоимость внеабонентских услуг, всего'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'SUM_PAY'; description(e) <- 'Сумма к оплате (всего)'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- '\{HOURS_MONTHLY\}'; description(e) <- 'Кол-во часов в абонентской плате'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- '\{DETAILS\}'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'NAME_CUR'; description(e) <- 'Валюта'; }
            SHOW template OBJECTS t = t;
        }
    }
}

timeEntriesTemplateWord = DATA Template();
nameTimeEntriesTemplateWord 'Шаблон для трудозатрат' () = name(timeEntriesTemplateWord());

formatPrice = FORMULA TEXT 'ltrim(to_char($1, \'999 999 999.99\'))';

rowTimeEntry (TimeEntry t) = CONCAT 'lsFusionCSep', Time.toDateDDMMYY(dateStart(t)), '-', '-', (OVERRIDE comment(t) + '\r', ''), (OVERRIDE hours(t), 0), '-', '-';

bold (TEXT t) =  '<b>' + t + '</b>';

rowTask (Invoice i, Task t) = CONCAT 'lsFusionCSep',
    bold(Time.toDateDDMMYY(dateTimeStart(t))),
    bold(OVERRIDE nameEmployee(t), ''),
    bold(OVERRIDE name(t), ''),
    (OVERRIDE description(t) + '\r', ''),
    bold(CONCAT ' ', (OVERRIDE hours(i, t), 0), '(' + (hoursPay(i, t) + ')' IF hoursPay(i, t) != hours(i, t))), 
    bold(OVERRIDE TEXT (formatPrice(rate(i, t))), ''),
    bold(OVERRIDE TEXT (formatPrice(sumPay(i, t))), '');

tableTimeEntryTaskText(Invoice i, Task t) = GROUP CONCAT rowTimeEntry(TimeEntry te) IF invoice(te) == i AND task(te) == t, 'lsFusionRSep' ORDER dateStart(te), te;
tableTaskText(Invoice i, Task t) = CONCAT 'lsFusionRSep', rowTask(i, t), tableTimeEntryTaskText(i, t);
tableTaskText (Invoice i) = GROUP CONCAT tableTaskText(i, Task t) IF hours(i, t), 'lsFusionRSep' ORDER dateTimeStart(t), t;

categoryList (Invoice i) = 
    GROUP CONCAT (CONCAT ' ', (name(Category c) + ': ' +  hours(i, c)) IF hours(i, c), '(' + hoursPay(i, c) + ')' IF hoursPay(i, c)) + ' ч', '\n' ORDER name(c), c;

rowCategoryMonthly 'Часов в абонплате' (Invoice i, Category c) = CONCAT 'lsFusionCSep', 
    (OVERRIDE name(c), ''), 
    (OVERRIDE 'Блок ' + round1(hoursMonthly(i, c)) + ' часов', ''), 
    (OVERRIDE hoursMonthly(i, c), 0), '', ''; 
    
rowCategoryPay 'Часов вне абонплаты' (Invoice i, Category c) = CONCAT 'lsFusionCSep', 
    (OVERRIDE name(c), ''), 
    '1 час', 
    (OVERRIDE hoursPay(i, c), 0), 
    (OVERRIDE TEXT (formatPrice(rate(project(i), c))) + ' ' + shortNameCurrency(i), ''), 
    (OVERRIDE TEXT (formatPrice(sumPay(i, c))) + ' ' + shortNameCurrency(i), '0,00 ' + shortNameCurrency(i)); 

tableCategoryMonthly (Invoice i) = GROUP CONCAT rowCategoryMonthly(i, Category c) IF hoursMonthly(i, c), 'lsFusionRSep' ORDER name(c), c;
tableCategoryPay (Invoice i) = GROUP CONCAT rowCategoryPay(i, Category c) IF hoursPay(i, c) OR sumPay(i, c), 'lsFusionRSep' ORDER name(c), c;

generateTimeEntriesWord 'Сгенерировать (Word)' (Invoice i) { 
    DIALOG dialogInvoiceDetailsTypes OBJECTS t INPUT DO {
        LOCAL templ = Template ();
        
        IF t == InvoiceDetailsType.ASB THEN templ() <- invoiceTemplateWord(); 
        ELSE templ() <- invoiceTemplateWordAccounting();
        
        IF templ() THEN {
            value(TemplateEntry detail) <- NULL;
            FOR template (TemplateEntry detail) == templ() DO {
                value(detail) <- TEXT(Time.toDateDDMMYY(date(i))) WHERE key(detail) == 'INVOICE_DATE';
                value(detail) <- TEXT(series(i)) WHERE key(detail) == 'SERIES';
                value(detail) <- TEXT(number(i)) WHERE key(detail) == 'NUMBER';
                value(detail) <- TEXT(nameCustomer(i)) WHERE key(detail) == 'CUSTOMER_NAME';
                value(detail) <- TEXT(nameProject(i)) WHERE key(detail) == 'PROJECT_NAME';
                value(detail) <- TEXT(Time.toDateDDMMYY(fromDate(i))) WHERE key(detail) == 'FROM_DATE';
                value(detail) <- TEXT(Time.toDateDDMMYY(toDate(i))) WHERE key(detail) == 'TO_DATE';
                value(detail) <- tableTaskText(i) WHERE key(detail) == 'TABLE_TIME_ENTRY';
                value(detail) <- (OVERRIDE categoryList(i), '') WHERE key(detail) == 'CATEGORY_LIST';
                value(detail) <- (OVERRIDE tableCategoryMonthly(i), '') WHERE key(detail) == 'TABLE_CATEGORY_MONTHLY';
                value(detail) <- (OVERRIDE tableCategoryPay(i), '') WHERE key(detail) == 'TABLE_CATEGORY_PAY';
                value(detail) <- (OVERRIDE TEXT(formatPrice(sum(i))), '0.00') WHERE key(detail) == 'SUM_INIT';
                value(detail) <- (OVERRIDE TEXT(formatPrice(sumMonthly(i))), '0.00') WHERE key(detail) == 'SUM_MONTHLY';
                value(detail) <- (OVERRIDE TEXT(formatPrice(sumPay(i))), '0.00') WHERE key(detail) == 'SUM_HOURS';
                value(detail) <- (OVERRIDE TEXT(formatPrice(maxAmountMonthly(project(i)))), '0.00') WHERE key(detail) == 'SUM_MAX';
                value(detail) <- (OVERRIDE TEXT(formatPrice(sumPay(i) (+) sumMonthly(i))), '0.00') WHERE key(detail) == 'SUM_PAY';
                value(detail) <- TEXT(hoursMonthlyWord(i)) WHERE key(detail) == '\{HOURS_MONTHLY\}';
                value(detail) <- TEXT(shortNameCurrency(i)) WHERE key(detail) == 'NAME_CUR';
                value(detail) <- TEXT(IF t == InvoiceDetailsType.ASB THEN 
                    'ИНН/КПП: 7725718426/770501001 ОГРН: 1117746197447\n' + 'р/с: 40702810173000028366 ФИЛИАЛ ЦЕНТРАЛЬНЫЙ ПАО БАНКА /"ФК ОТКРЫТИЕ/" Г. МОСКВА\nк/с: 30101810945250000297 БИК: 044525297' ELSE 
                    'ИНН/КПП: 9705145234/770501001 ОГРН: 1207700222223\nр/с: 40702810901460008635 ФИЛИАЛ ЦЕНТРАЛЬНЫЙ ПАО БАНКА /"ФК ОТКРЫТИЕ/" Г. МОСКВА\nк/с: 30101810945250000297 БИК: 044525297') 
                    WHERE key(detail) == '\{DETAILS\}';
            }
            process(templ());
            open(resultTemplate(), replace(replace((CONCAT '_', nameCustomer(i), seriesNumber(i), toDateDDMMYYYY(fromDate(i)) + '-' + toDateDDMMYYYY(toDate(i))), ',' ,''), '\\', ''));
        } ELSE
            MESSAGE 'Не выбран шаблон для трудозатрат';
    }
}

CLASS InvoiceDetailsKind 'Вид отчета' {
    buch 'Бухгалтерский',
    law 'Юридический'
}

FORM dialogInvoiceDetailsKinds 'Выбор вида отчета'
    OBJECTS t = InvoiceDetailsKind
    PROPERTIES READONLY 'Вид отчета' = staticCaption(t)
;

generateWordTypes 'Сгенерировать (Word)' (Invoice i) {
    DIALOG dialogInvoiceDetailsKinds OBJECTS t INPUT DO {
        IF t == InvoiceDetailsKind.law THEN generateTimeEntriesWord(i);
        ELSE generateWord(i);
    }
}

EXTEND FORM options
    PROPERTIES generateTimeEntriesTemplate(),  generateInvoiceTemplate()
;

DESIGN options {
    commons {
        MOVE PROPERTY (generateTimeEntriesTemplate());
        MOVE PROPERTY (generateInvoiceTemplate());
    }
}
