MODULE EnterpriseDataTimeTracking;

REQUIRE EnterpriseDataSend, EnterpriseDataReceive, Task, Invoice, EGRUL;

// item
EXTEND CLASS TaskType : Item;

id (TaskType tt) += CONCAT '-', prefix(), STRING(tt);

name (TaskType tt) += Task.name(tt);

// partner
EXTEND CLASS Partner.Partner : EnterpriseData.Partner;

EnterpriseData.name (Partner.Partner p) += STRING(namePartner(p));
type (Partner.Partner p) += IF p IS Person THEN TypePartner.individual ELSE TypePartner.legalEntity;

// company - hardcode
CLASS Company : EnterpriseData.Company;

EXTEND CLASS Company {
    this
}

name (Company c) += 'ООО "АСБ Консалтинг Групп"' IF c = Company.this;
type (Company c) += TypePartner.legalEntity IF c = Company.this;

// currency - hardcode
CLASS Currency : EnterpriseData.Currency;

EXTEND CLASS Currency {
    this
}

name (Currency c) += 'руб.' IF c = Currency.this;
id (Currency c) += '646' IF c = Currency.this;

// invoice
EXTEND CLASS Invoice : SaleOrder;

company (Invoice i) += Company.this;
currency (Invoice i) += Currency.this;
customer (Invoice i) += partner(Invoice.customer(i));
dateTime (Invoice i) += DATETIME(date(i));
id (Invoice i) += CONCAT '-', '00' + prefix(), seriesNumber(i);

// lines of Invoice
EXTEND CLASS TaskType : SaleOrderServiceDetail;

in (Invoice i, TaskType tt) += GROUP LAST taskType(Task t) == tt IF hours(i, t) ORDER t;

item(Invoice i, TaskType tt) += tt AS TaskType IF in(i, tt);

quantity (Invoice i, TaskType tt) = GROUP SUM hoursPay(i, Task t) BY taskType(t);
quantity (Invoice i, TaskType tt) += OVERRIDE NUMERIC[15,3](quantity(i, tt)), 0.0;

sum (Invoice i, TaskType tt) = GROUP SUM sumPay(i, Task t) BY taskType(t);
sum (Invoice i, TaskType tt) += OVERRIDE NUMERIC[15,2](sum(i,tt)), 0.0;

price (Invoice i, TaskType tt) += OVERRIDE NUMERIC[15,2](sum(i, tt) / quantity(i, tt)) IF quantity(i, tt) != 0.0, NUMERIC[15,2](sum(i, tt)), 0.0;

EXTEND FORM sendMessage 
    FILTERS customer(saleOrder)
;

// receive
afterReceive () + {
    FOR uidPartner(INTEGER i) AND NOT object(uidPartner(i)) AND typePartner(i) = 'ЮридическоеЛицо' DO NEW le = LegalEntity {
        uid(le) <- uidPartner(i);
    }
    FOR uidPartner(INTEGER i) = uid(LegalEntity le) AND typePartner(i) = 'ЮридическоеЛицо' DO {
        inn(le) <- innPartner(i);
        shortName(le) <- ISTRING[250](namePartner(i));
        fullName(le) <- ISTRING[250](fullNamePartner(i));
        kpp(le) <- kppPartner(i);
        ogrn(le) <- nonResidentNumber(i);
    }
    
    FOR uidPartner(INTEGER i) AND NOT object(uidPartner(i)) AND typePartner(i) = 'ФизическоеЛицо' DO NEW p = Person {
        uid(p) <- uidPartner(i);    
    }
    FOR uidPartner(INTEGER i) = uid(Person p) AND typePartner(i) = 'ФизическоеЛицо' DO {
        inn(p) <- innPartner(i);
        lastName(p) <- getWord(namePartner(i), ' ', 1);
        firstName(p) <- getWord(namePartner(i), ' ', 2);
        middleName(p) <- getWord(namePartner(i), ' ', 3);
    }    
    APPLY;
}