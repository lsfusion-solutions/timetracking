MODULE EnterpriseDataTimeTracking;

REQUIRE EnterpriseDataSend, EnterpriseDataReceive, Task, Invoice, EGRUL;

// item
EXTEND CLASS TaskType : Item;

id (TaskType tt) += CONCAT '-', prefix(), STRING(tt);

name (TaskType tt) += Task.name(tt);

// partner
EXTEND CLASS Customer : Partner;

id (Customer c) += CONCAT '-', prefix(), STRING(c);
name (Customer c) += STRING(Customer.name(c));
type (Customer c) += IF Customer.type[Customer](c) = CounterpartyType.person THEN TypePartner.individual ELSE TypePartner.legalEntity;

// company - hardcode
CLASS Company : EnterpriseData.Company;

EXTEND CLASS Company {
    this
}

name (Company c) += 'ООО "АСБ Консалтинг Групп"' IF c = Company.this;
type (Company c) += TypePartner.legalEntity IF c = Company.this;

// currency - hardcode
CLASS Currency : EnterpriseData.Currency;

EXTEND CLASS Currency {
    this
}

name (Currency c) += 'руб.' IF c = Currency.this;
id (Currency c) += '646' IF c = Currency.this;

// invoice
EXTEND CLASS Invoice : SaleOrder;

company (Invoice i) += Company.this;
currency (Invoice i) += Currency.this;
customer (Invoice i) += Invoice.customer(i);
dateTime (Invoice i) += DATETIME(date(i));
id (Invoice i) += CONCAT '-', '00' + prefix(), seriesNumber(i);

// lines of Invoice
EXTEND CLASS TaskType : SaleOrderServiceDetail;

in (Invoice i, TaskType tt) += GROUP LAST taskType(Task t) == tt IF hours(i, t) ORDER t;

item(Invoice i, TaskType tt) += tt AS TaskType IF in(i, tt);

quantity (Invoice i, TaskType tt) = GROUP SUM hoursPay(i, Task t) BY taskType(t);
quantity (Invoice i, TaskType tt) += OVERRIDE NUMERIC[15,3](quantity(i, tt)), 0.0;

sum (Invoice i, TaskType tt) = GROUP SUM sumPay(i, Task t) BY taskType(t);
sum (Invoice i, TaskType tt) += OVERRIDE NUMERIC[15,2](sum(i,tt)), 0.0;

price (Invoice i, TaskType tt) += OVERRIDE NUMERIC[15,2](sum(i, tt) / quantity(i, tt)) IF quantity(i, tt) != 0.0, NUMERIC[15,2](sum(i, tt)), 0.0;

// receive
// todo: Это временное решение
EXTEND CLASS LegalEntity : Partner;

legalEntity (ISTRING inn) = GROUP AGGR LegalEntity le BY inn(le);

afterReceive () + {
    FOR ISTRING inn = innPartner(INTEGER i) AND NOT legalEntity(inn) AND typePartner(i) = 'ЮридическоеЛицо' DO NEW le = LegalEntity {
        inn(le) <- inn;
        uid(le) <- NULL;
    }
    FOR innPartner(INTEGER i) = inn(LegalEntity le) DO {
        shortName(le) <- ISTRING[250](namePartner(i));
        fullName(le) <- ISTRING[250](fullNamePartner(i));
        kpp(le) <- kppPartner(i);
    }
    APPLY;
}