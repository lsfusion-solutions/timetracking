MODULE InvoiceWord;

REQUIRE Invoice, Word, Time;

NAMESPACE Invoice;

// Генерация шаблона
generateInvoiceTemplate 'Создать шаблон для счета' ()  { 
    NEWSESSION {
        NEW t = Template {
            NEW e = TemplateEntry {
                template(e) <- t;
                key(e) <- 'TABLE';
                type(e) <- Word.Type.table;
                dataColumnSeparator(e) <- 'lsFusionCSep';
                dataRowSeparator(e) <- 'lsFusionRSep';
            }

            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'INVOICE_DATE'; description(e) <- 'Дата счета'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'SERIES'; description(e) <- 'Серия счета'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'NUMBER'; description(e) <- 'Номер счета'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'CUSTOMER_NAME'; description(e) <- 'Наименование клиента'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'PROJECT_NAME'; description(e) <- 'Наименование проекта'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'FROM_DATE'; description(e) <- 'Дата с'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'TO_DATE'; description(e) <- 'Дата по'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'HOURS_INIT'; description(e) <- 'Кол-во часов'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'HOURS_MONTHLY'; description(e) <- 'Кол-во часов в абонентской плате'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'HOURS_PAY'; description(e) <- 'Кол-во часов к оплате'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'SUM_INIT'; description(e) <- 'Сумма в рублях'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'SUM_MONTHLY'; description(e) <- 'Сумма абонентской платы'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'SUM_HOURS'; description(e) <- 'Сумма к оплате'; }
            NEW e = TemplateEntry { template(e) <- t; key(e) <- 'SUM_PAY'; description(e) <- 'Сумма к оплате (всего)'; }
            DIALOG template OBJECTS t = t DO {
                SEEK templates.t = t;
            }
        }
    }
}

// Выбор шаблона для клиента

//templateWord 'Шаблон для счета (Word) по умолчанию' = DATA Template ();
//nameTemplateWord 'Шаблон для счета (Word) по умолчанию' () = name(templateWord());

//EXTEND FORM templates
    //PROPERTIES() generateInvoiceTemplate, nameTemplateWord
//;
//DESIGN templates {
//    OBJECTS {
//        NEW invoices AFTER BOX(t) {
//            caption = 'Счета';
//            type = CONTAINERH;
//            MOVE PROPERTY(generateInvoiceTemplate());
//            MOVE PROPERTY(nameTemplateWord()) {
//                alignment = STRETCH;
//            }
//        }
//    }
//}

customerTemplateWord 'Шаблон для счета по проекту (Word)' = DATA Template (Project);
nameCustomerTemplateWord 'Шаблон для счета по проекту (Word)' (Project p) = name(customerTemplateWord(p));

templateWord 'Шаблон для счета' (Invoice i) = OVERRIDE customerTemplateWord(project(i)), 
    templateId('invoiceMonthly') IF (hoursMonthly(i) OR hoursMonthlyCategory(i)), templateId('invoiceGeneral');

EXTEND FORM customer
    PROPERTIES(p) nameCustomerTemplateWord PANEL
;

DESIGN customer {
    tabPane {
        header {
            MOVE PROPERTY(nameCustomerTemplateWord(p));
        }
    }
}

// Генерация счета

toDateDDMMYY = FORMULA STRING[8] 'to_char(($1),\'DD.MM.YY\')';


formatPrice = FORMULA 'ltrim(to_char($1, \'999 999 999\'))';
formatHours (NUMERIC[5,1] h)= replace([ FORMULA 'ltrim(to_char($1, \'990.9\'))'](h), '.', ',');
formatHours (NUMERIC[5,1] h, NUMERIC[5,1] p)= replace([ FORMULA 'ltrim(to_char($1, \'990.9\'))'](h) + 
                                                               IF h != p THEN ' (' + [ FORMULA 'ltrim(to_char($1, \'990.9\'))'](p) + ')' ELSE '',
                                                               '.', ',');

rowText (Invoice i, Task t) = TEXT([ FORMULA STRING[8] 'to_char(($1),\'DD.MM\')'](fromDate(i, t)) + 'lsFusionCSep' + 
                                               (OVERRIDE codeEmployee(t),nameEmployee(t)) + 'lsFusionCSep' +
                                               (CONCAT '\n', nameTaskType(t), name(t), description(t)) + 'lsFusionCSep' +
                                               TEXT(formatHours(NUMERIC[5,1](hours(i, t)), NUMERIC[5,1](hoursPay(i, t)))) + 'lsFusionCSep' +
                                               formatPrice(rate(i, t)) + 'lsFusionCSep' +
                                               (OVERRIDE TEXT(formatPrice(sumPay(i, t))), '-') + 'lsFusionCSep');
tableText (Invoice i) = GROUP CONCAT rowText(i, Task t), 'lsFusionRSep' ORDER fromDate(i, t), t;

hoursMonthlyWord (Invoice i) = CONCAT '', TEXT (formatHours(hoursMonthly(i))), '\n', 
    (GROUP CONCAT (CONCAT ' ', TEXT (formatHours(hoursMonthly(i, Category c))) + ' часов', name(c)) IF hoursMonthly(i, c), '\n' ORDER hoursMonthly(i, c), c);

generateWord 'Сгенерировать (Word)' (Invoice i) { 
    IF templateWord(i) THEN {
        value(TemplateEntry detail) <- NULL;
        FOR template (TemplateEntry detail) == templateWord(i) DO {
            value(detail) <- tableText(i) WHERE key(detail) == 'TABLE';
            value(detail) <- TEXT(toDateDDMMYY(date(i))) WHERE key(detail) == 'INVOICE_DATE';
            value(detail) <- TEXT(series(i)) WHERE key(detail) == 'SERIES';
            value(detail) <- TEXT(number(i)) WHERE key(detail) == 'NUMBER';
            value(detail) <- TEXT(nameCustomer(i)) WHERE key(detail) == 'CUSTOMER_NAME';
            value(detail) <- TEXT(nameProject(i)) WHERE key(detail) == 'PROJECT_NAME';
            value(detail) <- TEXT(toDateDDMMYY(fromDate(i))) WHERE key(detail) == 'FROM_DATE';
            value(detail) <- TEXT(toDateDDMMYY(toDate(i))) WHERE key(detail) == 'TO_DATE';
            value(detail) <- TEXT(formatHours(hours(i))) WHERE key(detail) == 'HOURS_INIT';
            value(detail) <- TEXT(hoursMonthlyWord(i)) WHERE key(detail) == 'HOURS_MONTHLY';
            value(detail) <- TEXT(formatHours(OVERRIDE hoursPay(i), 0.0)) WHERE key(detail) == 'HOURS_PAY';
            value(detail) <- TEXT(formatPrice(sum(i))) WHERE key(detail) == 'SUM_INIT';
            value(detail) <- TEXT(formatPrice(sumMonthly(i))) WHERE key(detail) == 'SUM_MONTHLY';
            value(detail) <- TEXT(formatPrice(sumPay(i))) WHERE key(detail) == 'SUM_HOURS';
            value(detail) <- TEXT(formatPrice(sumPay(i) (+) sumMonthly(i))) WHERE key(detail) == 'SUM_PAY';
        }
        process(templateWord(i));
        open(resultTemplate(), CONCAT '_',nameCustomer(i), seriesNumber(i), toDateDDMMYYYY(fromDate(i)) + '-' + toDateDDMMYYYY(toDate(i)));
    } ELSE
        MESSAGE 'Не выбран шаблон для клиента';
}