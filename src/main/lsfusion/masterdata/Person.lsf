MODULE Person;

REQUIRE Doc, OpenCV, Project, Partner;

NAMESPACE Person;

CLASS Person 'Физическое лицо' : Contact, Partner;
TABLE person (Person);

CLASS Address 'Доп. адреса';
address 'Адрес' = DATA ISTRING[250](Address) CHARWIDTH 20;
person = DATA Person (Address);

CLASS Phone 'Доп. телефоны';
phone 'Телефон' = DATA STRING[100] (Phone) CHARWIDTH 15;
person = DATA Person (Phone);

CLASS Email 'Доп. E-mail';
email 'E-mail' = DATA STRING[400] (Email) CHARWIDTH 20 REGEXP '[-!#-\'*+/-9=?A-Z^-~]+(\\.[-!#-\'*+/-9=?A-Z^-~]+)*@[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)+' '<html>{authentication.email.contact.incorrect}</html>';
person = DATA Person (Email);

nameCustomer 'Клиент' (Person p) = namePartner(customer(p));

middleName 'Отчество' = DATA ISTRING[250](Person) CHARWIDTH 15;

namePartner (Person p) += name(p);

EXTEND CLASS PartnerType {
    person 'Физическое лицо'
}

type (Person p) += PartnerType.person;

firstNameRp 'Имя род. падеж' = DATA ISTRING[250](Person) CHARWIDTH 15;
lastNameRp 'Фамилия род. падеж' = DATA ISTRING[250](Person) CHARWIDTH 15;
middleNameRp 'Отчество род. падеж' = DATA ISTRING[250](Person) CHARWIDTH 15;

fioName 'И.О. Фамилия' (Person p) = CONCAT '', left(firstName(p), 1) + '.', left(middleName(p), 1) + '.', ' ' + lastName(p);

address 'Адрес' = DATA ISTRING[250](Person) CHARWIDTH 20;

seriesPassport 'Серия паспорта' = DATA ISTRING[50] (Person) CHARWIDTH 10;
numberPassport 'Номер паспорта' = DATA ISTRING[50] (Person) CHARWIDTH 10;
authorityPassport 'Орган, выдавший паспорт' = DATA ISTRING[1024](Person) CHARWIDTH 20;
dateIssuePassport 'Дата выдачи паспорта' = DATA DATE (Person);
codeUnitPassport 'Код орагана выдачи паспорта' = DATA ISTRING[1024](Person) CHARWIDTH 10;

inn 'ИНН' = DATA ISTRING[12](Person);
snils 'СНИЛС' = DATA ISTRING[50](Person) CHARWIDTH 10;

numberAccount 'Банковский счёт' = DATA ISTRING[50](Person) CHARWIDTH 15;

CLASS Bank 'Банк';
TABLE bank (Bank);

id 'Код' = DATA STRING[25] (Bank) MATERIALIZED INDEXED CHARWIDTH 5 IN id;
bank (id) = GROUP AGGR Bank b BY id (b);

name 'Название' = DATA ISTRING[250](Bank) CHARWIDTH 20;
bic 'БИК' = DATA STRING[11](Bank) CHARWIDTH 11 IN id;
swift 'SWIFT' = DATA ISTRING[50] (Bank) CHARWIDTH 15 IN id;
numberAccount 'Корреспондентский счёт' = DATA ISTRING[50](Bank) CHARWIDTH 20;

bank = DATA Bank(Person);
nameBank 'Банк' (Person p) = name(bank(p));

FORM bank 'Банк'
    OBJECTS o = Bank PANEL
    PROPERTIES(o) bic, id, name, swift, numberAccount
    
    EDIT Bank OBJECT o
;

FORM banks 'Банки'
    OBJECTS o = Bank
    PROPERTIES(o) READONLY id, name, bic, swift, numberAccount
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(o)
;

FORM dialogBanks 'Банки'
    OBJECTS o = Bank
    PROPERTIES(o) READONLY id, name, bic, swift, numberAccount
    ORDERS name(o)
    
    LIST Bank OBJECT o
;

fileSnils = DATA FILE (Person);
openFileSnils 'Открыть' (Person c) { open(fileSnils(c)); }

regexpMatches = FORMULA 'SELECT (regexp_matches($1, $2))[$3]';

thresholdSnils 'Порог для обработки изображения' = DATA INTEGER();
numberSnilsPattern 'Регулярное выражение для номера' = DATA STRING[200] ();
// \d{3}-\d{3}-\d{3}\s*\d{2}
fioSnilsPattern 'Регулярное выражение для ФИО' = DATA STRING[200] ();
// \d{3}-\d{3}-\d{3}-*\s*\d{2}\s+\S+\s+([А-Я]+)[^А-Я]+([А-Я]+)[^А-Я]+([А-Я]+)\s
EXTEND FORM options PROPERTIES() thresholdSnils, numberSnilsPattern, fioSnilsPattern;
DESIGN options { openCV { MOVE PROPERTY(thresholdSnils()); MOVE PROPERTY(numberSnilsPattern()); MOVE PROPERTY(fioSnilsPattern()); } }

loadFileSnils 'Загрузить' (Person c) { 
    INPUT f=fileSnils(c) CHANGE DO {
        convertToBlackAndWhite(f, thresholdSnils());        
        imageToString(convertToBlackAndWhiteResult(), 'rus', 1, 3);
        snils(c) <- regexpMatches(imageToStringResult(), numberSnilsPattern(), 1);
        lastName(c) <- regexpMatches(imageToStringResult(), fioSnilsPattern(), 1);
        firstName(c) <- regexpMatches(imageToStringResult(), fioSnilsPattern(), 2);
        middleName(c) <- regexpMatches(imageToStringResult(), fioSnilsPattern(), 3);
    } 
}

filePassport = DATA FILE (Person);
openFilePassport 'Открыть' (Person c) { open(filePassport(c)); }
loadFilePassport 'Загрузить' (Person c) { 
    INPUT f=filePassport(c) CHANGE DO {
    } 
}

fileINN = DATA FILE (Person);
openFileINN 'Открыть' (Person c) { open(fileINN(c)); }
loadFileINN 'Загрузить' (Person c) { 
    INPUT f=fileINN(c) CHANGE DO {
    } 
}

fileMilitary = DATA FILE (Person);
openFileMilitary 'Открыть' (Person c) { open[FILE](fileMilitary(c)); }
loadFileMilitary 'Загрузить' (Person c) { 
    INPUT f=fileMilitary(c) CHANGE DO {
    } 
}

CLASS Child 'Ребёнок';
TABLE child(Child);

name 'Имя' = DATA ISTRING[250](Child) CHARWIDTH 30;
birthday 'Дата рождения' = DATA DATE (Child);
parent = DATA Person(Child) NONULL DELETE;
nameParent 'Родитель' (Child c) = Authentication.name(parent(c));

children 'Дети' (Person p) = GROUP CONCAT name(Child c), ', ' ORDER birthday(c) BY parent(c) CHARWIDTH 15;

FORM person 'Физическое лицо'
    OBJECTS p = Person PANEL 
    PROPERTIES (p) nameCustomer READONLY, lastName, firstName, middleName, lastNameRp, firstNameRp, middleNameRp, birthday, address, email,
                   seriesPassport, numberPassport, authorityPassport, dateIssuePassport, codeUnitPassport, phone, inn, snils, numberAccount, nameBank,
                   openFileSnils SHOWIF TRUE IF fileSnils(p), loadFileSnils,
                   openFilePassport SHOWIF TRUE IF filePassport(p), loadFilePassport,
                   openFileINN SHOWIF TRUE IF fileINN(p), loadFileINN,
                   openFileMilitary SHOWIF TRUE IF fileMilitary(p), loadFileMilitary
    
    OBJECTS c = Child
    PROPERTIES (c) name, birthday, NEW, DELETE 
    FILTERS parent(c) == p
    ORDERS birthday(c)
    
    EDIT Person OBJECT p
;

FORM persons 'Физические лица'
    OBJECTS p = Person 
    PROPERTIES (p) READONLY nameCustomer, lastName, firstName, middleName, lastNameRp, firstNameRp, middleNameRp, birthday, address, email, children,
                   seriesPassport, numberPassport, authorityPassport, dateIssuePassport, codeUnitPassport, phone, inn, snils, numberAccount, nameBank
    PROPERTIES (p) NEWSESSION NEW, EDIT, DELETE
    ORDERS lastName(p)
    
    LIST Person OBJECT p
;

//dataIn = DATA BOOLEAN (Customer, Person);
//in (Customer c, Person p) = OVERRIDE dataIn(c, p), customer(p) == c;

//addPerson 'Добавить' (Customer c) {
//    NEWSESSION {
//        DIALOG persons OBJECTS p INPUT DO {
//            dataIn (c, p) <- TRUE;
//        }
//        APPLY;
//    }
//} IMAGE 'add.png';
//
//deletePerson 'Удалить' (Customer c, Person p) {
//    NEWSESSION {
//        dataIn(c, p) <- NULL;
//        IF customer(p) == c THEN customer(p) <- NULL;
//        APPLY;
//    }   
//} IMAGE 'delete.png';

NAVIGATOR {
    masterData {
        NEW persons;
    }
}

seriesMarriage 'Серия свидетельства о браке' = DATA ISTRING[50] (Person) CHARWIDTH 10;
dateMarriage 'Дата заключения брака' = DATA DATE (Person);
nameSpouse 'ФИО супруга' = DATA ISTRING[200] (Person) CHARWIDTH 30;
authorityMarriage 'Орган, выдавший свидетельство' = DATA ISTRING[200] (Person) CHARWIDTH 20;

fileMarriage = DATA FILE (Person);
openfileMarriage 'Открыть' (Person c) { open(fileMarriage(c)); }
loadfileMarriage 'Загрузить' (Person c) { 
    INPUT f=fileMarriage(c) CHANGE DO {
    } 
}

EXTEND FORM person
    PROPERTIES(p) seriesMarriage, dateMarriage, nameSpouse, authorityMarriage, openfileMarriage, loadfileMarriage
;

nameEng 'Название (англ)' = DATA ISTRING[250](Bank) CHARWIDTH 15;
address 'юр. адрес' = DATA ISTRING[250] (Bank) CHARWIDTH 50;

GROUP SWBICS;
GROUP BICDirectoryEntry;
GROUP participantInfo EXTID 'ParticipantInfo';

GROUP rstrList EXTID 'RstrList' : participantInfo;
GROUP rstrList1 EXTID 'RstrList' : rstrList;
GROUP accounts EXTID 'Accounts';
GROUP accounts1 EXTID 'Accounts' : accounts;
GROUP accRstrList1 EXTID 'AccRstrList' : accounts1;

SWBIC = DATA LOCAL STRING(INTEGER);
defaultSWBIC = DATA LOCAL STRING(INTEGER);
englName = DATA LOCAL STRING(INTEGER);
rstr = DATA LOCAL STRING(INTEGER);
rstrDate = DATA LOCAL STRING(INTEGER);
rstr1 = DATA LOCAL STRING(INTEGER);
rstrDate1 = DATA LOCAL STRING(INTEGER);
regN = DATA LOCAL STRING(INTEGER);
prntBIC = DATA LOCAL STRING(INTEGER);
nameP = DATA LOCAL STRING(INTEGER);
cntrCd = DATA LOCAL STRING(INTEGER);
rgn = DATA LOCAL STRING(INTEGER);
ind = DATA LOCAL STRING(INTEGER);
tnp = DATA LOCAL STRING(INTEGER);
nnp = DATA LOCAL STRING(INTEGER);
adr = DATA LOCAL STRING(INTEGER);
dateIn = DATA LOCAL STRING(INTEGER);
ptType = DATA LOCAL STRING(INTEGER);
srvcs = DATA LOCAL STRING(INTEGER);
xchType = DATA LOCAL STRING(INTEGER);
UID = DATA LOCAL STRING(INTEGER);
NPSParticipant = DATA LOCAL STRING(INTEGER);
participantStatus = DATA LOCAL STRING(INTEGER);
BICDirectoryEntryAccRstrList = DATA LOCAL INTEGER(INTEGER);
accRstr = DATA LOCAL STRING(INTEGER);
accRstrDate = DATA LOCAL STRING(INTEGER);
accRstrList = DATA LOCAL STRING(INTEGER);
account = DATA LOCAL STRING(INTEGER);
regulationAccountType = DATA LOCAL STRING(INTEGER);
CK = DATA LOCAL STRING(INTEGER);
accountCBRBIC = DATA LOCAL STRING(INTEGER);
dateIn1 = DATA LOCAL STRING(INTEGER);
accountStatus = DATA LOCAL STRING(INTEGER);
accRstr1 = DATA LOCAL STRING(INTEGER);
accRstrDate1 = DATA LOCAL STRING(INTEGER);
dateOut = DATA LOCAL STRING(INTEGER);
account1 = DATA LOCAL STRING(INTEGER);
regulationAccountType1 = DATA LOCAL STRING(INTEGER);
CK1 = DATA LOCAL STRING(INTEGER);
accountCBRBIC1 = DATA LOCAL STRING(INTEGER);
dateIn2 = DATA LOCAL STRING(INTEGER);
accountStatus1 = DATA LOCAL STRING(INTEGER);
BIC = DATA LOCAL STRING(INTEGER);
EDNo = DATA LOCAL STRING();
EDDate = DATA LOCAL STRING();
EDAuthor = DATA LOCAL STRING();
creationReason = DATA LOCAL STRING();
creationDateTime = DATA LOCAL STRING();
infoTypeCode = DATA LOCAL STRING();
businessDay = DATA LOCAL STRING();
directoryVersion = DATA LOCAL STRING();

FORM ED807
PROPERTIES() EDNo ATTR, EDDate ATTR, EDAuthor ATTR, creationReason EXTID 'CreationReason' ATTR, creationDateTime EXTID 'CreationDateTime' ATTR, infoTypeCode EXTID 'InfoTypeCode' ATTR, businessDay EXTID 'BusinessDay' ATTR, directoryVersion EXTID 'DirectoryVersion' ATTR

OBJECTS BICDirectoryEntry = INTEGER
PROPERTIES(BICDirectoryEntry) BIC ATTR
PROPERTIES(BICDirectoryEntry) IN SWBICS SWBIC ATTR, defaultSWBIC EXTID 'DefaultSWBIC' ATTR

OBJECTS participantInfo = INTEGER EXTID 'ParticipantInfo' IN BICDirectoryEntry
PROPERTIES(BICDirectoryEntry) IN participantInfo englName EXTID 'EnglName' ATTR, regN EXTID 'RegN' ATTR, prntBIC EXTID 'PrntBIC' ATTR, nameP EXTID 'NameP' ATTR, cntrCd EXTID 'CntrCd' ATTR, rgn EXTID 'Rgn' ATTR, ind EXTID 'Ind' ATTR, tnp EXTID 'Tnp' ATTR, nnp EXTID 'Nnp' ATTR, adr EXTID 'Adr' ATTR, dateIn EXTID 'DateIn' ATTR, ptType EXTID 'PtType' ATTR, srvcs EXTID 'Srvcs' ATTR, xchType EXTID 'XchType' ATTR, UID ATTR, NPSParticipant ATTR, participantStatus EXTID 'ParticipantStatus' ATTR

OBJECTS rstrList = INTEGER EXTID 'RstrList' IN participantInfo
PROPERTIES(BICDirectoryEntry) IN rstrList rstr1 EXTID 'Rstr' ATTR, rstrDate1 EXTID 'RstrDate' ATTR
PROPERTIES(BICDirectoryEntry) IN rstrList1 rstr EXTID 'Rstr' ATTR, rstrDate EXTID 'RstrDate' ATTR

OBJECTS accounts = INTEGER EXTID 'Accounts' IN BICDirectoryEntry
PROPERTIES(BICDirectoryEntry) IN accounts account EXTID 'Account' ATTR, regulationAccountType EXTID 'RegulationAccountType' ATTR, CK ATTR, accountCBRBIC EXTID 'AccountCBRBIC' ATTR, dateIn1 EXTID 'DateIn' ATTR, accountStatus EXTID 'AccountStatus' ATTR

OBJECTS accRstrList = INTEGER EXTID 'AccRstrList' IN accounts
FILTERS BICDirectoryEntryAccRstrList(accRstrList) == BICDirectoryEntry
PROPERTIES(accRstrList) accRstr EXTID 'AccRstr' ATTR, accRstrDate EXTID 'AccRstrDate' ATTR

OBJECTS accounts1 = INTEGER EXTID 'Accounts' IN accounts
PROPERTIES(BICDirectoryEntry) IN accounts1 dateOut EXTID 'DateOut' ATTR, account1 EXTID 'Account' ATTR, regulationAccountType1 EXTID 'RegulationAccountType' ATTR, CK1 EXTID 'CK' ATTR, accountCBRBIC1 EXTID 'AccountCBRBIC' ATTR, dateIn2 EXTID 'DateIn' ATTR, accountStatus1 EXTID 'AccountStatus' ATTR
PROPERTIES(BICDirectoryEntry) IN accRstrList1 accRstr1 EXTID 'AccRstr' ATTR, accRstrDate1 EXTID 'AccRstrDate' ATTR;


WHEN LOCAL FORMS bank SETCHANGED(bic(Bank b)) DO {
    file() <- NULL;
    LOCAL found = BOOLEAN();
    found() <- NULL;
    EXTERNAL HTTP GET 'http://old.cbr.ru/s/newbik' TO file;
    unzipping()<-file();
    makeUnzipFile();
    FOR unzipped(STRING[100] s) DO {            
        IMPORT ED807 XML FROM unzipped(s);
        FOR BIC(INTEGER i) == bic(b) DO {
            id(b) <- (IF wordCount(nameP(i), '"') > 1 THEN getWord(nameP(i), '"', 2) ELSE getWord(nameP(i), '"', 1)); 
            name(b) <- nameP(i);
            nameEng(b) <- englName(i);
            address(b) <- CONCAT ', ', ind(i), (tnp(i) + ' ' + nnp(i)), adr(i);
            numberAccount(b) <- account(i);
            swift(b) <- SWBIC(i);
            found() <- TRUE;
        }
    } 
    
    IF NOT found() THEN {
        MESSAGE 'БИК не найден';
    }
}

EXTEND FORM bank
    PROPERTIES(o) nameEng, address
;

notes 'Примечание' = DATA TEXT (Person);

CLASS Interraction 'Взаимодействие';

CLASS InterractionType 'Тип события';
name 'Тип события' = DATA STRING[50] (InterractionType);

FORM interractionType 'Тип события'
    OBJECTS i = InterractionType PANEL 
    PROPERTIES(i) name
    
    EDIT InterractionType OBJECT i
;

FORM interractionTypes 'Типы события'
    OBJECTS t = InterractionType
    PROPERTIES READONLY name(t)
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE 
    
    LIST InterractionType OBJECT t
;

person = DATA Person (Interraction);
dateTime 'Дата' = DATA DATETIME (Interraction);
type 'Тип события' = DATA InterractionType (Interraction);
nameType 'Событие' (Interraction i) = name(type(i));
description 'Описание события' = DATA STRING (Interraction) CHARWIDTH 60;

EXTEND FORM person
    PROPERTIES(p) notes
    
    OBJECTS a = Address
    PROPERTIES(a) address, NEW, DELETE 
    FILTERS person(a) == p
    
    OBJECTS ph = Phone
    PROPERTIES(ph) phone, NEW, DELETE 
    FILTERS person(ph) == p
        
    OBJECTS e = Email
    PROPERTIES(e) email, NEW, DELETE 
    FILTERS person(e) == p
    
    OBJECTS i = Interraction
    PROPERTIES(i) dateTime, nameType, description
    PROPERTIES NEW(i), DELETE(i)
    FILTERS person(i) == p
;

DESIGN person {
    OBJECTS {
        NEW container {
            fill = 1;
            type = SPLITV;
            NEW body {
                fill = 1;
                tabbed = TRUE;
                NEW main {
                    caption = 'Основные';
                    NEW data {
                        type = CONTAINERH;
                        NEW names1 {
                            caption = 'ФИО (Им. падеж)';
                            MOVE PROPERTY (lastName(p)) { charWidth = 20; }
                            MOVE PROPERTY (firstName(p));
                            MOVE PROPERTY (middleName(p));
                        }
                        NEW names2 {
                            caption = 'ФИО (Род. падеж)';
                            MOVE PROPERTY (lastNameRp(p)) { caption = 'Фамилия';  charWidth = 20; }
                            MOVE PROPERTY (firstNameRp(p)) { caption = 'Имя'; }
                            MOVE PROPERTY (middleNameRp(p)) { caption = 'Отчество'; }
                        }
                        NEW customer {
                            caption = 'Клиент';
                            MOVE PROPERTY (nameCustomer(p)) { charWidth = 20; }
                        }
                    }
                }
                NEW contacts {
                    caption = 'Контакты';
                    NEW info {
                        NEW info1 {
                            caption = 'Информация';
                            MOVE PROPERTY (birthday(p));
                            MOVE PROPERTY (address(p));
                            MOVE PROPERTY (phone(p));
                            MOVE PROPERTY (email(p));
                        }
                        NEW additional {
                            caption = 'Доп информация';
                            NEW dataP {
                                type = CONTAINERH;
                                MOVE BOX(a) { height = 200; align = STRETCH; }
                                MOVE BOX(ph) { height = 200; align = STRETCH; }
                                MOVE BOX(e) { height = 200; align = STRETCH; }
                            }
                            MOVE PROPERTY(notes(p)) { height = 70; align = STRETCH; panelCaptionVertical = TRUE; }
                        }
                    }
                }
                NEW legal {
                    caption = 'Юридические';
                    NEW top {
                        type = CONTAINERH;
                        NEW left {
                            NEW account {
                                fill = 1;
                                caption = 'Банковский счёт';
                                MOVE PROPERTY (numberAccount(p)) { caption = 'Номер'; }
                                MOVE PROPERTY (nameBank(p));
                            }
                            NEW passport {
                                caption = 'Паспорт';
                                NEW seriesNumber {
                                    type = CONTAINERH;
                                    MOVE PROPERTY (seriesPassport(p)) { caption = 'Серия'; }
                                    MOVE PROPERTY (numberPassport(p)) { caption = 'Номер'; }
                                }
                                MOVE PROPERTY (dateIssuePassport(p)) { caption = 'Дата выдачи'; }
                                MOVE PROPERTY (authorityPassport(p));
                                MOVE PROPERTY (codeUnitPassport(p)) { caption = 'Код подразделения'; }
                                NEW passportFile {
                                    type = CONTAINERH;
                                    MOVE PROPERTY (loadFilePassport(p));
                                    MOVE PROPERTY (openFilePassport(p));
                                }
                            }
                        }
                        NEW right {
                            NEW others {
                                type = CONTAINERH;
                                NEW snils {
                                    caption = 'СНИЛС';
                                    MOVE PROPERTY (snils(p));
                                    NEW snilsFile {
                                        type = CONTAINERH;
                                        MOVE PROPERTY (loadFileSnils(p));
                                        MOVE PROPERTY (openFileSnils(p));
                                    }
                                }
                                NEW inn {
                                    caption = 'ИНН';
                                    MOVE PROPERTY (inn(p));
                                    NEW innFile {
                                        type = CONTAINERH;
                                        MOVE PROPERTY (loadFileINN(p));
                                        MOVE PROPERTY (openFileINN(p));
                                    }
                                }
                                NEW military {
                                    caption = 'Военный билет';
                                    type = CONTAINERH;
                                    MOVE PROPERTY (openFileMilitary(p));
                                    MOVE PROPERTY (loadFileMilitary(p));
                                }
                            }
                            NEW marriage {
                                caption = 'Свидетельство о браке';
                                MOVE PROPERTY(seriesMarriage(p));
                                MOVE PROPERTY(dateMarriage(p));
                                MOVE PROPERTY(nameSpouse(p));
                                MOVE PROPERTY(authorityMarriage(p));
                                NEW marriageFile {
                                    type = CONTAINERH;
                                    MOVE PROPERTY(loadfileMarriage(p));
                                    MOVE PROPERTY(openfileMarriage(p));
                                }
                            }
                        }
                    }
                    MOVE BOX (c) { caption = 'Дети'; }
                }
            }
            NEW interractions {
                caption = 'Журнал взаимодействия';
                fill = 1;
                MOVE BOX(i) { caption = ''; }
            }
        }
    }
}

CLASS Position 'Должность';

id 'Номер' = DATA STRING[25] (Position) CHARWIDTH 10;
name 'Должность' = DATA STRING[200] (Position);

position (id) = GROUP AGGR Position p BY id (p);

FORM positions 'Должности'
    OBJECTS p = Position
    PROPERTIES READONLY id(p), name(p)
    ORDERS id(p)
    PROPERTIES(p) NEWSESSION NEW, EDIT, DELETE
    
    LIST Position OBJECT p
;

FORM position
    OBJECTS p = Position PANEL 
    PROPERTIES id(p), name(p)
    
    EDIT Position OBJECT p;
;

EXTEND FORM options
    OBJECTS p = Position
    PROPERTIES READONLY id(p), name(p)
    ORDERS id(p)
    PROPERTIES(p) NEWSESSION NEW, EDIT, DELETE 
;

DESIGN options {
    pane {
        NEW positions {
            caption = 'Должности';
            fill = 1;
            MOVE BOX(p);
        }
    }
}

//id 'Код' = DATA STRING[25] (Person);
//person (id) = GROUP AGGR Person p BY id (p);
//
//EXTEND FORM persons
//    PROPERTIES(p) id BEFORE nameCustomer(p)
//;

//EXTEND FORM person
//    PROPERTIES(p) id
//;
//
//DESIGN person {
//    main {
//        MOVE PROPERTY(id(p)) FIRST {alignment = START; }
//    }
//}

//counterpartyPerson 'Контрагент' = DATA Person (Customer);
//nameCounterpartyPerson 'Контрагент' (Customer c) = STRING(fioName(counterpartyPerson(c)));
//
//WHEN LOCAL CHANGED(type(Customer c)) AND NOT type(c) == CounterpartyType.person DO {
//    counterpartyPerson(c) <- NULL;
//}
//
//EXTEND FORM customer
//    PROPERTIES(c) nameCounterpartyPerson SHOWIF NOT type(c) == CounterpartyType.legalEntity AFTER nameType(c)
//;
//
//DESIGN customer {
//    lane2 {
//        MOVE PROPERTY(nameCounterpartyPerson(c));
//    }
//}