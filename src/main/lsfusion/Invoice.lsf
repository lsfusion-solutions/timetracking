MODULE Invoice;

REQUIRE SystemEvents, Customer, Employee, Category,
        TimeEntry, 
        Numerator, Utils;

CLASS Invoice 'Счет';
TABLE invoice (Invoice);

project 'Проект' = DATA Project (Invoice) NONULL;
nameProject 'Проект' (Invoice i) = name(project(i));

customer 'Клиент' (Invoice i) = customer(project(i));
nameCustomer 'Клиент' (Invoice i) = name(customer(i));

date 'Дата' = DATA DATE (Invoice) NONULL;
date(i) <- currentDate() WHEN SET(i IS Invoice);

@defineNumbered(Invoice);
@defineNumeratedDefault(Invoice, 'Счета', '');

author 'Автор' = DATA Employee (Invoice);
nameAuthor 'Автор' (Invoice i) = name(author(i));

// Время выполнения

invoice 'Счет' = DATA Invoice (TimeEntry) INDEXED;

CONSTRAINT project(TimeEntry t) != project(invoice(t)) MESSAGE 'Проект счета не соответствует проекту отметки времени'; 

fromDate 'Дата с' = DATA DATE (Invoice);
toDate 'Дата по' = DATA DATE (Invoice);

changeInvoiceDates = DATA BOOLEAN ();
onStarted() + {
    IF NOT changeInvoiceDates() THEN {
        fromDate(Invoice i) <- GROUP MIN dateStart(TimeEntry e) IF invoice(e) == i;
        toDate(Invoice i) <- lastDayOfMonth(fromDate(i));
        changeInvoiceDates() <- TRUE;
    }
}

fromDate(Invoice i) <- (GROUP MIN dateStart(TimeEntry e) IF invoice(e) == i) WHEN SET (i IS Invoice);

WHEN LOCAL CHANGED (fromDate(Invoice i)) AND NOT CHANGED (toDate(i)) DO {
    toDate(i) <- lastDayOfMonth(fromDate(i));
}

TABLE invoiceTask (Invoice, Task);
fromDate 'Дата с' = GROUP MIN dateStart(TimeEntry e) BY invoice(e), task(e) MATERIALIZED;

hours 'Часов' = GROUP SUM NUMERIC[5,1](hours(TimeEntry e)) BY invoice(e) MATERIALIZED;
hours 'Часов' (Invoice i, Task t) = GROUP SUM NUMERIC[5,1](hours(TimeEntry e)) BY invoice(e), task(e) MATERIALIZED;
hours 'Часов' (Invoice i, Category c) = GROUP SUM NUMERIC[5,1](hours(TimeEntry e)) BY invoice(e), category(task(e)) MATERIALIZED;

rate 'Ставка, руб.' = DATA NUMERIC[14,2] (Invoice, Task);
rate(Invoice i, Task t) <- rate(project(i), category(t)) WHEN SET(hours(i, t)) OR CHANGED(category(t));

hoursMonthly 'Часов в абонентской плате' = DATA NUMERIC[14,2] (Invoice);
hoursMonthly (Invoice i) <- hoursMonthly(project(i)) WHEN CHANGED(project(i));

sumMonthly 'Сумма абонентской платы' = DATA NUMERIC[14,2] (Invoice);
sumMonthly (Invoice i) <- sumMonthly(project(i)) WHEN CHANGED(project(i));

sum 'Сумма, руб.' (Invoice i, Task t) = hours(i, t) * rate(i, t);
sum 'Сумма, руб.' (Invoice i) = GROUP SUM sum(i, Task t);

hoursMonthly 'Часов в абонентской плате'  = DATA NUMERIC[14,1](Project, Category);
hoursMonthly 'Часов в абонентской плате' (Invoice i, Category c) = hoursMonthly(project(i), c);

hoursMonthlyCategory 'Часов в абонентской плате по категориям' (Invoice i) = GROUP SUM hoursMonthly(i, Category c);

EXTEND FORM customer PROPERTIES hoursMonthly(p, cc);

hoursPayCategory (Invoice i, Task t) = hours(i,t) (-) PARTITION UNGROUP hoursMonthly LIMIT hours(i,t) ORDER rate(i,t), fromDate(i,t), t BY i, category(t);
hoursPay 'Часов к оплате' (Invoice i, Task t) = hoursPayCategory(i,t) (-) PARTITION UNGROUP hoursMonthly LIMIT hoursPayCategory(i,t) ORDER rate(i,t), fromDate(i,t), t BY i;
hoursPay 'Часов к оплате' (Invoice i) = GROUP SUM hoursPay(i, Task t);
hoursPay 'Часов к оплате' (Invoice i, Category c) = GROUP SUM hoursPay(i, Task t) BY category(t);

CLASS Discount 'Скидка' {
    no 'Не предоставлена',
    positions 'На отдельные позиции',
    document 'По документу в целом'
}

name 'Наименование' (Discount d) = staticCaption(d);

FORM discounts 'Скидка'
    OBJECTS d = Discount
    PROPERTIES READONLY name(d)
    
    LIST Discount OBJECT d
;

discount = DATA Discount (Invoice);
nameDiscount 'Скидка' (Invoice i) = name(discount(i)) CHARWIDTH 25;

sumDiscount 'На сумму' = DATA NUMERIC[15,2] (Invoice);

percentDiscount '% Скидки' = DATA NUMERIC[5,2] (Invoice, Task);
sumDiscount 'Скидка' = DATA NUMERIC[15,2] (Invoice, Task);

WHEN LOCAL CHANGED(percentDiscount(Invoice i, Task t)) DO {
    sumDiscount(i, t) <- round2(hoursPay(i,t) * rate(i, t) * percentDiscount(i, t) / 100);
}
WHEN LOCAL CHANGED(sumDiscount(Invoice i, Task t)) DO {
    percentDiscount(i, t) <- round2(sumDiscount(i, t) * 100 / (hoursPay(i,t) * rate(i, t)));
}

sumPay 'Сумма к оплате' (Invoice i, Task t) = hoursPay(i,t) * rate(i, t) (-) (IF discount(i) == Discount.positions THEN sumDiscount(i, t));
sumPay 'Сумма к оплате' (Invoice i) = (IF maxAmountMonthly(project(i)) 
    THEN min((GROUP SUM sumPay(i, Task t)), maxAmountMonthly(project(i)))
    ELSE GROUP SUM sumPay(i, Task t)) (-) (IF discount(i) == Discount.document THEN sumDiscount(i));
sumPay 'Сумма к оплате' (Invoice i, Category c) = GROUP SUM sumPay(i, Task t) BY category(t);

CONSTRAINT extractMonth(fromDate(Invoice i)) != extractMonth(toDate(i)) AND hoursMonthly(i) MESSAGE 'Запрещено выставлять счет за несколько месяцев одновременно';

removeInvoice 'Исключить' (TimeEntry e)  { 
    invoice(e) <- NULL;
}

codeEmployee 'Код' (Task t) = code(employee(t));
nameCategoryEmployee 'Категория сотрудника' (Task t) = nameCategory(employee(t));

CLASS VAT 'НДС' {
    no 'Без НДС',
    ten '10%',
    twenty '20%'
}

name 'Наименование' (VAT d) = staticCaption(d) CHARWIDTH 10;

FORM vats 'Скидка'
    OBJECTS d = VAT
    PROPERTIES READONLY name(d)
    
    LIST VAT OBJECT d
;

vat = DATA VAT (Invoice);
nameVAT 'НДС' (Invoice i) =  name(vat(i));
sumVAT 'Сумма НДС' (Invoice i) = CASE WHEN vat(i) == VAT.ten THEN round2(sumPay(i) / 11)
                                      WHEN vat(i) == VAT.twenty THEN round2(sumPay(i) / 6);

percentVAT '% НДС' (Invoice i, Task t) = CASE WHEN vat(i) == VAT.ten AND t IS Task THEN '10%'
                                                           WHEN vat(i) == VAT.twenty AND t IS Task THEN '20%' CHARWIDTH 4;
sumVAT 'НДС' (Invoice i, Task t) = CASE WHEN vat(i) == VAT.ten THEN round2(sumPay(i, t) / 11)
                                        WHEN vat(i) == VAT.twenty THEN round2(sumPay(i, t) / 6);

FORM invoice 'Счет'
    OBJECTS i = Invoice PANEL
    PROPERTIES(i) date, nameNumerator, series, number, nameCustomer, nameProject, fromDate, toDate, hours, hoursMonthly, 
        hoursPay, sum, sumMonthly, sumPay, nameDiscount, sumDiscount SHOWIF discount(i) == Discount.document, nameVAT, sumVAT SHOWIF vat(i)
    
    OBJECTS t = Task
    PROPERTIES(t) READONLY nameProject, codeEmployee, nameCategoryEmployee, nameEmployee, nameTaskType
    PROPERTIES(i, t) fromDate READONLY, hours READONLY, hoursPay READONLY, rate, sum READONLY, percentDiscount SHOWIF discount(i) == Discount.positions,
        sumDiscount SHOWIF discount(i) == Discount.positions, percentVAT READONLY SHOWIF vat(i), sumVAT READONLY SHOWIF vat(i), sumPay READONLY
    PROPERTIES(t) READONLY name, description PANEL
    PROPERTIES (t) NEWSESSION EDIT
    FILTERS hours(i, t),
            assigned(project(t), currentEmployee())
    
    OBJECTS e = TimeEntry
    PROPERTIES(e) READONLY nameActivity, dateTimeStart, hours BACKGROUND userHours(e), dateTimeFinish
    PROPERTIES(e) removeInvoice TOOLBAR
    FILTERS task(e) == t
    
    OBJECTS c = Category
    PROPERTIES READONLY name(c), hoursMonthly(i, c), hoursPay(i, c)
    FILTERS hoursMonthly(i, c) OR hoursPay(i, c)
    ORDERS hoursMonthly(i, c) DESC 
    
    EDIT Invoice OBJECT i
;

DESIGN invoice {
    NEW header FIRST {
        caption = 'Счет';
        NEW params {
            type = CONTAINERH;
            MOVE PROPERTY(date(i));
            MOVE PROPERTY(nameNumerator(i));
            MOVE PROPERTY(series(i));
            MOVE PROPERTY(number(i));
            MOVE PROPERTY(nameCustomer(i));
            MOVE PROPERTY(nameProject(i));
        }
        NEW time {
            type = CONTAINERH;
            MOVE PROPERTY(fromDate(i));
            MOVE PROPERTY(toDate(i));
            MOVE PROPERTY(hours(i));
            MOVE PROPERTY(hoursMonthly(i));
            MOVE PROPERTY(hoursPay(i));
            MOVE PROPERTY(sum(i));
            MOVE PROPERTY(sumMonthly(i));
        }
        NEW sum {
            type = CONTAINERH;
            MOVE PROPERTY(nameDiscount(i));
            MOVE PROPERTY(sumDiscount(i));
            MOVE PROPERTY(sumPay(i));
            MOVE PROPERTY(nameVAT(i));
            MOVE PROPERTY(sumVAT(i));
        }
    }
    NEW pane AFTER header {
        fill = 1;
        type = SPLITH;
        NEW tasks {
            fill = 3;
            caption = 'Задачи';
            MOVE BOX(t) { 
                fill = 3;
                MOVE PROPERTY(description(t)) {
                    fill = 0.5;
                    panelCaptionAbove = TRUE;
                } 
            }
        }
        
        NEW right {
            fill = 1;
            MOVE BOX(e);
            MOVE BOX (c);
        }
    }
}

backgroundCategory (Task t) = CASE 
    WHEN NOT category(t) == category(employee(t)) AND category(t) == category(employee(t), project(t)) THEN RGB (255, 255, 200)
    WHEN NOT category(t) == (OVERRIDE category(employee(t), project(t)), category(employee(t))) THEN RGB (255, 200, 200);

changeCategoryProject(Invoice i, Task t) {
    DIALOG dialogCategory OBJECTS c INPUT NULL DO {
        category(Employee e, Project p) <- c WHERE e = employee(t) AND p == project(t);
        
        ASK 'Изменить категорию для всех задач в счёте?' DO {
            category(Task tt) <- (OVERRIDE c, category(employee(tt))) WHERE hours(i, tt) AND employee(tt) == employee(t);
        }
    }
}

EXTEND FORM invoice 
    PROPERTIES nameCategory(t) BACKGROUND backgroundCategory(t), 'Категория на проекте' = nameCategory(employee(t), project(t)) ON CHANGE changeCategoryProject(i, t) PANEL DRAW t TOOLBAR 
;

hours 'Часов' (Project p, Month m, INTEGER y) = GROUP SUM NUMERIC[5,1](hours(TimeEntry e)) BY project(e), extractMonth(dateStart(e)), extractYear(dateStart(e));
hours 'Часов' (Project p, Category c, Month m, INTEGER y) = GROUP SUM NUMERIC[5,1](hours(TimeEntry e)) BY project(e), overCategory(employee(e), project(e)), extractMonth(dateStart(e)), extractYear(dateStart(e));

CLASS InvoiceHistory 'История изменений';
invoice = DATA Invoice (InvoiceHistory);
number 'Номер версии' = DATA STRING[100] (InvoiceHistory) CHARWIDTH 20 NONULL;
date 'Дата версии' = DATA DATE (InvoiceHistory);
employee = DATA Employee (InvoiceHistory);
nameEmployee 'Сотрудник' (InvoiceHistory h) = CONCAT ', ', lastName(employee(h)), firstName(employee(h))  CHARWIDTH 25; 
dateTime 'Дата и время изменения' = DATA DATETIME (InvoiceHistory);
reason 'Причина изменения' = DATA STRING[150] (InvoiceHistory) NONULL;
note 'Примечание' = DATA STRING[150] (InvoiceHistory);

FORM history 'Изменение'
    OBJECTS h = InvoiceHistory PANEL 
    PROPERTIES(h) number, date, nameEmployee, dateTime, reason
    
    //EDIT InvoiceHistory OBJECT h;
;

EXTEND FORM invoice
    OBJECTS h = InvoiceHistory
    PROPERTIES(h) READONLY number, date, nameEmployee, dateTime, reason, note
    FILTERS invoice(h) == i
;

DESIGN invoice {
    tasks {
        MOVE BOX(h);
    }
}

history (Task t) {
    FOR hours(Invoice i, t) AND CHANGED (hours(i, t)) DO {
        MESSAGE 'Данная задача включена в счет. Необходимо указать причину изменений';
        NESTEDSESSION {
            NEW h = InvoiceHistory {    
                invoice(h) <- i;
                date(h) <- currentDate();
                employee(h) <- currentUser();
                dateTime(h) <- currentDateTime();
                note(h) <- 'Часы в счете изменились с ' + PREV(hours(i)) + ' на ' + hours(i);
                DIALOG history OBJECTS h = h NOMANAGESESSION DO { APPLY; } ELSE { beforeCanceled() <- TRUE; }    
            }
        }
    } 
}

EXTEND FORM task
    EVENTS
        ON APPLY BEFORE history(t)
;

history (Invoice i) {
    IF DROPCHANGED(sum(i)) THEN {
        MESSAGE 'Сумма в счете изменилась. Необходимо указать причину изменений';
        NESTEDSESSION {
            NEW h = InvoiceHistory {
                invoice(h) <- i;
                date(h) <- currentDate();
                employee(h) <- currentUser();
                dateTime(h) <- currentDateTime();
                note(h) <- 'Сумма в счете изменились с ' + round2(PREV(sum(i))) + ' на ' + round2(sum(i));
                DIALOG history OBJECTS h = h NOMANAGESESSION DO { APPLY; } ELSE { beforeCanceled() <- TRUE; }
            }
        }
    }
}

EXTEND FORM invoice
    EVENTS
        ON APPLY BEFORE history(i);
;